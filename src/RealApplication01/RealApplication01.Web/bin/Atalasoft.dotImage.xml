<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<doc>
    <assembly>
        <name>Atalasoft.dotImage</name>
    </assembly>
    <members>
        <member name="N:Atalasoft.Imaging">
            <summary>The Atalasoft.Imaging namespace contains general classes, exceptions, and enumerations that deal with image data and workspaces and is the root namespace for all dotImage classes.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.IImageReloader">
            <summary>IImageReloader provides a mechanism to bring unloaded images back into memory. This interface is used by ImageSource.</summary>
            <remarks>Typically, an IImageReloader is created at the same time that an image is first loaded into memory. That way the IImageReloader can encapsulate all the information needed to bring that image back into memory at a later time.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.IImageReloader.Reload">
            <summary>Reload an image into memory.</summary>
            <returns>An AtalaImage representing a previously loaded image.</returns>
        </member>
        <member name="T:Atalasoft.Imaging.FlipDirection">
            <summary>Specifies the flip direction.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Vertical">
            <summary>Flip Vertically.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.FlipDirection.Horizontal">
            <summary>Flip Horizontally.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.LicenseEdition">
            <summary>This enumeration indicates the type of license found by DotImage.</summary>
            <remarks>Use the static AtalaImage.Edition property to get the license edition.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Photo">
            <summary>DotImage Photo</summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.PhotoPro">
            <summary>DotImage Photo Pro</summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Document">
            <summary>DotImage Document Imaging</summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Standard">
            <summary>DotImage Photo (deprecated)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.LicenseEdition.Professional">
            <summary>DotImage Photo Professional (deprecated)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PaletteType">
            <summary>Contains the standard palette types that a palette can be set to.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Grayscale">
            <summary>The standard grayscale palette with gray colors. Entry 0 corresponds to Black and entry 255 corresponds with white, with gray shades between.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.Web">
            <summary>A palette where each primitive is a multiple of 51. (0, 51, 102, 153, 204, 255). With six possible values per primitive and 3 primitives (red, green and blue) the maximum colors are 216. (6^3=216)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.SixteenColor">
            <summary>Standard windows 16 color palette.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.BlackAndWhite">
            <summary>Two color black and white palette</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PaletteType.WebExtended">
            <summary>    Includes all colors of the 215 color web palette with the     addition of 40 grayscale colors.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormat">
            <summary>Specifies the format of the color data for each pixel in the image.</summary>
            <remarks>    The pixel format defines the number of bits of memory     associated with one pixel of data. The format also defines the     order of the color components within a single pixel of     data.     Many of the pixel formats are identical to the GDI+     System.Drawing.PixelFormat types. DotImage is     compatible with some of the GDI+ formats as well as including a     few others not compatible with GDI+.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel1bppIndexed">
            <summary>One bit per pixel. A two color palette defines the colors associated with bit values of 0 and 1.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel4bppIndexed">
            <summary>Four bits per pixel. A 16 color palette defines the colors associated with each pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppIndexed">
            <summary>Eight bits per pixel. A palette of up to 256 colors may be used. Can contain alpha palette values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel24bppBgr">
            <summary>Twenty-four bits per pixel with pixel channels containing Blue, Green, and Red values in that order. This is also called an RGB image despite the order of the channels.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgra">
            <summary>Thirty-two bits per pixel with pixel channels containing Blue, Green, Red, and Alpha values in that order. This is also called an RGBA image despite the order of the channels.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppBgr">
            <summary>Thirty-two bits per pixel with pixel channels containing Blue, Green, and Red values in that order. This is also called an RGB image despite the order of the channels. The last channel is unused.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel8bppGrayscale">
            <summary>Eight bits per pixel. Each pixel is a shade of gray, from 0 (black) to 255 (white).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscaleAlpha">
            <summary>Sixteen bits per pixel. A standard grayscale palette is used where pal(0)=RGB(0,0,0) up to pal(255)=RGB(255,255,255). The second channel contains an alpha (transparency) value for each pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel32bppCmyk">
            <summary>Thirty-Two bits per pixel with pixels containing the colors Cyan, Magenta, Yellow, and Black. This is a subtractive colorspace with 0, 0, 0, 0 corresponding to pure white and 255, 255, 255, 255 corresponding to pure black.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel16bppGrayscale">
            <summary>Sixteen bits per component. This format allows for greater detailed grayscale images. Each pixel can have a value from 0 (black) to 65535 (white).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel48bppBgr">
            <summary>Fourty-Eight bits per pixel with pixel channels containing Blue, Green and Red. This is a two byte per component image with values ranging from 0 to 65535 for each color component.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.PixelFormat.Pixel64bppBgra">
            <summary>Sixty-Four bits per pixel with pixel channels containing Blue, Green, Red and Alpha values in that order. This is a two byte per component image with values ranging from 0 to 65535 for each color component.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ResolutionUnit">
            <summary>Defines the units associated with Resolution, or Dpi.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.Undefined">
            <summary>Units are not defined.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerInch">
            <summary>Units are expressed in inches.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ResolutionUnit.DotsPerCentimeters">
            <summary>Units are expressed in centimeters.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaInt128">
            <summary>A 128 bit Integer value type used in JPEG2000 metadata.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor">
            <summary>Creates a new instance of AtalaInt128 from a long.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(Atalasoft.Imaging.AtalaInt128)">
            <summary>Creates a new copy of an AtalaInt128.</summary>
            <param name="i128">The AtalaInt128 to create a copy of.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Byte[])">
            <summary>Creates a new instance of AtalaInt128 from an array of bytes.</summary>
            <remarks>Note that this method of initialization does not allow the sign to be specified.</remarks>
            <param name="inData">    The byte values.     The lowest index of the input byte array (i.e [0]) should     contain the most significant byte of the number, and the     highest index should contain the least significant byte.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Byte[],System.Int32)">
            <summary>Creates a new instance of AtalaInt128 from an array of bytes.</summary>
            <param name="inData">    The byte values.     The lowest index of the input byte array (i.e [0]) should     contain the most significant byte of the number, and the     highest index should contain the least significant byte.</param>
            <param name="inLen">The number of bytes from the inData to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.Int64)">
            <summary>Creates a new instance of AtalaInt128 from a long.</summary>
            <param name="value">The value to use for the AtalaInt128.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of AtalaInt128 from a string.</summary>
            <remarks>Note that string values are specified in the &lt;sign&gt;&lt;magnitude&gt; format.</remarks>
            <param name="value">The numeric string to build the AtalaInt128 from.</param>
            <param name="radix">The numeric base. Values of 10 and 16 are common.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Add(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs an addition of two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.BitwiseAnd(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs a bitwise AND of two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard AND operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.BitwiseOr(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs a bitwise OR on two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard OR operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Compare(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Compares two AtalaInt128 objects.</summary>
            <returns>Returns -1 if bi1 is less than bi2, 1 of bi1 is greater than bi2 or 0 if the values are equal.</returns>
            <param name="bi1">The first AtalaInt128 to compare.</param>
            <param name="bi2">The AtalaInt128 to compare against.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Decrement(Atalasoft.Imaging.AtalaInt128)">
            <summary>Reduces the value by 1.</summary>
            <returns>The new value.</returns>
            <param name="bi1">The AtalaInt128 to decrement.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Divide(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs a division on two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard Divition operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Equals">
            <summary>These methods are used to determine if two AtalaInt128 values are equal.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Equals(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Returns true if both AtalaInt128 objects are equal.</summary>
            <returns>True if the values are equal.</returns>
            <param name="bi1">The first AtalaInt128 to test.</param>
            <param name="bi2">The AtalaInt128 to test against.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Equals(System.Object)">
            <summary>Returns a value indicating whether another AtalaInt128 is equal to this instance.</summary>
            <returns>True if the value is equal to the AtalaInt128.</returns>
            <param name="obj">An AtalaInt128 to test against.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.GetHashCode">
            <summary>Returns the hash code for this AtalaInt128.</summary>
            <returns>The AtalaInt128 hash code.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Increment(Atalasoft.Imaging.AtalaInt128)">
            <summary>Increments the AtalaInt128.</summary>
            <returns>The new value.</returns>
            <remarks>The standard Increment operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The AtalaInt128 to increment.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.IntValue">
            <summary>Returns the lowest 4 bytes of the AtalaInt128 as an Integer.</summary>
            <returns>The lowest 4 bytes of the value.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.LeftShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
            <summary>Performs a left bit shift on an AtalaInt128.</summary>
            <remarks>The standard Left-Shift operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The AtalaInt128 to shift.</param>
            <param name="shiftVal">The amount to shift.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.LongValue">
            <summary>Returns the lowest 8 bytes of the AtalaInt128 as a Long.</summary>
            <returns>The lowest 8 bytes of the value.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Modulus(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs a modulus calculation on two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard Modulus operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Multiply(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs a multiplication operation on two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard Multiplication operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Negate(Atalasoft.Imaging.AtalaInt128)">
            <summary>Negates an AtalaInt128 object.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard Negate operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The AtalaInt128 to negate.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.OnesComplement(Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs a bitwise complement on an AtalaInt128.</summary>
            <remarks>The standard Bitwise Complement operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <returns>The results of the calculation.</returns>
            <param name="bi1">The AtalaInt128 for this calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.RightShift(Atalasoft.Imaging.AtalaInt128,System.Int32)">
            <summary>Performs a right bit shift on an AtalaInt128.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard Right-Shift operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The AtalaInt128 to shift.</param>
            <param name="shiftVal">The amount of shifting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Subtract(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs a subtraction of two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToHexString">
            <summary>Returns a hex string with the contents of the AtalaInt128.</summary>
            <returns>A hex string representation of the AtalaInt128.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToString">
            <summary>Returns a string representing the AtalaInt128 in base 10.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToString">
            <summary>Returns a string representing the AtalaInt128 in base 10.</summary>
            <returns>A string representing the AtalaInt128 in base 10.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.ToString(System.Int32)">
            <summary>Returns a string representing the AtalaInt128 in sign-and-magnitude format in the specified radix.</summary>
            <returns>A string representing the AtalaInt128 in sign-and-magnitude format in the specified radix.</returns>
            <param name="radix">The numeric base to use in the string.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaInt128.Xor(Atalasoft.Imaging.AtalaInt128,Atalasoft.Imaging.AtalaInt128)">
            <summary>Performs an XOR operation on two AtalaInt128 objects.</summary>
            <returns>The results of the calculation.</returns>
            <remarks>The standard Exclusive Or operator can be used on AtalaInt128 object instead of calling this method.</remarks>
            <param name="bi1">The first AtalaInt128 in the calculation.</param>
            <param name="bi2">The second AtalaInt128 in the calculation.</param>
        </member>
        <member name="T:Atalasoft.Imaging.CmykColor">
            <summary>CmykColor defines a color that consists of cyan, magenta, yellow, and black components.</summary>
            <remarks>This class represents a color with 8-bit components.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.#ctor">
            <summary>Construct a new CmykColor structure</summary>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Drawing.Color)">
            <summary>Construct a new CmykColor from the RGB color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Int32)">
            <summary>Construct a new CmykColor from the 32-bit integer provided.</summary>
            <param name="packedCmyk">PackedCmyk represents the 4 components as 4 8 bit values with c in the upper byte, followed by m, y, and k.</param>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Construct a new CmykColor from the four components provided</summary>
            <remarks>Each value must be in the range 0-255.</remarks>
            <param name="c">The cyan component of this color.</param>
            <param name="m">The magenta component of this color.</param>
            <param name="y">The yellow component of this color.</param>
            <param name="k">The black component of this color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.Equals(System.Object)">
            <summary>Test for equality with another object.</summary>
            <param name="obj">The compare to compare against.</param>
        </member>
        <member name="M:Atalasoft.Imaging.CmykColor.GetHashCode">
            <summary>Get the hash code for this object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.op_Equality">
            <summary>Implements the equality operator.</summary>
            <returns>True if the objects represent the same color, false otherwise.</returns>
            <param name="c1">The first color to compare</param>
            <param name="c2">The second color to compare</param>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.op_Inequality">
            <summary>Implements the not-equals operator</summary>
            <returns>True if the colors are different, false otherwise.</returns>
            <param name="c1">The first color to compare</param>
            <param name="c2">The second color to compare</param>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.C">
            <summary>Set or get the cyan component of this color.</summary>
            <remarks>Must be in the range 0-255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.K">
            <summary>Set or get the black component of this color.</summary>
            <remarks>Must be in the range 0-255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.M">
            <summary>Set or get the magenta component of this color.</summary>
            <remarks>Must be in the range 0-255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.Rgb">
            <summary>Gets the value of the color an RGB Color object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.CmykColor.Y">
            <summary>Set or get the yellow component of this color.</summary>
            <remarks>Must be in the range 0-255.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Dpi">
            <summary>Holds the Resolution information.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Dpi.#ctor">
            <summary>Create a new Dpi structure at a specified resolution.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.Units">
            <summary>Gets the resolution Units.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.X">
            <summary>Gets the horizontal resolution.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Dpi.Y">
            <summary>Gets the vertical resolution.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaFileStream">
            <summary>A custom Stream object that is used to read and write images to a file. This is the default stream object used when specifying filenames for images.</summary>
            <remarks>This File Stream object is approximately 20 faster than the System.IO.FileStream object for loading images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.#ctor(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>Initializes a new instance of AtalaFileStream.</summary>
            <param name="fileName">The file name that this stream will write to or read from.</param>
            <param name="fileMode">Specifies how the operating system should open the file to read or write.</param>
            <param name="fileAccess">Specified if the file is read, write, or read/write.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Close">
            <summary>Closes the stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Dispose">
            <summary>This will dispose of any resources used by the stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Flush">
            <summary>Forces any unwritten data to be committed.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Reads data from the stream into a byte array.</summary>
            <returns>The number of bytes read.</returns>
            <param name="buffer">The byte array that will hold the image data.</param>
            <param name="offset">The starting position in the byte array to begin storing data.</param>
            <param name="count">The number of bytes to read.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek">
            <summary>Moves the file pointer for an open stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek">
            <summary>Moves the file pointer to the beginning of the stream.</summary>
            <returns>The new position within the file.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>Moves the file pointer to a specific position within the stream.</summary>
            <returns>The new position within the file.</returns>
            <param name="offset">The number of bytes to move the pointer.</param>
            <param name="origin">Specifies whether the offset is from the beginning, end or current position.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.SetLength(System.Int64)">
            <summary>Sets the size of the stream.</summary>
            <remarks>If the length is less than the current stream size, data on the end of the stream will be truncated.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaFileStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes data to the stream.</summary>
            <param name="buffer">A byte array containing the data to write.</param>
            <param name="offset">The starting position within the buffer to begin writing from.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanRead">
            <summary>Gets a value indicating if the stream can be read.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanSeek">
            <summary>Gets a value indicating if the steam is seekable.</summary>
            <remarks>This property also indicates whether the Length and Position properties can be used.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.CanWrite">
            <summary>Gets a value indicating if the stream can be written to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Handle">
            <summary>Gets or sets the unmanaged handle to the file stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Length">
            <summary>Gets the length of the stream in bytes.</summary>
            <remarks>The CanSeek property must return true before you can get the length of the stream.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Name">
            <summary>Gets the name of the file for this stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaFileStream.Position">
            <summary>Gets the current position of the stream pointer.</summary>
            <remarks>The CanSeek property must return true before you can access the Position of the stream.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaImage">
            <summary>The AtalaImage object holds the raw image data, a Palette, and methods used to access this data.</summary>
            <remarks>    Image data is stored in a 32-bit row aligned buffer. See     ToDib and FromDib for methods that will export or import from a     DIB (Device Independent Bitmap).     The AtalaImage is used throughout     Atalasoft dotImage and is similar to the     Bitmap object in .NET.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor">
            <summary>    Creates a new instance of AtalaImage.     Initializes a new instance of the AtalaImage     class.     Initializes a new instance of the AtalaImage     class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of the AtalaImage class specifying the Width, Height, and PixelFormat.</summary>
            <remarks>The image data is not set to a particular color and might end up with some noise in the image. See the overload with a specific color or palette index to fill the background with a specified color.</remarks>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Byte)">
            <summary>Initialize a new instance of the AtalaImage class specifying the Width, Height, PixelFormat, and palette index to initialize the image background to.</summary>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
            <param name="fillPaletteIndex">The palette index to fill the image with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat,System.Drawing.Color)">
            <summary>Initialize a new instance of the AtalaImage class specifying the Width, Height, PixelFormat, and Color to initialize the image background to.</summary>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
            <param name="fillColor">The color to fill the image with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IntPtr,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary>    Initialize a new instance of the AtalaImage class     specifying the image pointer, Width, Height, and     PixelFormat.     This method is obsolete. Please use the constructor that     takes a PixelMemory object instead.</summary>
            <remarks>    This constructor can be used to create an     AtalaImage object from existing image data.     The memory pointer will be managed by the     AtalaImage object, so do not free the memory     once the pointer is assigned to this object.     The RowStride of the image data must be 32-bit (DWORD)     aligned.</remarks>
            <param name="imageData">The memory pointer of the image bits of an unpacked DIB (Device Independent Bitmap).</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(Atalasoft.Imaging.Memory.PixelMemory,System.Int32,System.Int32,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of the AtalaImage class specifying the PixelMemory, Width, Height, and PixelFormat.</summary>
            <param name="memory">A PixelMemory object that represents an image's memory</param>
            <param name="width">Width of the image.</param>
            <param name="height">Height of the image.</param>
            <param name="pixelFormat">PixelFormat of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates an instance of an AtalaImage, with serialization info.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream)">
            <summary>Initialize a new instance of a AtalaImage class specifying a Stream.</summary>
            <remarks>The stream passed in can be a FileStream, MemoryStream, or other seekable stream. The appropriate ImageDecoder will be used to read the image.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.Codec.ImageDecoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of an AtalaImage class specifying a Stream, ImageDecoder to use for decoding the image, and a progress delegate.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load.</param>
            <param name="decoder">The ImageDecoder to use for loading the specified encoded image.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of an AtalaImage class specifying an image Stream and a page index to decode.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of a AtalaImage class specifying a Stream and a progress delegate.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String)">
            <summary>Initialize a new instance of a AtalaImage class specifying the file of the image to open.</summary>
            <remarks>A URL formatted string can be passed to download a file. If the address is pointing to an FTP site, you may need to include the username and password in the URL to allow access to the file. The format for this would be "ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of an AtalaImage class specifying an image file and a page index to decode.</summary>
            <param name="fileName">The path of the file to open.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.#ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initialize a new instance of a AtalaImage class specifying the file of the image to open and a progress delegate.</summary>
            <remarks>A URL formatted string can be passed to download a file. If the address is pointing to an FTP site, you may need to include the username and password in the URL to allow access to the file. The format for this would be "ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Clone">
            <summary>Creates a copy of this AtalaImage.</summary>
            <returns>A deep copy of this AtalaImage.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CombineChannels(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.AtalaImage[])">
            <summary>Creates an AtalaImage by combining multiple 8-bit grayscale or 16-bit grayscale images into one image.</summary>
            <remarks>    Pass in the images in the order that the final image will     end up. The number of image channels must match the channels in     the desired pixel format.     If you are creating a 48-bit or     64-bit image, the channels parameter must contain 16-bit     grayscale images, otherwise 8-bit grayscale images should be     used.</remarks>
            <returns>An AtalaImage consisting of the combined channels.</returns>
            <param name="desiredPixelFormat">The PixelFormat of the output image.</param>
            <param name="channels">A parameter array of each channel to be combined.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CopyToClipboard(System.IntPtr)">
            <summary>Copies the image data onto the clipboard.</summary>
            <param name="ownerHandle">    Handle to a window which will act as the clipboard     parent.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.CountColors">
            <summary>Count the number of unique colors in this AtalaImage.</summary>
            <returns>The number of unique colors in this AtalaImage.</returns>
            <remarks>For colormapped images, this method can return a different number of colors than what's stored in the Palette.Colors property. That is because this method actually loops through each pixel in the image to count the unique number of unique colors.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Dispose">
            <summary>Call this method to destroy this AtalaImage data and free memory.</summary>
            <remarks>    The garbage collector will eventually free this memory if     dispose is not called. By calling Dispose the memory     is freed immediately, important for images occupying many     kilobytes of memory.     After the image is disposed, any function calls that     access the      ImageData will result in an     ObjectIsDisposedException.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw">
            <summary>Draws the specified portion of this AtalaImage onto a specified System.Drawing.Graphics object at the specified location and with the specified size. Draws this AtalaImage to a graphics object.</summary>
            <remarks>Unlike GDI+, this Draw method will not convert the image to 32-bit when drawing to a Graphics object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)">
            <summary>Draws this AtalaImage onto a System.Drawing.Graphics object at a specified location and size.</summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle)">
            <summary>Draws a specified area of this AtalaImage onto a System.Drawing.Graphics object at the specified location and size.</summary>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw on.</param>
            <param name="srcRect">The rectangular area of the source image to draw.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Draw(System.Drawing.Graphics,System.Drawing.Rectangle,System.Drawing.Rectangle,System.Boolean)">
            <summary>Draws a specified area of this AtalaImage onto a System.Drawing.Graphics object at the specified location and size.</summary>
            <remarks>This method will draw the image onto a graphics object and convert to a bottom-top Bitmap if necessary. Some devices such as printers will fail when drawing a top-bottom image such as those internally stored in DotImage and .NET.</remarks>
            <param name="graphics">The Graphics object to draw on.</param>
            <param name="destRect">The rectangular area of the Graphics object to draw on.</param>
            <param name="srcRect">The rectangular area of the source image to draw.</param>
            <param name="renderBottomTop">When true, the image will be forced to draw bottom to top.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle">
            <summary>Fills a specified rectangle in this image with a specified solid color.Fills a rectangular area of an AtalaImage with a solid color.</summary>
            <remarks>This method is faster then using the Drawing namespace to draw a simple solid rectangle.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Drawing.Color)">
            <summary>Fills a specified rectangle in this image with a specified solid color.</summary>
            <param name="rect">The rectangular area to fill.</param>
            <param name="fillColor">The color of the fill area.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FillRectangle(System.Drawing.Rectangle,System.Int32)">
            <summary>Fills a specified rectangle in this image with a specified index.</summary>
            <param name="rect">The rectangular area to fill.</param>
            <param name="fillIndex">The palette index or grayscale value to fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Finalize">
            <summary>The Destructor that will automatically be called by the garbage collector</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Flip(Atalasoft.Imaging.FlipDirection)">
            <summary>Flips the image vertically or horizontally.</summary>
            <remarks>See  FlipCommand for an equivalent function that can be applied as a Command.</remarks>
            <param name="direction">The direction of the flip.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap">
            <summary>Returns a copy of a GDI+ System.Drawing.Bitmap object in the form of an AtalaImage object. Converts a specified Bitmap into an AtalaImage.</summary>
            <returns>A copy of a GDI+ System.Drawing.Bitmap object in the form of an AtalaImage object.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap,System.Boolean)">
            <summary>Converts a specified Bitmap into an AtalaImage by taking ownership of the Bitmap data, or returning a copy of the Bitmap data.</summary>
            <remarks>    When setting atalaImageWillOwnBitmap to true, do not     Dispose the Bitmap. The AtalaImage object holds onto a     reference to the Bitmap object, so the garbage collector will     not free the Bitmap data until the host AtalaImage goes out of     scope or is disposed.     When atalaImageWillOwnBitmap is false, a copy is returned     and it's up to the caller to dispose the Bitmap.</remarks>
            <param name="bitmap">The source Bitmap to convert</param>
            <param name="atalaImageWillOwnBitmap">When true, the Bitmap data will be owned by the AtalaImage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmap(System.Drawing.Bitmap)">
            <summary>Returns an AtalaImage containing a copy of the Bitmap.</summary>
            <remarks>It's up to the caller to dispose the Bitmap. The AtalaImage object does not own the bitmap data.</remarks>
            <returns>A copy of the Bitmap data in the form of an AtalaImage object.</returns>
            <param name="bitmap">The bitmap to create a copy from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromBitmapData(System.Drawing.Imaging.BitmapData,System.Drawing.Imaging.ColorPalette)">
            <summary>Returns an AtalaImage that contains the same image pointer that's in the specified BitmapData object.</summary>
            <returns>An AtalaImage that contains the same image pointer that's in the specified BitmapData object.</returns>
            <remarks>Use this method to set an existing Bitmap object to an AtalaImage without copying the data. This method should be used with care as the source Bitmap will always control the image memory, and can be disposed by the garbage collector if all references are removed.</remarks>
            <param name="bd">The BitmapData created from a Bitmap by locking the bits.</param>
            <param name="palette">The palette of the Bitmap. Set to null (Nothing in Visual Basic) if the Bitmap doesn't contain a palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray">
            <summary>Creates a new AtalaImage from a byte array containing an encoded image. Creates a new AtalaImage from an image stored in a byte array.</summary>
            <remarks>Another method of accomplishing the same thing would be to create a MemoryStream from the byte array, and passing it into the AtalaImage constructor with a stream. This method was added for convenience.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[])">
            <summary>Creates a new AtalaImage from a byte array containing an encoded image.</summary>
            <param name="buffer">A byte array containing the encoded image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromByteArray(System.Byte[],Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Creates a new AtalaImage from a byte array containing an encoded image.</summary>
            <param name="buffer">A byte array containing the encoded image.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromDib(System.IntPtr,System.Boolean)">
            <summary>Returns an AtalaImage from a DIB (Device Independent Bitmap) pointer.</summary>
            <returns>An AtalaImage from a DIB (Device Independent Bitmap) pointer.</returns>
            <remarks>The memory will be handled and disposed by the returned AtalaImage object if copy is set to true.</remarks>
            <param name="dibPointer">The DIB (device independent bitmap) pointer.</param>
            <param name="copy">Indicates if the DIB data is copied into the AtalaImage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromHBitmap(System.IntPtr)">
            <summary>Returns an AtalaImage from an hBitmap handle.</summary>
            <returns>An AtalaImage from an hBitmap handle.</returns>
            <param name="hBitmap">The hBitmap handle</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromURL">
            <summary>Returns an AtalaImage decoded from a specified URL path.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromURL(System.String,System.Int32,System.Boolean,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage decoded from a specified URL path.</summary>
            <param name="url">The URL string</param>
            <param name="frameIndex">The zero based frame index to load from</param>
            <param name="cacheOnClient">When true, will cache the data on the client, using the IE Local cache</param>
            <param name="progress">A progress delegate</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.FromURL(System.String,System.Boolean,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage decoded from a specified URL path.</summary>
            <param name="url">The URL string</param>
            <param name="cacheOnClient">When true, will cache the data on the client, using the IE Local cache</param>
            <param name="progress">A progress delegate</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetBitmap">
            <summary>Returns a System.Drawing.Bitmap object copied from this AtalaImage.</summary>
            <returns>A System.Drawing.Bitmap object copied from this AtalaImage.</returns>
            <remarks>This method will always copy the image data into a new Bitmap object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat">
            <summary>Returns a new AtalaImage object with a different PixelFormat from this AtalaImage. This function converts an AtalaImage from one PixelFormat to another.</summary>
            <returns>A new AtalaImage object with a different PixelFormat from this AtalaImage.</returns>
            <remarks>The  ChangePixelFormatCommand can also be used to change the pixelformat, using a Command.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Returns a new AtalaImage object with a different PixelFormat from this AtalaImage specifying a Atalasoft.Imaging.ColorManagement.ColorProfile.</summary>
            <returns>An AtalaImage object with a different PixelFormat from this AtalaImage.</returns>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain.</param>
            <param name="destProfile">The color profile to use when converting to and from the CMYK colorspace.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile,System.Boolean)">
            <summary>Returns a new AtalaImage object with a different PixelFormat from this AtalaImage specifying a Atalasoft.Imaging.ColorManagement.ColorProfile and if the ChangedPixelFormat event should fire.</summary>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain.</param>
            <param name="destProfile">The color profile to use when converting to and from the CMYK colorspace.</param>
            <param name="fireChangedPixelFormatEvent">Speicifies if the ChangedPixelFormat should fire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns a new AtalaImage object with a different PixelFormat from this AtalaImage.</summary>
            <returns>An AtalaImage object from a Bitmap object.</returns>
            <param name="newPixelFormat">The PixelFormat that the new AtalaImage will contain.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetGraphics">
            <summary>Returns a System.Drawing.Graphics object allowing GDI+ operations to draw onto this AtalaImage.</summary>
            <returns>A System.Drawing.Graphics object allowing GDI+ operations to draw onto this AtalaImage.</returns>
            <remarks>A Graphics object can only be obtained with PixelFormats that support GDI+ drawing such as 24-bit RGB and 32-bit RGBA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Used to serialize this AtalaImage.</summary>
            <remarks>AtalaImage objects are serialized as PNG images.</remarks>
            <param name="info">The SerializationInfo object used to store this AtalaImage.</param>
            <param name="context">The StreamingContext for this serialization.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPackedBuffer(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns an AtalaImage without rowstride and with pixels in RGB order.</summary>
            <remarks>This method is used to obtain an image buffer compatible with other applications that do not work directly with DIB images.</remarks>
            <returns>A new AtalaImage containing the image buffer.</returns>
            <param name="image">The source image to create the image buffer from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelCmykColor(System.Int32,System.Int32)">
            <summary>Get the color of a pixel in CMYK space</summary>
            <returns>A structure of type CmykColor representing the color of the pixel.</returns>
            <remarks>If the original image is not in CMYK, the color value will be converted to CMYK.</remarks>
            <param name="x">The x coordinate of the pixel</param>
            <param name="y">The y coordinate of the pixel</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelColor(System.Int32,System.Int32)">
            <summary>Returns the System.Drawing.Color of the specified pixel in this AtalaImage.</summary>
            <returns>The System.Drawing.Color of the specified pixel.</returns>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelFormatDepth(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns the color depth in bits per pixels associated with a specified PixelFormat.</summary>
            <returns>The color depth in bits per pixels associated with a specified PixelFormat.</returns>
            <param name="pixelFormat">The PixelFormat to retrieve the color depth from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.GetPixelIndex(System.Int32,System.Int32)">
            <summary>Gets the palette index of the specified pixel in this AtalaImage.</summary>
            <returns>The palette index of the specified pixel.</returns>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ImageFromClipboard(System.IntPtr)">
            <summary>    Creates a new AtalaImage from data on     the clipboard.</summary>
            <returns>    An AtalaImage object or null on     failure.</returns>
            <param name="ownerHandle">    Handle to a window which will act as the clipboard     parent.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatHasAlpha(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns true if the specified PixelFormat contains an alpha channel.</summary>
            <returns>True if this AtalaImage contains an alpha channel.</returns>
            <remarks>If this image is colormapped, the palette might contain an alpha value less than 255. If so the mapped pixel value will contain alpha even though this function returns false. Check if the palette has alpha to be sure.</remarks>
            <param name="pixelFormat">The PixelFormat to use when determining if there is an alpha channel.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsColormapped(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns true if the specified PixelFormat contains a palette.</summary>
            <returns>True if this AtalaImage contains a palette, false if it does not.</returns>
            <param name="pixelFormat">The PixelFormat to use when determining if there is an palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsContinuous(Atalasoft.Imaging.PixelFormat)">
            <summary>    Returns true if the PixelFormat passed     in is a continuous-tone format.</summary>
            <returns>true if continuous, false if not.</returns>
            <remarks>    A continuous-tone pixel format means that the pixel value     is the intentity of the color or channel value. Colormapped     images are not continuous.</remarks>
            <param name="pixelFormat">The PixelFormat to test for continuous-tone.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.PixelFormatIsTwoBytePerComponent(Atalasoft.Imaging.PixelFormat)">
            <summary>This method can be used to determine if a PixelFormat is a "Two Byte Per Component" image format.</summary>
            <returns>True if the pixelFormat parameter is a "Two Byte Per Component" image format.</returns>
            <param name="pixelFormat">The PixelFormat to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save">
            <summary>Saves this AtalaImage to a file.Saves this AtalaImage to a file or stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a Stream specifying an ImageEncoder and progress callback.</summary>
            <returns>The number of bytes saved to the file.</returns>
            <param name="stream">A stream containing the file which the image will be encoded to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a Stream specifying an ImageType and progress callback.</summary>
            <returns>The number of bytes saved to the file.</returns>
            <remarks>    To specify encoder settings, use the overload containing     the ImageEncoder parameter.     This method can be used to save an image to an FTP     server. If the fileName is pointing to an FTP server,     you may need to include the username and password in the URL to     allow the file to be saved. The format for this would be     "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save this AtalaImage to.</param>
            <param name="type">The image type to save this image as.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves this AtalaImage to a file specifying an ImageEncoder and progress callback.</summary>
            <remarks>This method can be used to save an image to an FTP server. If the fileName is pointing to an FTP server, you may need to include the username and password in the URL to allow the file to be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save this AtalaImage to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelCmykColor(System.Int32,System.Int32,Atalasoft.Imaging.CmykColor)">
            <summary>Set the color of a pixel in CMYK space</summary>
            <remarks>If the image is not a CMYK image, newColor will be converted to the proper color space.</remarks>
            <param name="x">The X coordinate of the pixel</param>
            <param name="y">The Y coordinate of the pixel</param>
            <param name="newColor">The color to set</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelColor(System.Int32,System.Int32,System.Drawing.Color)">
            <summary>Set the color of a particular pixel.</summary>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
            <param name="newColor">The new color to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SetPixelIndex(System.Int32,System.Int32,System.Byte)">
            <summary>Set the palette index of a particular pixel.</summary>
            <param name="x">x coordinate in the image.</param>
            <param name="y">y coordinate in the image.</param>
            <param name="value">The new palette index to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels">
            <summary>Returns an array of grayscale AtalaImage objects composing of individual channels of the source image.Splits each color channel of this AtalaImage into separate images.</summary>
            <returns>An array of grayscale AtalaImage objects composing of individual channels of the source image.</returns>
            <remarks>The returned array contains grayscale images representing the source image channels in the same order as the channels are in the image. Keep in mind that this means a Pixel24bitRgb contains channels in the order of blue, green, and red.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels">
            <summary>Returns an array of grayscale AtalaImage objects representing each 8-bit or 16-bit channel in the source image.</summary>
            <returns>An array of grayscale AtalaImage objects representing each 8-bit or 16-bit channel in the source image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.SplitChannels(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Returns an array of grayscale AtalaImage objects representing specified 8-bit or 16-bit channels in the source image.</summary>
            <returns>An array of grayscale AtalaImage objects representing specified 8-bit or 16-bit channels in the source image.</returns>
            <param name="channels">The channels mask to apply. The returned array will contain a null AtalaImage if that particular channel's bit flag is not set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToBitmap">
            <summary>Returns a copy of this AtalaImage as a Bitmap object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray">
            <summary>Returns a byte array containing an encoded image.Saves this AtalaImage into a byte array.</summary>
            <returns>A byte array containing an encoded image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Returns a byte array containing an encoded image.</summary>
            <returns>A byte array containing an encoded image.</returns>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns a byte array containing an encoded image.</summary>
            <returns>A byte array containing an encoded image.</returns>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToDib">
            <summary>Returns a DIB (device independent bitmap) pointer.Generates a DIB (Device Independent Bitmap) from this AtalaImage.</summary>
            <returns>A DIB (device independent bitmap) pointer.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToDib">
            <summary>Returns a pointer to a DIB (Device Independent Bitmap) copied from this AtalaImage.</summary>
            <remarks>The pointer must be freed by the calling application with GlobalFree or Marshal.FreeHGlobal.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToDib(System.IO.Stream)">
            <summary>Fills the given stream with a DIB (Device Independent Bitmap) copied from this AtalaImage.</summary>
            <param name="stream">The stream which will be filled with the DIB</param>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaImage.ToString">
            <summary>    Returns a textual description of this     AtalaImage object.</summary>
            <returns>A string containing the width, height and pixel format of this image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.BitmapMirror">
            <summary>Gets the Bitmap mirror of this AtalaImage.</summary>
            <remarks>    The image data is tied to the AtalaImage object from     which the Bitmap was created. As long as the AtalaImage is     still in scope and not disposed, the Bitmap may be used.     This property is best used in other methods in GDI+ that     require a Bitmap. It's not advised to store this Bitmap in a     variable. See GetBitmap for creating a new Bitmap with a copy     of the image data.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorDepth">
            <summary>Gets the number of bits per pixel of this AtalaImage.</summary>
            <remarks>The Colordepth can be changed by creating a new image with a different PixelFormat. See Atalasoft.Imaging.AtalaImage.GetChangedPixelFormat.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ColorProfile">
            <summary>Gets or sets the Atalasoft.Imaging.ColorManagement.ColorProfile associated with this AtalaImage.</summary>
            <remarks>    Any conversions to a colorspace to and from CMYK and RGB     will use this profile for the conversion.     Image Formats that can contain an embedded profile such     as Tiff, Jpeg, and Png will use this profile to embed into the     image. Likewise, when images are loaded containing a color     profile, this property will contain that profile.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.DitherErrorMax">
            <summary>Gets or sets the diffusion or dither error that's applied to an image when converting to from a continuous tone to colormapped format.</summary>
            <remarks>    This value can be from 0 to 127 where 0 is with no error     diffusion and 127 is maximum error diffusion.     See the Dithering topic for     more information.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Edition">
            <summary>Gets the type of license being used.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Height">
            <summary>Gets the height of this AtalaImage in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.ImageData">
            <summary>Gets the memory address of this AtalaImage. This property is unsupported. Using it will cause a compilation error. Use PixelMemory instead.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Palette">
            <summary>Gets the palette of this AtalaImage.</summary>
            <remarks>If the image does not contain a palette, this property will return null (Nothing in VB).</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormat">
            <summary>Gets the PixelFormat of this AtalaImage.</summary>
            <remarks>See ChangePixelFormatCommand for changing the PixelFormat.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelFormatChanger">
            <summary>Get or set the class used to convert image pixel formats.</summary>
            <remarks>    This class is used by AtalaImage.GetChangedPixelFormat()     as well as by all Atalasoft image commands. By changing this     property, a client can control how all pixel format conversions     are manager.     By default this property is set to an instance of          AtalaPixelFormatChanger.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.PixelMemory">
            <summary>Provides access to the memory that represents an image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Resolution">
            <summary>Get or set the Resolution of this AtalaImage object</summary>
            <remarks>If the image is loaded from a file, Resolution will contain the value stored in the file. The resolution will be persisted into new AtalaImage objects that are based off of this one.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.RowStride">
            <summary>Get the number of bytes in each row of this AtalaImage.</summary>
            <remarks>DIB images, which AtalaImage is based on, require the image data to be 32-bit aligned. If the width is not divisible by 4 bytes, then padding will be added to the width. This property returns the width including pixel data and padding.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Size">
            <summary>Gets the size of this AtalaImage in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaImage.Width">
            <summary>Gets the width of this AtalaImage in pixels.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.AtalaImage.ChangePixelFormat">
            <summary>Occurs when the image data changes PixelFormats.</summary>
            <remarks>This static event is usually fired when a particular method is not compatible with the current PixelFormat and it needs to be changed. By handling this event, you may show a dialog to the user that the current PixelFormat will be changed and allow that operation to be cancelled by setting the Cancel property in the Atalasoft.Imaging.PixelFormatChangeEventArgs to true.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaInt128Collection">
            <summary>A collection of AtalaInt128 structures.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.AtalaPixelFormatChanger">
            <summary>This is the standard PixelFormat changer class.</summary>
            <remarks>    The AtalaPixelFormatChanger does standard conversion     between all differing pixel formats. Note that when converting     from a pixel format that represents a large amount of data to a     pixel format that represents a lesser amount of data,     information will be lost. Therefore, it is not possible to     perform an accurate round trip conversion.     When converting to a palette image (8-bit indexed or     less) this will use Floyd Steinberg Dithering. See     DocumentPixelFormatChanger for converting document     images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaPixelFormatChanger.#ctor">
            <summary>Constructs a new AtalaPixelFormatChanger</summary>
        </member>
        <member name="M:Atalasoft.Imaging.AtalaPixelFormatChanger.LowLevelChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Overriding this method allows a subclass to handle changing the PixelFormat of an image.</summary>
            <returns>Returns a new AtalaImage in the specified PixelFormat that best represents the supplied image.</returns>
            <param name="sourceImage">The source image to change.</param>
            <param name="newPixelFormat">The new PixelFormat. This value will be different from sourceImage.PixelFormat</param>
            <param name="destProfile">The destination color profile. This may be null.</param>
        </member>
        <member name="P:Atalasoft.Imaging.AtalaPixelFormatChanger.DitherErrorMax">
            <summary>Gets or sets the diffusion or dither error that's applied to an image when converting to from a continuous tone to colormapped format.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ChangedImageEventArgs">
            <summary>This class is used to indicate when an AtalaImage has changed.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ChangedImageEventArgs.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Constructs a new ChangedImageEventArgs object</summary>
            <param name="originalImage">The original image</param>
            <param name="newImage">The image that is replacing the original image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ChangedImageEventArgs.NewImage">
            <summary>Gets the new AtalaImage that will replace the old image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ChangedImageEventArgs.OriginalImage">
            <summary>Gets the AtalaImage that represents an image to be replaced.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ExceptionEventArgs">
            <summary>Provides data for the Workspace.ProcessError event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ExceptionEventArgs.#ctor">
            <summary>Creates a new instance of ExceptionEventArgs.Creates a new instance of ExceptionEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ExceptionEventArgs.#ctor(System.Exception)">
            <summary>Creates a new instance of ExceptionEventArgs specifying the Exception that was thrown.</summary>
            <param name="exception">The Exception that was thrown.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ExceptionEventArgs.Exception">
            <summary>Gets the Exception that was thrown.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FileMapIOException">
            <summary>This exception is thrown when an error occurs when allocating an image with file memory mapping.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor">
            <summary>Creates a new instance of FileMapIOException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.Int32)">
            <summary>Creates a new instance of FileMapIOException specifying the Windows API error code.</summary>
            <param name="error">The Windows API error code.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.String)">
            <summary>Creates a new instance of FileMapIOException specifying the Exception message.</summary>
            <param name="message">A description of the exception.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileMapIOException.#ctor(System.String,System.Exception)">
            <summary>Creates an instance of FileMapIOException specifying the Exception message and inner Exception.</summary>
            <param name="message">A description of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="P:Atalasoft.Imaging.FileMapIOException.Message">
            <summary>Gets a description about the Exception.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileMapIOException.Win32ErrorCode">
            <summary>Gets the Windows API error code for this Exception.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FileReloader">
            <summary>FileReloader is an implementation of the IImageReloader interface. It encapsulates information about an image stored in a file system and can reload that image at any point.</summary>
            <remarks>This class is used by the FileSystemImageSource object, but any ImageSource that wants to implement a file system cache could use this object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor">
            <summary>Constructs a new FileReloader object.</summary>
            <returns>A new AtalaImage or null if the image can't be loaded.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.ImageEncoder)">
            <param name="encoder"/>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.#ctor(System.String,System.Int32)">
            <param name="frameIndex"/>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Dispose">
            <summary>Dispose releases resources associated with this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Dispose">
            <summary>Dispose releases resources associated with this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileReloader.Reload">
            <summary>Reload the image into memory.</summary>
            <returns>A new AtalaImage or null if the image can't be loaded.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.FileReloader.Path">
            <summary>Gets the path to the file referenced by this reloader.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSource">
            <summary>This is an implementation of an ImageSource using a file system as a provider of images.</summary>
            <remarks>This class can be used to open a large multi-page TIFF document. Create an instance of the FileSystemImageSource setting the doAllFrames parameter to true.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor">
            <summary>Constructs a new FileSystemImageSource object.</summary>
            <returns>A new FileSystemImageSource object.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of FileSystemImageSource from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this object.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String,System.Boolean)">
            <summary>Provides access to all image files from a directory or file</summary>
            <remarks>    This will provide access only to image files for which     there is an existing registered codec.     Because there is a codec available for a file does not     mean that it can be loaded.</remarks>
            <param name="path">A path to a directory or file containing image files.</param>
            <param name="doAllFrames">If true, this image source will provide access to every available frame in every file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String,System.String,System.Boolean)">
            <summary>Provides access to all image files from a directory that match a pattern or from a single file.</summary>
            <remarks>    This will provide access only to image files for which     there is an existing registered codec.     Because there is a codec available for a file does not     mean that it can be loaded.     If path is a single file, the pattern will be     ignored.</remarks>
            <param name="path">A path to a directory containing image files or to a single file.</param>
            <param name="pattern">A regular expression used to match files in the directory.</param>
            <param name="doAllFrames">If true, this image source will provide access to every available frame in every file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.#ctor(System.String[],System.Boolean)">
            <summary>Provides access to a list of image files.</summary>
            <remarks>    This will provide access only to image files for which     there is an existing registered codec.     Because there is a codec available for a file does not     mean that it can be loaded.</remarks>
            <param name="fileNames">A list of file names to be loaded as images.</param>
            <param name="doAllFrames">If true, this image source will provide access to every available frame in every file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.AllowFile(System.String,System.Int32,System.Int32)">
            <summary>Called to determine whether a file is allowed.</summary>
            <remarks>By default, all files are allowed. Set the  FileFilter property or override this method to control which files to allow.</remarks>
            <param name="path">The filename of the file.</param>
            <param name="frameIndex">The index of the frame.</param>
            <param name="frameCount">The number of frames to allow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetFrameCount(System.Int32)">
            <summary>Returns the number of frames in for an image in a FileSystemImageSource.</summary>
            <returns>The number of frames in the image.</returns>
            <param name="index">The index of the file to return a frame count.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetFrameNumber(System.Int32)">
            <summary>Return the frame index of an image in the FileSystemImageSource.</summary>
            <returns>The frame index of the image.</returns>
            <param name="index">The index of the image in the ImageSource.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetImageStream(System.Int32)">
            <summary>Gets the stream and the frame within that stream that corresponds to the passed in index. The caller is responsible for closing the returned stream.</summary>
            <param name="index">The index of the requested image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with object information.</summary>
            <param name="info">A SerializationInfo object that will be filled.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.GetPath(System.Int32)">
            <summary>Returns the path of the image in a FileSystemImageSource.</summary>
            <returns>The path of the image file.</returns>
            <param name="index">The index of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSource.ToPath(Atalasoft.Imaging.AtalaImage)">
            <summary>Retrieves the path associated with a previously acquired image.</summary>
            <returns>A string representing the path to the file from which the image was derived. If the image had not been previously acquired by the FileSystemImage source, ToPath will return null.</returns>
            <param name="image">An image that had been previously acquired by the FileSystemImageSource</param>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSource.FileFilter">
            <summary>Gets or sets a delegate that is invoked for each file, allowing the files to be filtered with custom rules.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.FileSystemImageSource.ImageAcquired">
            <summary>Invoked when an image is acquired into memory.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSourceEventArgs">
            <summary>This object is used for events fired by a FileSystemImageSource.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FileSystemImageSourceEventArgs.#ctor(System.String,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>Constructs a new FileSystemImageSourceEventArgs object.</summary>
            <param name="path">The path to the image file.</param>
            <param name="frameIndex">The frame index of the image.</param>
            <param name="frameCount">The total number of frames in this files.</param>
            <param name="image">The image that was loaded.</param>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.FrameCount">
            <summary>The total number of frames in this image file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.FrameIndex">
            <summary>The index of this frame in the image file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.Image">
            <summary>The image that has been acquired.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.FileSystemImageSourceEventArgs.Path">
            <summary>The path to the image file.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.FormDataCollection">
            <summary>The FormDataCollection is used with the HttpPost class to send form information to a web server.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.#ctor">
            <summary>Creates a new instance of FormDataCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add">
            <summary>Adds data to the collection.Adds a new item to the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.String)">
            <summary>Adds form data to the collection.</summary>
            <remarks>Use this to add data other than images that might be needed for any server-side scripting.</remarks>
            <param name="fieldName">The field name of the form object.</param>
            <param name="fieldValue">The value of the field object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage)">
            <summary>Adds an image to the collection.</summary>
            <param name="fieldName">The form field name used to identify the image.</param>
            <param name="image">The AtalaImage to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,Atalasoft.Imaging.AtalaImage,System.String)">
            <summary>Adds an image to the collection specifying the filename.</summary>
            <param name="fieldName">The form field name used to identify this image.</param>
            <param name="image">The AtalaImage to add.</param>
            <param name="fileName">The original filename of this image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.Add(System.String,System.IO.Stream,System.String,System.String)">
            <summary>Adds an image to the collection specifying the filename.</summary>
            <param name="fieldName">The form field name used to identify this image.</param>
            <param name="data">The data stream</param>
            <param name="fileName">The original filename of this image.</param>
            <param name="contextType">Also known as mime type, for example "image\jpeg".</param>
        </member>
        <member name="M:Atalasoft.Imaging.FormDataCollection.AddFromBrowser(System.String,System.Object,System.String)">
            <summary>    Adds an image or form field to the collection.     You must use this method when posting from a web     browser.</summary>
            <remarks>When adding an image, set the fieldValue to the filename of the image. When adding a form field entry, set the image to null.</remarks>
            <param name="fieldName">The field name of the form object.</param>
            <param name="image">The image you want to upload.</param>
            <param name="fieldValue">The value of the field object or the filename of the image.</param>
        </member>
        <member name="T:Atalasoft.Imaging.GdiException">
            <summary>This exception is thrown when a GDI function fails.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException.#ctor">
            <summary>Creates an instance of GdiException.Creates a new instance of GdiException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.String)">
            <summary>Creates a new instance of GdiException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.GdiException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of GdiException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Atalasoft.Imaging.HttpPost">
            <summary>    This class allows you to post data to a server without     user interaction.     The data is posted as if it were being sent from an HTML     Form, allowing any form handling component to be used on the     server.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.#ctor">
            <summary>Creates a new instance of HttpPost.Creates an instance of HttpPost.Creates a new instance of HttpPost.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.#ctor(Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Creates a new instance of HttpPost specifying the ImageEncoder to use.</summary>
            <param name="encoder">The ImageEncoder to use when posting images to the server.</param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.#ctor(Atalasoft.Imaging.Codec.ImageEncoder,System.Boolean)">
            <summary>Creates a new instance of HttpPost specifying the ImageEncoder to use and whether or not to combine multiple images into one post.</summary>
            <param name="encoder">The ImageEncoder to use when posting images to the server.</param>
            <param name="combineImages">Whether or not to combine multiple images into one post.</param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.GetData(System.String)">
            <summary>This method can be used to retrieve information from a server.</summary>
            <returns>A string containing the data returned by the server.</returns>
            <remarks>Use this method when you only want to retrieve information. You can send parameters to the server by adding query string values to the url.</remarks>
            <param name="url">A web address to request data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.HttpPost.PostData(System.String)">
            <summary>This method will send the internal FormDataCollection entries to a server for processing.</summary>
            <returns>A string containing returned data from the server.</returns>
            <param name="url">The web address to send the data to.</param>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.CombineImages">
            <summary>Sets or gets whether or not multiple images will be combined into one post.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.HttpPost.FormData">
            <summary>Gets the FormDataCollection object that will be posted to the server.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCancelEventArgs">
            <summary>Provides data for the event which allow an operation using an image to be cancelled.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCancelEventArgs.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of ImageCancelEventArgs.</summary>
            <param name="image">The image being processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCancelEventArgs.Cancel">
            <summary>    Gets or sets a value that when true will cancel the     current operation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollection">
            <summary>This collection holds multiple AtalaImage objects useful for various features like working with multi-paged images, animations, and layering.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor">
            <summary>Initializes a new instance of the ImageCollection objectCreates an ImageCollection object.Initializes a new instance of the ImageCollection object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary>Initializes a new instance of the ImageCollection object specifying one or multiple AtalaImage objects to add to the collection.</summary>
            <param name="images">A parameter array of one or many AtalaImage objects.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the ImageCollection object specifying a Stream containing image data to load.</summary>
            <param name="stream">A Stream of image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.#ctor(System.String,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the ImageCollection object specifying a filename containing image data to load.</summary>
            <param name="fileName">The filename of the image (or images) to load into the ImageCollection.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Add(Atalasoft.Imaging.AtalaImage)">
            <summary>Adds an AtalaImage to the collection.</summary>
            <param name="image">The image to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Contains(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns a value Indicating if a specified image exists within this collection.</summary>
            <returns>A value Indicating if a specified image exists within this collection.</returns>
            <param name="image">The AtalaImage to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.CopyTo(Atalasoft.Imaging.AtalaImage[],System.Int32)">
            <summary>Copy this ImageCollection into an existing AtalaImage array.</summary>
            <param name="images">The existing AtalaImage array.</param>
            <param name="index">The index in the array begin copying.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Dispose">
            <summary>Remove unmanaged resources in each AtalaImage in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.IndexOf(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns the index of a specified image in the collection.</summary>
            <returns>The index of a specified image in the collection.</returns>
            <remarks>Returns -1 if the image doesn't exist in the collection.</remarks>
            <param name="image">The AtalaImage to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Insert(System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>Insert an AtalaImage at the specified index.</summary>
            <param name="index">The index to insert the image after.</param>
            <param name="image">The AtalaImage to insert into the collection.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MoveNext">
            <summary>Set the Current image to the next image in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.MovePrevious">
            <summary>Set the Current image to the previous image in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.ReadImages(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Read all images from a multipage image file into this image collection.</summary>
            <remarks>If the source image doens't support multiple images, only a single image will be loaded into the collection.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Remove(Atalasoft.Imaging.AtalaImage)">
            <summary>Removes a specified AtalaImage from this ImageCollection.</summary>
            <remarks>The image that is being removed, will not be automatically disposed by the Workspace. To immediatly free memory, the image that's being removed must be disposed.</remarks>
            <param name="image">The image in the collection to remove.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Replace(Atalasoft.Imaging.AtalaImage)">
            <summary>Replaces the Current image in the collection with a new image.</summary>
            <remarks>The image that is being removed, will not be automatically disposed by the Workspace. To immediately free memory, the image that's being removed must be disposed. See the Image property in the Workspace class to replace an image, and add it to the UndoCollection, and dispose of it automatically.</remarks>
            <param name="image">The new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save">
            <summary>Save the images in this ImageCollection to a file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save each ImageCollection in a multipaged or multiframed format.</summary>
            <returns>Filesize of saved image.</returns>
            <param name="fileName">The name of the file to save.</param>
            <param name="imageType">The image format to save.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save each ImageCollection in a multipaged or multiframed format.</summary>
            <returns/>
            <param name="fileName">The name of the file to save.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save the images in this ImageCollection to a stream specifying the ImageEncoder to use for encoding the image data.</summary>
            <remarks>The ImageEncoder must have the IAppendable interface in order to save multiple images in one file.</remarks>
            <param name="stream">A stream containing the file which the image will be encoded to. This stream must have FileAccess.ReadWrite set or else only the first image will be saved.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in VB).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollection.ToByteArray(Atalasoft.Imaging.Codec.ImageEncoder,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves the image into a byte array.</summary>
            <returns>A byte array containing the image data.</returns>
            <param name="encoder">The ImageEncoder to use.</param>
            <param name="progress">A progress event handler used during the save process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Current">
            <summary>Gets or sets the current image in this collection.</summary>
            <remarks>The Current image in the collection is the image that is considered active if there is an associated Workspace that has a reference to this collection. Any image processing commands will be applied to the Current image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollection.Item(System.Int32)">
            <summary>Allows the image collection to be accessed through an indexer and enumerated with foreach.</summary>
            <param name="index">The index of the image.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollectionEventArgs">
            <summary>Provides data for the Workspace.NewImage and Workspace.ChangedImage events.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs.#ctor">
            <summary>Creates an ImageCollectionEventArgs object.Creates a new instance of ImageCollectionEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionEventArgs.#ctor(Atalasoft.Imaging.ImageCollection)">
            <summary>Creates a new instance of ImageCollectionEventArgs specifying the ImageCollection.</summary>
            <param name="images">The ImageCollection for this event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageCollectionEventArgs.Images">
            <summary>Gets or sets the ImageCollection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCollectionImageSource">
            <summary>ImageCollectionImageSource is an adapter class to make an ImageCollection compatible with the ImageSource class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageCollectionImageSource.#ctor(Atalasoft.Imaging.ImageCollection)">
            <summary>Constructs a new ImageCollectionImageSource with the given ImageCollection.</summary>
            <param name="collection">The collection to be used in the ImageSource.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageEventArgs">
            <summary>Provides data for the Workspace.NewImage and Workspace.ChangedImage events.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageEventArgs.#ctor">
            <summary>Creates an ImageEventArgs object.Creates a new instance of ImageEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageEventArgs.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of ImageEventArgs specifying the AtalaImage for this event.</summary>
            <param name="image">The AtalaImage for this event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageEventArgs.Image">
            <summary>Gets or sets the AtalaImage.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageMemory">
            <summary>    This class handles memory associated with an image. It     controls how the memory is allocated and freed. Use this class     to enable memory file mapping.     This class is no longer used in DotImage. Please use     PixelMemory instead.</summary>
            <remarks>    File Mapped memory can greatly increase performance when     working with extremely large images or when system resources     are limited. For more information on file mapped memory, please     see topic Introduction to Memory Management.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor">
            <summary>Initializes a new instance of ImageMemory.Creates an ImageMemory object.Initializes a new instance of ImageMemory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.Int32)">
            <summary>Initializes a new instance of ImageMemory indicating the number of bytes to allocate.</summary>
            <param name="bytes">number of bytes to allocate</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.Int32,System.Boolean)">
            <summary>Initializes a new instance of ImageMemory indicating the number of bytes to allocate and if this object should handle the freeing of that memory.</summary>
            <param name="bytes">number of bytes to allocate</param>
            <param name="zeroMemory">indicates if the memory should be freed when disposing</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.IntPtr)">
            <summary>Initializes a new instance of ImageMemory setting the pre allocated memory pointer.</summary>
            <param name="imagePointer">The memory pointer</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.#ctor(System.IntPtr,System.Boolean)">
            <summary>Initializes a new instance of ImageMemory setting the pre allocated memory pointer and if this object should handle the freeing of that memory.</summary>
            <remarks>Initializes a new instance of ImageMemory setting the pre-allocated memory pointer and if this object should handle the freeing of that memory.</remarks>
            <param name="imagePointer">The memory pointer</param>
            <param name="preventDispose">indicates if the memory should be freed when disposing</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageMemory.Dispose">
            <summary>Free the memory associated with this object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.EnableMemoryFileMapping">
            <summary>File mapping is no longer supported. This property will throw on set.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.FileMapped">
            <summary>File mapping is no longer supported.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.Handle">
            <summary>    Gets the pointer to the memory handled by this     object.     This class is no longer used in DotImage. Please use     PixelMemory instead.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapTempPath">
            <summary>File mapping is no longer supported. This property will throw on set.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.MemoryMapThreshold">
            <summary>File mapping is no longer supported. This property will throw on set.</summary>
            <remarks>The default threshold is 30,000 bytes, but the optimal threshold is highly dependant on the client system and it's available memory.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageMemory.PreventDispose">
            <summary>    Gets or sets a value indicating if the memory should be     freed when disposing.     This class is no longer used in DotImage. Please use     PixelMemory instead.</summary>
            <remarks>This should only be set to true if the same memory is being handled somewhere else.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessException">
            <summary>This exception is thrown when an error occurs during processing of an image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor">
            <summary>Creates an ImageProcessException.Creates a new instance of ImageProcessException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String)">
            <summary>Creates a new instance of ImageProcessException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String,Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of ImageProcessException specifying the exception message and AtalaImage.</summary>
            <param name="message">The exception message.</param>
            <param name="image">The AtalaImage causing this exception.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageProcessException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Provide serialization information</summary>
            <param name="info">The information for this object.</param>
            <param name="context">The context in which this object is being streamed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessException.Image">
            <summary>Gets or sets the AtalaImage object which is causing the error.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSource">
            <summary>An abstract class that is used to define a flexible mechanism for managing large quantities of images without having to keep them all in memory at once.</summary>
            <remarks>ImageSource objects are configurable for memory usage or for aggressive unloading of images and can be built with a cache to allow transient data sources such as live video to be treated as if they were persistent.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire">
            <summary>Acquire an AtalaImage for use.</summary>
            <remarks>These versions of Acquire are used to put an additional request to hold onto an AtalaImage.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire(Atalasoft.Imaging.AtalaImage)">
            <summary>    This method has been deprecated. Use     the      ReAcquire method instead.     Acquire an AtalaImage that has been     previously acquired.</summary>
            <returns>True if the image has successfully acquired.</returns>
            <param name="image">The image to acquire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Acquire(System.Int32)">
            <summary>    This method has been deprecated. Use     the      ReAcquire method instead.     Acquire a previous image by index.</summary>
            <returns>The acquired image.</returns>
            <param name="index">The index of the image to acquire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.AcquireNext">
            <summary>Acquire the next available image from the ImageSource.</summary>
            <returns>A new AtalaImage or null if the image can't be loaded or there is no image to load.</returns>
            <remarks>    This method may throw an exception on certain load     failures, but that will depend on the concrete implementation     of ImageSource.     A call to Release should     be made for every Acquire.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Dispose">
            <summary>Free up resources used by this ImageSource</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Dispose">
            <summary>Free up resources used by this ImageSource</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Flush">
            <summary>Flush all released images out of memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.HasMoreImages">
            <summary>Determines if there are more images to load.</summary>
            <returns>True if there are more images to load, false otherwise.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.NotifyChangedImage">
            <summary>This method is used to inform an ImageSource that one of its current acquired images has changed.</summary>
            <remarks>    If an ImageSource is used by several clients, it is     useful to be able to have one client change an image and be     able to notify any other client that a change has been made so     that it can track the changes.     For example, if there are two open views on the same     image, changes in one can be reflected in the other by calling     NotifyChangedImage and by subscribing to the ChangedImage     event.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.NotifyChangedImage(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>This method is used to inform an ImageSource that one of its current acquired images has changed.</summary>
            <param name="originalImage">The original image acquired through one of Acquire methods.</param>
            <param name="newImage">An entirely new image that will replace the original image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.NotifyChangedImage(Atalasoft.Imaging.AtalaImage)">
            <summary>This method is used to inform an ImageSource that one of its current acquired images has changed.</summary>
            <param name="originalImage">The original image acquired through one of Acquire methods.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.OnReleasing(Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs)">
            <summary>Called when Release was performed on an ImageSourceNode.</summary>
            <remarks>This method will raise the  Releasing event.</remarks>
            <param name="e">A  ReleasingImageSourceNodeEventArgs containing the node that was released.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReAcquire">
            <summary>Acquire an AtalaImage for use which has been previously acquired.</summary>
            <remarks>These versions of Acquire are used to put an additional request to hold onto an AtalaImage.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReAcquire(Atalasoft.Imaging.AtalaImage)">
            <summary>Acquire an AtalaImage that has been previously acquired.</summary>
            <returns>True if the image has successfully acquired.</returns>
            <param name="image">The image to re-acquire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReAcquire(System.Int32)">
            <summary>Acquire a previous image by index.</summary>
            <returns>The acquired image or null (Nothing in VB) if the image was not previously acquired.</returns>
            <param name="index">The index of the image to re-acquire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Release(Atalasoft.Imaging.AtalaImage)">
            <summary>Release a previously acquired image.</summary>
            <returns>True if the image was fully released, false otherwise.</returns>
            <remarks>    If asked to release an object that has not been     previously acquired, Release will return     true.     This method will call the      OnReleasing method to notify derived classes about this     action.</remarks>
            <param name="image">The image to release.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReleaseChangedImage">
            <summary>Release an image that has changed, notifying other clients that the image has changed.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReleaseChangedImage(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Release an image that has changed, notifying other clients that the image has changed.</summary>
            <param name="originalImage">The original image acquired through one of Acquire methods.</param>
            <param name="newImage">An entirely new image that will replace the original image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.ReleaseChangedImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Release an image that has changed, notifying other clients that the image has changed.</summary>
            <param name="originalImage">The original image acquired through one of Acquire methods.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSource.Reset">
            <summary>Resets the ImageSource to start over again.</summary>
            <remarks>    Some subclasses of ImageSource will     require that all previously acquired images must be released     before a Reset.     It will not always be the case that the first image     acquired will be the same after a reset. This is highly     dependent on the nature of the concrete implementation of     ImageSource.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.Current">
            <summary>Returns the index of the current image.</summary>
            <remarks>This property represents the index of the next image to be acquired, not the index of the most recently acquired image. If an ImageSource has just been constructed or Reset has been invoked, Current will be 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.ImmediateUnload">
            <summary>Determines if an image should be unloaded from memory immediately.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.MemoryInUse">
            <summary>Returns an estimate of the number of bytes of memory currently in use by images in this ImageSource.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.MemoryLimit">
            <summary>This sets the limit for memory usage for this ImageSource. If memory usage goes beyond this, images will be dropped from memory until memory usage is below the limit.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.TotalImages">
            <summary>Returns the total number of available images in this ImageSource.</summary>
            <remarks>Always check that TotalImagesKnown is true before accessing this property.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSource.TotalImagesKnown">
            <summary>Gets a value indicating whether or not the total number of images in this image source can be known.</summary>
            <remarks>Always check this property before accessing the TotalImages property.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.ImageSource.ChangedImage">
            <summary>This event is fired whenever an image has been replaced.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.ImageSource.Releasing">
            <summary>Raised when the Release method is called on an ImageSourceNode.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSourceNode">
            <summary>This is an object used to hold AtalaImage objects in the ImageSource. This object is only of interest if you are writing your own ImageSource implementation.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.IImageReloader)">
            <summary>Constructs a new ImageSourceNode using the supplied image and reloader.</summary>
            <param name="image">The image to hold onto.</param>
            <param name="reloader">An IImageReloader to load the object back into memory. This can be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Acquire">
            <summary>Acquire a lock on this node.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose">
            <summary>Release resources used by this node.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Dispose">
            <summary>Release resources used by this node.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.LetGo">
            <summary>Unload the image from memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSourceNode.Release">
            <summary>Release a lock on this image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Image">
            <summary>The image in this node.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.ImageSize">
            <summary>The number of bytes used by this image when in memory.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Index">
            <summary>The index of this image in the ImageSource.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Released">
            <summary>Determines if this image is fully released.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSourceNode.Reloader">
            <summary>Gets the reloader, if any, associated with this node.</summary>
            <remarks>This property may return null. It is entirely valid for there to be no image reloader for any given image.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageStreamEventArgs">
            <summary>Provides data for the ImageStreamCompleted event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageStreamEventArgs.#ctor">
            <summary>Creates an ImageStreamEventArgs object.Creates a new ImageStreamEventArgs object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageStreamEventArgs.#ctor(System.IO.Stream,System.Int32)">
            <summary>Creates a new instance of ImageStreamEventArgs specifying the stream and number of bytes.</summary>
            <param name="stream">The stream for this event.</param>
            <param name="bytes">The number of bytes for this event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Bytes">
            <summary>Gets the number of bytes written to or read from the image stream.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageStreamEventArgs.Stream">
            <summary>Gets the Steam object of interest.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.IncompatiblePixelFormatException">
            <summary>This exception is thrown when the image to be processed does not contain a PixelFormat compatible with the function of interest.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor">
            <summary>Creates an IncompatiblePixelFormatException object.Creates a new instance of IncompatiblePixelFormatException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.String)">
            <summary>Creates a new instance of IncompatiblePixelFormatException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IncompatiblePixelFormatException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of IncompatiblePixelFormatException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.IndirectionImageSource">
            <summary>The IndirectionImageSource class is used to provide an ImageSource which can be modified after its initial creation. The  ThumbnailImageViewerSynchronizer uses this class to handle changes to the original ImageSource.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.#ctor(Atalasoft.Imaging.RandomAccessImageSource)">
            <summary>Creates a new instance of IndirectionImageSource specifying the initial  RandomAccessImageSource to use.</summary>
            <param name="imageSource">The initial  RandomAccessImageSource to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add">
            <summary>Adds an image to the image source.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(System.String,System.Int32)">
            <summary>Adds an image to the end of the image source from a filename.</summary>
            <param name="fileName">The filename of the image to add.</param>
            <param name="frameIndex">The frame index to add. If this value is -1, all pages will be added to the image source.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(System.IO.Stream,System.Int32)">
            <summary>Adds an image to the end of the image source from a stream.</summary>
            <param name="stream">The stream containing the image.</param>
            <param name="frameIndex">The frame index to add. If this value is -1, all pages will be added to the image source.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Add(Atalasoft.Imaging.AtalaImage)">
            <summary>Adds an AtalaImage to the end of the image source.</summary>
            <param name="image">The image to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Clear">
            <summary>Removes all items from the image source.</summary>
            <remarks>This does not modify the original ImageSource provided in the IndirectionImageSource constructor.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Dispose">
            <summary>Free up resources used by this ImageSource</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert">
            <summary>Adds or inserts one or more images into the IndirectionImageSource.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,System.String,System.Int32)">
            <summary>Adds or inserts one or more images from a file.</summary>
            <param name="index">The index where the image should be inserted or -1 to add the image to the end of the collection.</param>
            <param name="fileName">The full path and filename of the image to insert.</param>
            <param name="frameIndex">The frame index to insert or -1 to insert all pages of a multipage document.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.Insert(System.Int32,System.IO.Stream,System.Int32)">
            <summary>Adds or inserts one or more images from a stream.</summary>
            <param name="index">The index where the image should be inserted or -1 to add the image to the end of the collection.</param>
            <param name="stream">    A stream containing the image(s). This stream must be     seekable.</param>
            <param name="frameIndex">The frame index to insert or -1 to insert all pages of a multipage document.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.OnNodeIndexSet(Atalasoft.Imaging.ImageSourceNode)">
            <summary>Called when the index of a node is modified.</summary>
            <param name="node">The node being modified.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.OnReleasing(Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs)">
            <summary>    Called when      Release was performed on an ImageSourceNode.</summary>
            <remarks>This method will raise the  Releasing event.</remarks>
            <param name="e">    A      ReleasingImageSourceNodeEventArgs containing the node that     was released.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.ReAcquire">
            <summary>    Acquire an AtalaImage for use which has been previously     acquired.</summary>
            <remarks>These versions of Acquire are used to put an additional request to hold onto an AtalaImage.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.ReAcquire(System.Int32)">
            <summary>Acquire a previous image by index.</summary>
            <returns>The acquired image or null (Nothing in VB) if the image was not previously acquired.</returns>
            <param name="index">The index of the image to re-acquire.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.RemoveAt(System.Int32)">
            <summary>Removes an image from the IndirectionImageSource at the specified index.</summary>
            <param name="index">The index of the item to remove.</param>
        </member>
        <member name="M:Atalasoft.Imaging.IndirectionImageSource.ReorderIndex(System.Int32,System.Int32)">
            <summary>Moves one item to a different position within the IndirectionImageSource.</summary>
            <param name="currentIndex">The index of the item to move.</param>
            <param name="newIndex">The new index for the item.</param>
        </member>
        <member name="P:Atalasoft.Imaging.IndirectionImageSource.RetainInMemory">
            <summary>Gets or sets a value indicating whether the images should remain in memory once read.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.InternalErrorException">
            <summary>This exception is for generic errors within the DotImage codebase.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor">
            <summary>Creates a new instance of InternalErrorException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor">
            <summary>Creates a new instance of InternalErrorException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.String)">
            <summary>Creates a new instance of InternalErrorException specifying the error message.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternalErrorException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of InternalErrorException specifying the error message and inner exception.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.InternetConnectException">
            <summary>This exception is thrown when there is an error opening an internet connection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor">
            <summary>Creates an InternetConnectException object.Creates a new instance of InternetConnectException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.String)">
            <summary>Creates a new instance of InternetConnectException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetConnectException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of InternetConnectException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Atalasoft.Imaging.InternetInvalidPasswordException">
            <summary>This exception is thrown when an invalid password was detected while attempting to connect to an HTTP or FTP site to download an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor">
            <summary>Creates an InternetInvalidPasswordException object.Creates a new instance of InternetInvalidPasswordException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.String)">
            <summary>Creates a new instance of InternetInvalidPasswordException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.InternetInvalidPasswordException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of InternetInvalidPasswordException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for the error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefCollectionBase">
            <summary>    A base abstract     (MustInherit in Visual Basic) collection class     intended for strongly typed collections containing unmanaged     data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.Clear">
            <summary>Clears the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>Copies the collection items into an array.</summary>
            <param name="array">The array that will hold the collection items.</param>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefCollectionBase.GetEnumerator">
            <summary>Returns a reference to an IEnumerator interface, whose purpose is to grant access to an enumeration's items.</summary>
            <remarks>When GetEnumerator is called, it constructs an enumerator object containing the current version number in the collection and a reference to the collection's items. Every time the enumerator is accessed, it compares the version of the enumerator with the version of the collection. If the versions do not match, it means that the collection has changed; an exception then occurs.</remarks>
            <returns>A reference to an IEnumerator interface.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.Count">
            <summary>Gets the number of items in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.InnerList">
            <summary>Gets the ArrayList stored within the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.IsSynchronized">
            <summary>    Gets a value indicating whether access to the collection     is synchronized (thread-safe).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefCollectionBase.SyncRoot">
            <summary>    Gets an object that can be used to synchronize access to     the collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase">
            <summary>    A base abstract (MustInherit in Visual Basic) collection     class intended for strongly typed read-only collections     containing unmanaged data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.CopyTo(System.Array,System.Int32)">
            <summary>Copies the collection items into an array.</summary>
            <param name="array">The array that will hold the collection items.</param>
        </member>
        <member name="M:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.GetEnumerator">
            <summary>Returns a reference to an IEnumerator interface, whose purpose is to grant access to an enumeration's items.</summary>
            <returns>A reference to an IEnumerator interface.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.Count">
            <summary>The number of items in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.InnerList">
            <summary>Gets the ArrayList stored within the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.IsSynchronized">
            <summary>    Gets a value indicating whether access to the collection     is synchronized (thread-safe).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.MarshalByRefReadOnlyCollectionBase.SyncRoot">
            <summary>    Gets an object that can be used to synchronize access to     the collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.OperationCancelledException">
            <summary>This class is used to cancel running operations.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor">
            <summary>Creates an OperationCancelledException object.Creates a new instance of OperationCancelledException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.String)">
            <summary>Creates a new instance of OperationCancelledException specifying the exception message.</summary>
            <param name="message">A text description of the exception.</param>
        </member>
        <member name="M:Atalasoft.Imaging.OperationCancelledException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of OperationCancelledException specifying an exception message and the inner exception.</summary>
            <param name="message">A text description of the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Palette">
            <summary>The palette contains color information that is applied to colormapped images. Use this object to modify and read the palette colors.</summary>
            <remarks>A palette consists of 256 colors, each index is a byte value of R, G, B, and sometimes Alpha values.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor">
            <summary>Initializes a new instance of the Palette class.Create a Palette object.Initializes a new instance of the Palette class with a default of 256 colors.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Drawing.Color[])">
            <summary>Creates a new instance of Palette specifying the colors of the palette.</summary>
            <param name="colors">An array of System.Drawing.Color objects used to fill the palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(System.Int32)">
            <summary>Initialize a new instance of a Palette specifying the number of colors to start with.</summary>
            <param name="colors">The number of colors in the palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.#ctor(Atalasoft.Imaging.PaletteType)">
            <summary>Initialize a new instance of a Palette class specifying the PaletteType.</summary>
            <param name="palType">The type of palette to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Clone">
            <summary>Returns a deep copy of this Palette.</summary>
            <returns>A deep copy of this Palette.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.Dispose">
            <summary>Cleans up unmanaged resources. Call Dispose when completed using the Palette object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex">
            <summary>Returns the palette index that best matches a specified color.Returns the palette index containing a color that most closely matches a specific color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color)">
            <summary>Returns the palette index that best matches a specified color.</summary>
            <param name="color">The color to look up in the palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetClosestPaletteIndex(System.Drawing.Color,System.Boolean@)">
            <summary>Returns the palette index that best matches a specified color, returning a value if there was an exact match.</summary>
            <param name="color">The color to look up in the palette.</param>
            <param name="exact">This value is set to true if there is an exact match, otherwise false.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetEntry(System.Int32)">
            <summary>Returns the color of a particular index entry in the palette.</summary>
            <returns>The color of the palette entry.</returns>
            <remarks>See SetEntry to change the color of a palette entry.</remarks>
            <param name="index">The palette index (0 - 255).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Provide information for object serialization.</summary>
            <param name="info">The object that will hold the serialization information.</param>
            <param name="context">The context into which this object is being streamed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette">
            <summary>Returns the system palette of an 8-bit device.Returns the system palette.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette">
            <summary>Returns the system palette of the current display if it's an 8-bit device, null (Nothing in Visual Basic) if the device is greater then 8 bits.</summary>
            <returns>A Palette containing the system palette colors.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.GetSystemPalette(System.IntPtr)">
            <summary>Returns the system palette of the specified device if it's 8-bit, null (Nothing in Visual Basic) if the device is greater then 8 bits.</summary>
            <returns>A Palette containing the system palette colors.</returns>
            <param name="device">A handle to the device context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.HasAlpha">
            <summary>Returns a value indicating if the palette contains alpha information.</summary>
            <returns>A value indicating if the palette contains alpha information.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.IsGray">
            <summary>Gets or sets a value indicating if the palette is grayscale.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetEntry(System.Int32,System.Drawing.Color)">
            <summary>Sets the color of a particular index entry in the palette.</summary>
            <remarks>See GetEntry to retreive the color of the palette entry.</remarks>
            <param name="index">The palette index (0 - 255).</param>
            <param name="newColor">The color to set the Palette index to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.SetPalette(Atalasoft.Imaging.PaletteType)">
            <summary>Change the palette entries to a standard PaletteType.</summary>
            <param name="palType">The specified PaletteType.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Palette.ToArray">
            <summary>Copies the palette data into an array of System.Drawing.Color objects.</summary>
            <returns>An array of Color objects.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Palette.Colors">
            <summary>Returns the number of colors in the palette.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChangeEventArgs">
            <summary>Provides data for the PixelFormatChange event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs.#ctor">
            <summary>    Initializes a new instance of the     PixelFormatChangeEventArgs class.Creates a     PixelFormatChangeEventArgs object.     Initializes a new instance of the     PixelFormatChangeEventArgs class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChangeEventArgs.#ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat)">
            <summary>    Initializes a new instance of the     PixelFormatChangeEventArgs class specifying the current and new     PixelFormat.</summary>
            <param name="currentPixelFormat">The current PixelFormat.</param>
            <param name="newPixelFormat">The new PixelFormat.</param>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.Cancel">
            <summary>    When setting this property to true, the current operation     will be cancelled.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.CurrentPixelFormat">
            <summary>Gets the PixelFormat of the current image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.PixelFormatChangeEventArgs.NewPixelFormat">
            <summary>Gets the PixelFormat to change the image to.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChanger">
            <summary>This is an abstract class that defines how an image should be changed from one pixel format to another.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatChanger.ChangePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Allocate a new AtalaImage based on the sourceImage, using the requested pixel format.</summary>
            <returns>A new AtalaImage of the requested PixelFormat.</returns>
            <remarks>If targetPixelFormat is the same as the PixelFormat of sourceImage, this method will throw an IncompatiblePixelFormat exception.</remarks>
            <param name="sourceImage">The image to be converted to a new format.</param>
            <param name="targetPixelFormat">The requested PixelFormat</param>
            <param name="destProfile">An optional color profile to use for the conversion.</param>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatUtilities">
            <summary>PixelFormatUtilities is a toolbox of utilities for manipulating and asking questions about PixelFormat enumerated values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.BitsPerChannel(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns the number of bits in each channel of this image.</summary>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.BitsPerPixel(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns the number of bits used per pixel in total.</summary>
            <remarks>Note than some pixel formats do not use all the bits for image data. For example, Pixel32bppBgr only uses 24 bits for image data, but BitsPerPixel will return 32 for this format.</remarks>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.ChannelsPerPixel(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns the number of channels in this pixel format</summary>
            <remarks>Note that for pixel formats with colormaps, this method will always return 1.</remarks>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.HasAlpha(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns true if the pixel format contains an alpha channel</summary>
            <remarks>This will return false for color mapped pixel formats since it is impossible to know from the pixel format value alone if the colors have any alpha values.</remarks>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.ImageSize(Atalasoft.Imaging.PixelFormat,System.Int32,System.Int32)">
            <summary>Given a pixel format, ImageSize will return the number of bytes necessary to represent that image.</summary>
            <param name="pf">An input PixelFormat</param>
            <param name="w">The width of the image</param>
            <param name="h">The height of the image</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsColor(Atalasoft.Imaging.PixelFormat)">
            <summary>Indicates whether or not a pixel format represents a color image</summary>
            <returns>True if the pixel format is a color format, false if it is gray or colormapped.</returns>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsColorMapped(Atalasoft.Imaging.PixelFormat)">
            <summary>Indicated whether or not the pixel format represents a color mapped format</summary>
            <returns>True if the pixel format will use a color map, false otherwise.</returns>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsContinuous(Atalasoft.Imaging.PixelFormat)">
            <summary>Indicates whether or not the pixel format represents a continuous pixel format</summary>
            <returns>True if the pixel format is continuous, false otherwise.</returns>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsGray(Atalasoft.Imaging.PixelFormat)">
            <summary>Indicates whether or not the pixel format represents a gray image.</summary>
            <returns>Returns true if the image format is gray, false otherwise.</returns>
            <remarks>1 bit per pixel images are not considered gray since it is impossible to tell without a color map.</remarks>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsMultiByte(Atalasoft.Imaging.PixelFormat)">
            <summary>Indicates whether or not any channel in this image requires multiple bytes.</summary>
            <returns>Returns true if a channels needs multiple bytes, false otherwise.</returns>
            <remarks>To find out how many bytes a channel requires, use BitsPerChannel(pf)/8</remarks>
            <param name="pf">An input PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsValid">
            <summary>Indicates whether or not a value or a .NET PixelFormat is valid as an Atalasoft.Image.PixelFormat type</summary>
            <remarks>Returns true if the value is valid, false otherwise.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsValid(System.Int32)">
            <returns>Returns true if the value is valid, false otherwise.</returns>
            <param name="ipf">An integer representing a pixel format</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.IsValid(System.Drawing.Imaging.PixelFormat)">
            <returns>Returns true if the value is valid, false otherwise.</returns>
            <param name="bpf">A .NET PixelFormat type</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.RowStride">
            <summary>Calculates the width in bytes of a row in an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.RowStride(Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary>Calculates the width in bytes of a row in an image.</summary>
            <param name="pf">An input PixelFormat</param>
            <param name="w">The width of an image in pixels</param>
        </member>
        <member name="M:Atalasoft.Imaging.PixelFormatUtilities.RowStride(System.Int32,System.Int32)">
            <summary>Calculates the width in bytes of a row in an image.</summary>
            <param name="bitsPerPixel">The number of bits per pixel</param>
            <param name="w">The width of an image in pixels</param>
        </member>
        <member name="T:Atalasoft.Imaging.PixelMemoryException">
            <summary>This exception is thrown when problems occur with PixelMemory classes.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor">
            <summary>Creates a new instance of PixelMemoryException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor">
            <summary>Creates a new instance of PixelMemoryException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.String)">
            <summary>Creates a new instance of PixelMemoryException specifying the error message.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.PixelMemoryException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of PixelMemoryException specifying the error message and inner exception.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueue">
            <summary>Holds a collection of ProcessQueuedItems that are awaiting asynchronous processing.</summary>
            <remarks>When the Workspace is runing in asynchronous mode all image processing calls through the Workspace.ProcessImage method or the read and save methods will put the process into this queue. The purpose is to process images sequentially and prevent threading issues. Each workspace object can process only one image at a time, but as long as Workspace.IsAsynchronous is true, the processing will be performed in a separate thread.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.#ctor">
            <summary>Create a instance of the ProcessQueue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.CopyTo">
            <summary>Copies items from the collection to an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.CopyTo(Atalasoft.Imaging.ProcessQueuedItem[],System.Int32)">
            <summary>Copies ProcessQueuedItems from this collection to an array.</summary>
            <param name="queuedItems">The array to copy the items into.</param>
            <param name="index">The starting index in the array where the items will be copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Dequeue">
            <summary>Remove the next item from the queue.</summary>
            <returns>The queued item that was removed.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue">
            <summary>Add a new item into the process queue. Adds a new item to the queue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Enqueue(Atalasoft.Imaging.ProcessQueuedItem)">
            <summary>Add a new item into the process queue.</summary>
            <param name="item">The ProcessQueuedItem containing the thread information to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessQueue.Peek">
            <summary>Return the next item in the process queue without removing it.</summary>
            <returns>The next item in the process queue.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueue.CurrentItem">
            <summary>Gets the ProcessQueuedItem that is currently being processed.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessQueuedItem">
            <summary>    This class contains information regarding the image     processing function that is to be run when the ProcessQueue is     ready.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessingClass">
            <summary>The instance of a class that will be processed in a new thread.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.ProcessUndo">
            <summary>Indicates if an undo should be created before the thread begins.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessQueuedItem.Thread">
            <summary>Gets or sets the thread that the process is running in.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProcessUndo">
            <summary>Contains information about an undo level that will be used in the ProcessQueue.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo.#ctor">
            <summary>Initialize a new instance of ProcessUndo.Initialize a new instance of ProcessUndo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProcessUndo.#ctor(System.String,System.Boolean)">
            <summary>Initialize a new instance of ProcessUndo specifying the Undo Description and if the image should be copied.</summary>
            <param name="undoDescription">The undo description.</param>
            <param name="copyCurrent">Specifies if the image should be copied before undoing.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.CopyCurrent">
            <summary>If true, the image will be copied before placing into the undo.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProcessUndo.UndoDescription">
            <summary>The description of the undo level.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ProgressEventArgs">
            <summary>Provides data for the Progress event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor">
            <summary>Creates a ProgressEventArgs object.Creates a new instance of ProgressEventArgs.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of ProgressEventArgs specifying the current and total progress values.</summary>
            <param name="current">The current progress value.</param>
            <param name="total">The total progress value at 100 completion.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ProgressEventArgs.#ctor(System.Int32,System.Int32,System.String)">
            <summary>Creates a new instance of ProgressEventArgs specifying the current and total values, and the name of the method.</summary>
            <param name="current">The current progress value.</param>
            <param name="total">The total progress value at 100 completion.</param>
            <param name="methodName">The name of the method raising the progress event.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Cancel">
            <summary>When set to true, allows the current image processing function to be cancelled.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Current">
            <summary>Gets the current value of the progress operation.</summary>
            <remarks>When processing an image, this value is usually the current row of the image in pixels. When downloading a file via HTTP, it's the number of bytes downloaded.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.MethodName">
            <summary>The name of the method calling the progress event.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ProgressEventArgs.Total">
            <summary>Gets the total number of units for this operation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.RandomAccessImageSource">
            <summary>This is an abstract class which is used to define ImageSource objects that can be accessed in any order. Summary description for RandomAccessImageSource.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.RandomAccessImageSource.OnNodeIndexSet(Atalasoft.Imaging.ImageSourceNode)">
            <summary>This method is called from the RandomAccessImageSource indexer after it has set the ImageSourceNode.Index value.</summary>
            <remarks>Override this method to customize the index value for the ImageSourceNode used by the base ImageSource class when reloading.</remarks>
            <param name="node">The node returned by  LowLevelAcquire after its Index has been changed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.RandomAccessImageSource.Count">
            <summary>Returns the total number of images in the image source.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.RandomAccessImageSource.Item(System.Int32)">
            <summary>Acquires the image at location i within the image source and returns it.</summary>
            <remarks>Note that this operation performs an Acquire on the image. It is still the responsibility of the caller to perform a Release on the image when finished with it.</remarks>
            <param name="i">The index of the image to be acquired.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs">
            <summary>This class is passed in the  Releasing event to provide the ImageSourceNode that has been released.</summary>
            <remarks>If the ImageSourceNode was acquired multiple times, it may still require additional calls to the Release method before it is fully released.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs.#ctor(Atalasoft.Imaging.ImageSourceNode)">
            <summary>Creates a new instance of ReleasingImageSourceNodeEventArgs with the  ImageSourceNode that has been released.</summary>
            <param name="node">The ImageSourceNode that has been released.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ReleasingImageSourceNodeEventArgs.Node">
            <summary>Gets the ImageSourceNode that has been released.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ResourceReleaser`1">
            <summary>This is a tool that can be used for managing the automatic releasing of resources via the using statement.</summary>
            <remarks>See PixelMemoryLocker for a concrete example of this class.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ResourceReleaser`1.#ctor(T,System.Action`1{T})">
            <summary>Constructs a new ResourceReleaser object with the value and action given.</summary>
            <param name="val">Val is an object that should be managed by the ResourceReleaser</param>
            <param name="action">Action is an action that will be executed upon disposal of the ResourceReleaser. Action will be passed val when it is executed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ResourceReleaser`1.Dispose">
            <summary>Disposes the ResourceReleaser.</summary>
            <remarks>Upon disposal, the ResourceReleaser will invoke the original action passed to it in the construction, passing in the original val from the constructor. ResourceReleaser does not check val for null. That is up to the action.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.SerializationHelper">
            <summary>SerializationHelper is a set of static methods to help in the process of deserialization of an object graph.</summary>
            <remarks>In the current .NET model, one must ask for a field within a serialization object acting under the assumption that it will be there. If the field isn't there, an Exception is thrown. An object is deserializable if and only if all fields of an object have been serialized. In the dotImage model, an object is constructed with default values which are then replaced by the information in the SerializationInfo object. In dotImage this makes more sense since several objects' underlying data is optional or mutually exclusive. To retrieve a scalar, pass GetValue() the SerializationInfo object, the name of the field, and a reference to the variable that will hold the value. GetValue() will return true if it performed an assignment to the variable. To retrieve a non-scalar type, pass GetValue() the SerializationInfo object, the name of the field and its expected Type. GetValue will return the object if it found it, null otherwise.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue">
            <summary>Get a value from a SerializationInfo object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Boolean@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Byte@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Char@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.DateTime@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Decimal@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Double@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">             Summary                   The place to store the retrieved         value.     </param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int16@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int32@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Int64@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Single@)">
            <summary>Get a value from a SerializationInfo object.</summary>
            <returns>true if the value was found, false otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="val">The place to store the retrieved value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.SerializationHelper.GetValue(System.Runtime.Serialization.SerializationInfo,System.String,System.Type)">
            <summary>Get an object from a SerializationInfo object.</summary>
            <returns>An object of the Type specified if found, null otherwise.</returns>
            <param name="info">The object in which to look for the value.</param>
            <param name="name">The name of the value.</param>
            <param name="type">The expected type of the object.</param>
        </member>
        <member name="T:Atalasoft.Imaging.UndoCollection">
            <summary>    The UndoCollection class is used to     mange operations that need undo/redo functinality. The     collection contains properties to specify the number of allowed     operations to undo or redo.</summary>
            <remarks>    NOTE: The     UndoCollection class is intended for use in     the Workspace     class only, and should not be used on its own. The     UndoCollection relies on the     Workspace's      ImageCollection in order to save the current     images.          The undo collection may be used to create an Undo/Redo     menu in your project. The Add method should be     called at the point you want to save as the 'undo point' (for     examble, BEFORE an      ImageCommand is applied). To undo or redo an operation,     simply call the      Undo or      Redo methods. You can access the      Description property to determine what the next undo or     redo will accomplish. The following code example shows how this     is done.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Add(System.String,System.Boolean)">
            <summary>Add a new undo level to the undo collection specifying the description and if the Image is copied.</summary>
            <param name="undoDescription">The textual description of this undo level.</param>
            <param name="copyCurrent">If true, the image will be copied into the undo collection.</param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Clear">
            <summary>Clears the undo/redo collection items.</summary>
            <returns>Clears the collection.</returns>
            <remarks>Use this method to release all undo and redo items.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo">
            <summary>Copies the UndoLevels into an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.CopyTo(Atalasoft.Imaging.UndoLevel[],System.Int32)">
            <summary>Copies the UndoLevels into an array.</summary>
            <param name="undos">An array of UndoLevel where the collection items will be stored.</param>
            <param name="index">An index in the array where items will be stored.</param>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Dispose">
            <summary>Clean up unmanaged resources by disposing each AtalaImage in the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Redo">
            <summary>The Redo method redo's the most recent udno in this UndoCollection.</summary>
            <remarks>If there are no redo's to be undone (NumRedos &lt; 1), then this method does nothing.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.UndoCollection.Undo">
            <summary>The Undo method undo's the most recently added item to this UndoCollection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Item(System.Int32)">
            <summary>Gets the undo item.</summary>
            <param name="index">Zero based Index of the undo item.</param>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.Levels">
            <summary>Gets or set the number of Undo levels in this collection.</summary>
            <remarks>    The Levels property limits the number of     undo's or redo's that are saved. For example, to limit the     Workspace to only be able to undo a single operation, set the     Levels property to 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumRedos">
            <summary>Gets the current number of redos in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoCollection.NumUndos">
            <summary>Gets the current number of undos in the collection.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.GetCurrentImageCollection">
            <summary>This event is fired to retrieve the current image collection.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.UndoCollection.NewImageCollection">
            <summary>This event is fired to set the current image collection.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.UndoLevel">
            <summary>The UndoLevel class is used to store a single operation, in an UndoCollection, that can be un-done or re-done. Every instance of this class holds an ImageCollection which are the set of images that will be restored to 'undo' the operation that this UndoLevel represents.</summary>
            <remarks>The UndoLevel class is not usualy accessed directly, but is used by the UndoCollection to keep track of operations.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel.#ctor">
            <summary>    Creates a new instance of UndoLevel.     Creates a new instance of     UndoLevel.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.UndoLevel.#ctor(Atalasoft.Imaging.ImageCollection,System.String)">
            <summary>    Creates a new instance of UndoLevel     specifying the ImageCollection     and undo      Description.</summary>
            <param name="images">The ImageCollection that this undo level will contain.</param>
            <param name="description">The description of this undo level.</param>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Description">
            <summary>Gets the undo description associated with this UndoLevel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.UndoLevel.Images">
            <summary>Gets the undo image collection associated with this UndoLevel.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Workspace">
            <summary>    The workspace object is the container     that is used to manage changes to images and provide an     interface to open, save, and manipulate images either     synchronously or asynchronously.</summary>
            <remarks>    The Workspace object, part of the     Atalasoft.Imaging namespace, provides a     container that allows for intuitive image processing and     management of AtalaImage and ImageCollection     objects. The Workspace can be used to manage     changes to AtalaImage objects and access     methods to open, save, and manipulate images.     Many image processing functions may create new     AtalaImage objects. The     Workspace manages the creation of these     objects by keeping a single current image and providing events     when the image changes. The Workspace also     disposes of old images when they are no longer needed. You can     access the current AtalaImage with the     Image property of the     Workspace object.     The Workspace is designed to operate     either synchronously or asynchronously for multi-threading     operations. This behavior is set by the Asynchronous     property.     See the WinForm's WorkspaceViewer and WebForm's     WorkspaceViewer for a Workspace object with a user interface     for displaying images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand">
            <summary>Applies an ImageCommand to the current image in order to process it.</summary>
            <remarks>If Asynchronous is true, the command will be processed in a background thread.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <summary>Applies an ImageCommand to the current image in order to process it.</summary>
            <param name="command">The Command to apply. Any object that inherits ImageCommand can be passed into this method.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.ApplyCommand(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.String)">
            <summary>Creates an undo level, then applies an ImageCommand to the current image in order to process it.</summary>
            <param name="command">The Command to apply. Any object that inherits ImageCommand can be passed into this method.</param>
            <param name="undoDescription">A description of the undo level that will be added before processing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Dispose">
            <summary>Cleans up all resources held by this Workspace including all images in the ImageCollection and undos in the UndoCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnDisposeImage(Atalasoft.Imaging.ImageCancelEventArgs)">
            <summary>Invoked when pixel data in the current image changes without setting a new image. Fires the  DisposeImage event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnImageStreamCompleted(Atalasoft.Imaging.ImageStreamEventArgs)">
            <summary>Invoked after an image has been read or saved signifying that the Stream which was passed in can be closed. Fires the  ImageStreamCompleted event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnNewImage(Atalasoft.Imaging.ImageEventArgs)">
            <summary>Invoked when the Image property of the Workspace is set to a new image, a command has been applied, which results in a new image, or a new image has been loaded into memory. Fires the NewImage event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnProcessCompleted(Atalasoft.Imaging.ImageEventArgs)">
            <summary>Invoked when an asynchronous process has completed. Fires the  ProcessCompleted event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.OnProcessError(Atalasoft.Imaging.ExceptionEventArgs)">
            <summary>Invoked when an error occurs in a separate thread when being processed asynchronously. Fires the  ProcessError event.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open">
            <summary>Decodes an image from a file or stream and sets it to the current image.</summary>
            <remarks>Opening an image with this method when the Workspace is in Asynchronous mode will add this operation to the ProcessQueue and open Asynchronously.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String,System.Int32)">
            <summary>Decodes an image from a file specifying the frame index of a multipaged file, and sets it to the current image.</summary>
            <remarks>A URL formatted string can be passed to download a file. If the address is pointing to an FTP site, you may need to include the username and password in the URL to allow access to the file. The format for this would be "ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.String)">
            <summary>Decodes an image from a file and sets it to the current image.</summary>
            <remarks>A URL formatted string can be passed to download a file. If the address is pointing to an FTP site, you may need to include the username and password in the URL to allow access to the file. The format for this would be "ftp://username:password@ftp.mysite.com".</remarks>
            <param name="fileName">The path of the file to open.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream,System.Int32)">
            <summary>Decodes an image from a stream specifying the frame index of a multipaged file, and sets it to the current image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to load.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Open(System.IO.Stream)">
            <summary>Decodes an image from a stream and sets it to the current image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save">
            <summary>Writes the current AtalaImage or ImageCollection to a file or stream.</summary>
            <remarks>Saving an image with this method when the Workspace is in Asynchronous mode will add this operation to the ProcessQueue and save Asynchronously.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary>Writes the current AtalaImage or ImageCollection to a file specifying the ImageEncoder to use to encode the image and the image index in the collection to save.</summary>
            <remarks>This method can be used to save an image to an FTP server. If the fileName is pointing to an FTP server, you may need to include the username and password in the URL to allow the file to be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save the current image to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
            <param name="frameIndex">The index in the ImageCollection to save.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Writes the current AtalaImage or ImageCollection to a file specifying the ImageEncoder to use to encode the image.</summary>
            <remarks>This method can be used to save an image to an FTP server. If the fileName is pointing to an FTP server, you may need to include the username and password in the URL to allow the file to be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save the current image to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.String,Atalasoft.Imaging.Codec.ImageType)">
            <summary>Writes the current AtalaImage or ImageCollection to a file specifying the ImageType to use to encode the image.</summary>
            <remarks>This method can be used to save an image to an FTP server. If the fileName is pointing to an FTP server, you may need to include the username and password in the URL to allow the file to be saved. The format for this would be "ftp://username:password@ftp.mysite.com/folder/newImage.png".</remarks>
            <param name="fileName">The filename to save the current image to.</param>
            <param name="imageType">The image type to save this image as.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder)">
            <summary>Writes the current AtalaImage or ImageCollection to a stream specifying the ImageEncoder to use to encode the image.</summary>
            <param name="stream">A stream containing the file which the current image will be encoded to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Workspace.Save(System.IO.Stream,Atalasoft.Imaging.Codec.ImageEncoder,System.Int32)">
            <summary>Writes the current AtalaImage or ImageCollection to a stream specifying the ImageEncoder to use to encode the image and the image index in the collection to save.</summary>
            <param name="stream">A stream containing the file which the current image will be encoded to.</param>
            <param name="encoder">The ImageEncoder which will be used to encode the image.</param>
            <param name="frameIndex">The index in the ImageCollection to save.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Asynchronous">
            <summary>Gets or sets a value indicating if method calls through this Workspace object are processed asynchronously in a background thread.</summary>
            <remarks>    By default, this value is false. When     this value is true the workspace is operating     in asynchronous mode and the ProcessQueue is used to queue each     command that is applied to the image. If the AtalaImage is     accessed directly, unexpected threading issues might     occur.     See Asynchronous Image Processing for more information on     asynchronous programming in dotImage.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.AutoDispose">
            <summary>Gets or sets a value indicating if the Workspace should dispose all images it contains when finalized.</summary>
            <remarks>This value is true by default. Setting this value to false is useful when using an Images from another location. This only prevents images from being disposed when the associated Workspace object is disposed or finalized. To prevent images from being disposed when processing, handle the  DisposeImage event and set the cancel property in the event args to true. Also consider using  Images.Replace instead of the Image property when setting a new image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Image">
            <summary>Gets or sets the current AtalaImage that is active in this Workspace.</summary>
            <remarks>    When the image that is being set already exists in the     ImageCollection, then that image is set as the current, and the          ChangedImage event fires. When the image being set does not     exist in the collection, the current image is replaced with the     new image, and the current image is either added to the          UndoCollection, or disposed.     To replace the current image, without disposing it, or     placing it into the UndoCollection, use the          Replace method in the ImageCollection     by calling myWorkspace.Images.Replace(newImage)     instead of myWorkspace.Image = newImage.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Images">
            <summary>Gets the ImageCollection of this Workspace object.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Queue">
            <summary>Gets the ProcessQueue containing queued items that this Workspace object is currently processing.</summary>
            <remarks>The ProcessQueue only contains items if the Workspace is running in Asynchronous mode.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Workspace.Undos">
            <summary>Gets the UndoCollection object containing the undo history of this Workspace.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.DisposeImage">
            <summary>Fired when an image in the ImageCollection or UndoCollection is disposed.</summary>
            <remarks>This even should be handled if images are being shared. If this event contains an image that shouldn't be disposed, set the Cancel property to true.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ImageChanged">
            <summary>Occurs when the current image in the ImageCollection changes.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ImageStreamCompleted">
            <summary>Fires after an image has been read or saved signifying that the Stream which was passed in can be closed.</summary>
            <remarks>This event only fires if the stream was created outside dotImage.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessCompleted">
            <summary>Fires when an asynchronous process has completed.</summary>
            <remarks>This is fired when processing commands, opening, or saving images.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.ProcessError">
            <summary>Fires when an error occurs in a separate thread when being processed asynchronously.</summary>
            <remarks>This event can be handled to react to an exception when it occurs in another thread. Typically a message box with exception details is displayed to the user. When this event is not handled, and the Asynchronous property is true, errors can go un-noticed, and without any error messages displayed.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Workspace.Progress">
            <summary>Fires while an image is being processed.</summary>
            <remarks>Handle this event to show a progress bar or to cancel an operation while in progress. Some operations will fire this event from 0 - 100 multiple times.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ChangedImageEventHandler">
            <summary>This EventHandler is used to update AtalaImage objects in various classes.</summary>
            <param name="sender">The object in which the exception occurred.</param>
            <param name="e">The ChangedImageEventArgs containing information about the images.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ExceptionEventHandler">
            <summary>This EventHandler is used to pass along an exception during an image processing operation.</summary>
            <param name="sender">The object in which the exception occurred.</param>
            <param name="e">An ExceptionEventArgs object containing information about the exception.</param>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSource+FileEventHandler">
            <summary>This event is used for tracking when a file or a frame within a file has been loaded.</summary>
            <param name="sender">The sender of this event.</param>
            <param name="e">Information about the files and frame being loaded.</param>
        </member>
        <member name="T:Atalasoft.Imaging.FileSystemImageSource+FileFilterDelegate">
            <summary>The FileFilterDelegate is used within the FileSystemImageSource to provide a means of filtering out files or pages within files</summary>
            <returns>Returns true if the file is to be included, false otherwise.</returns>
            <param name="pathName">The full path to the file to be loaded</param>
            <param name="frameIndex">The current frame being considered</param>
            <param name="frameCount">The total number of frames within this file</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageCancelEventHandler">
            <summary>Handles canceling operations.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">An ImageCancelEventArgs object for this event.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageEventHandler">
            <summary>Event Handler for events requiring the image information.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">An ImageEventArgs object for this event.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageFileIOEventHandler">
            <summary>Event Handler requiring the a Stream object.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">an ImageStreamEventArgs object for this event.</param>
        </member>
        <member name="T:Atalasoft.Imaging.PixelFormatChangeEventHandler">
            <summary>Handles operations that require the PixelFormat of an image to change.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">The PixelFormatChangeEventArgs for this event.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ProgressEventHandler">
            <summary>Handles the progress event for operations.</summary>
            <remarks>The progress callback can be handled to show progress while an image is being loaded, saved, or processed. Current and Total usually signifies the image row in pixels. When downloading a file, Current and Total represents the number of bytes. It can also be used to cancel the current action. When handling a progress event, the percentage can be calculated by dividing Current by Total. Some actions will cause multiple progresses (0 - 100) to be called.</remarks>
            <param name="sender">The object raising the event.</param>
            <param name="e">The ProgressEventArgs for this event.</param>
        </member>
        <member name="N:Atalasoft.Imaging.Codec">
            <summary>Contains classes that deal with decoding and encoding images of various formats.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IAppendable">
            <summary>    An interface that an ImageEncoder can implement when it     supports appending an image to the end of an existing     file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.IAppendable.Append">
            <summary>Gets or sets a value indicating if the image will be appended to the end of a file.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IRegionReadable">
            <summary>This interface is applied to ImageDecoders to enable them to read a specified region of the image without decoding the entire image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IRegionReadable.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes the specified region and returns an AtalaImage object representing the image data.</summary>
            <param name="stream">The encoded image stream.</param>
            <param name="region">The rectangular image to read.</param>
            <param name="frameIndex">The zero based frame index if the image supports multiple frames.</param>
            <param name="progress">Progress Delegate</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.IScaledDecoder">
            <summary>This interface is applied to ImageDecoders that have the ability to decode an image stream to a specified scale.</summary>
            <remarks>Decoders that apply this interface are capable of reading extremely large images without loading the full size image into memory.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IScaledDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
            <summary>If the codec can efficiently generate a scaled image without actually resampling, this will return the closest scale given an input scale factor.</summary>
            <remarks>This is most useful for images that have multiple resolutions stored within. JPEG's can quickly generate a scaled image 1/2, 1/4, 1/8, and 1/16 the original size and thus will return one of these sizes.</remarks>
            <returns>The closest stored scale greater than or equal to the requested scale.</returns>
            <param name="stream">The encoded image stream</param>
            <param name="frameIndex">The zero based frame index if the source image is multiframed</param>
            <param name="requestedScale">The scale to request</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.IScaledDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes an image to a specified scale.</summary>
            <param name="stream">The encoded image</param>
            <param name="frameIndex">The zero based frame index if the source image is multiframed</param>
            <param name="scaleFactor">The scale factor to request (ie. 0.5 is 1/2 scale, 1 is full scale)</param>
            <param name="progress">The progress callback</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpCompression">
            <summary>Contains the various compression types available for Bmp images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.None">
            <summary>No compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.BmpCompression.Rle">
            <summary>Run Length Compression, only valid for 8-bit image saves.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ErrorLevel">
            <summary>This enumeration is used to denote the severity of an error in a codec.</summary>
            <remarks>This enumeration is used in the  CodecErrorEventArgs class in order to denote the severity of an error.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.None">
            <summary>This value denotes that there is no error present. While it is not presently used, it is included for the sake of completeness.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Warning">
            <summary>This value denotes that a problem of very mild severity has been detected in a codec.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Error">
            <summary>This value denotes that a problem of moderate to high severity has been detected in a codec.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.ErrorLevel.Fatal">
            <summary>This value denotes that there a severe error has occurred that could be fatal to the CLR or the current application. This severity should never be used in released software.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrameDisposal">
            <summary>The frame disposal method to use for animated GIF images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.None">
            <summary>No action is taken.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.LeaveImage">
            <summary>Leaves the image in place when the next frame is drawn.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestorePrevious">
            <summary>Restores the previous frame.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.GifFrameDisposal.RestoreBackgroundColor">
            <summary>Restores the area occupied by the image with the animation background color.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegDctMode">
            <summary>The DCT compression used when saving a JPEG image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Default">
            <summary>The default compression; usually Slow.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Slow">
            <summary>Slow but accurate integer algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.Fast">
            <summary>Faster, less accurate integer method.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegDctMode.FloatingPoint">
            <summary>Floating-point method.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegScaleFactor">
            <summary>The scaling factor to use when reading a Jpeg image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Full">
            <summary>The full encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Half">
            <summary>1/2 the encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Quarter">
            <summary>1/4 the encoded size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.JpegScaleFactor.Eighth">
            <summary>1/8 the encoded size.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdResolution">
            <summary>PhotoCD Resolution (image size) to load.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseQuarter">
            <summary>1/4 the size and 1/16 the memory of the base image. 192 x 128 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseHalf">
            <summary>1/2 the size and 1/4 the memory of the base image. 384 x 256 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.Base">
            <summary>The base size of the PCD image. 768 x 512 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX2">
            <summary>Double the size and 4 times the memory of the base image. 1536 x 1024 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX4">
            <summary>4 times the size and 16 times the memory of the base image. 3072 x 2048 pixels</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PcdResolution.BaseX8">
            <summary>8 times the size and 64 times the memory of the base image. 6144 x 4096 pixels</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmImageType">
            <summary>The type of Pnm image</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PbmAscii">
            <summary>Blak and White image, ASCII encoded</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PbmBinary">
            <summary>Black and White image</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PgmAscii">
            <summary>Grayscale image, ASCII encoded</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.Pgmbinary">
            <summary>Grayscale image</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PpmAscii">
            <summary>RGB image, ASCII encoded</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.PnmImageType.PpmBinary">
            <summary>RGB image</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffCompression">
            <summary>Contains the various compression types available for TIFF images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.NoCompression">
            <summary>Specify no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group3FaxEncoding">
            <summary>CCITT Group 3 fax encoding. Used on 1-bit images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Group4FaxEncoding">
            <summary>CCITT Group 4 fax encoding. Used on 1-bit images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.JpegCompression">
            <summary>Lossy JPEG compression. Used on 8-bit grayscale and 24-bit RGB images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.MacintoshPackbits">
            <summary>A modified RLE (run length encoding) style of compression</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Deflate">
            <summary>ZIPLib compression, similar to PNG and WinZip</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Lzw">
            <summary>LZW compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.ModifiedHuffman">
            <summary>CCITT modified Huffman RLE. Used on 1-bit images only, otherwise uses no compression.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Codec.TiffCompression.Default">
            <summary>Chooses the most appropriate compression depending on the pixel format. 1-bpp image will be saved with CCITG4 compression, and everything else will use LZW.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpDecoder">
            <summary>    An ImageDecoder used to read Windows Bitmap (BMP) images     from a System.IO.Stream.</summary>
            <remarks>By default, when opening a Bmp image using the AtalaImage or Workspace objects, this decoder will automatically be selected from the RegisteredDecoders and does not have to be explicitly set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.#ctor">
            <summary>Initializes a new instance of a BmpDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Bmp image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Bmp     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Bmp encoded image.</summary>
            <returns>An AtalaImage containing the image data.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpDecoder.SupportedImageType">
            <summary>Returns a Bmp ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.BmpEncoder">
            <summary>    An ImageEncoder that will write Windows Bitmap (BMP)     images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a BMP image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.#ctor">
            <summary>Initializes a new instance of a BmpEncoder. Initializes a new instance of BmpEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.#ctor(Atalasoft.Imaging.Codec.BmpCompression)">
            <summary>Initializes a new instance of BmpEncoder specifying the compression to use.</summary>
            <param name="compression">The compression to use when writing Bmp images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.BmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Bmp image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.Compression">
            <summary>The compression to use when writing Bmp images.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.BmpEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecCompression">
            <summary>Derive from this class for any codec's specific compression type.</summary>
            <remarks>For use with the  SetEncoderCompression event in  MultiFramedImageEncoder.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecErrorEventArgs">
            <summary>This class is used for encapsulating errors encountered while encoding or decoding image files.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecErrorEventArgs.#ctor(System.String,Atalasoft.Imaging.Codec.ErrorLevel)">
            <summary>Construct a new set CodecErrorEventArgs object.</summary>
            <param name="description">A string description of the error that has occurred.</param>
            <param name="level">The severity of the error that has occurred.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.CodecErrorEventArgs.Description">
            <summary>Get the description of the error that has occurred.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.CodecErrorEventArgs.ErrorLevel">
            <summary>Get the severity of the error that has occurred.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecException">
            <summary>This exception is thrown when there is an error in the codec (decoder or encoder).</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor">
            <summary>Creates a new instance of CodecException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor">
            <summary>Creates a new instance of CodecException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.String)">
            <summary>Creates a new instance of CodecException specifying the error message.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.CodecException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of CodecException specifying the error message and inner exception.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderCollection">
            <summary>A collection of ImageDecoders.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.#ctor">
            <summary>Creates a new instance of DecoderCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Add(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Adds an ImageDecoder to the collection.</summary>
            <param name="decoder">The ImageDecoder to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Contains(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Determines if a specific ImageDecoder is contained within the collection.</summary>
            <returns>True if the decoder is in the collection.</returns>
            <param name="decoder">The ImageDecoder to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.CopyTo(Atalasoft.Imaging.Codec.ImageDecoder[],System.Int32)">
            <summary>Copies the decoders to an array.</summary>
            <param name="decoders">An array to hold the ImageDecoders.</param>
            <param name="index">The starting index in the array to start copying data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.IndexOf(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Returns the index of a specific ImageDecoder within the collection.</summary>
            <returns>The index of the ImageDecoder or -1 if the decoder is not in the collection.</returns>
            <param name="decoder">The ImageDecoder to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Inserts an ImageDecoder into the collection at the specified index.</summary>
            <param name="index">The index to place the ImageDecoder.</param>
            <param name="decoder">The ImageDecoder to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderCollection.Remove(Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Removes an ImageDecoder from the collection.</summary>
            <param name="decoder">The ImageDecoder to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.DecoderCollection.Item(System.Int32)">
            <summary>The indexer of this collection.</summary>
            <param name="index">The index of the ImageDecoder to retrieve.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.DecoderDictionary">
            <summary>A dictionary of ImageDecoders.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.#ctor">
            <summary>Creates a new instance of DecoderDictionary.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Add(Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Codec.ImageDecoder)">
            <summary>Add a decoder to the project.</summary>
            <param name="imageType">The image type for the decoder.</param>
            <param name="decoder">The ImageDecoder to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Contains(Atalasoft.Imaging.Codec.ImageType)">
            <summary>Determines if a decoder is in the dictionary.</summary>
            <returns>True if the dictionary contains the decoder.</returns>
            <param name="imageType">The image decoder type.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.CopyTo">
            <summary>Copies items from the dictionary to an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.DecoderDictionary.Remove(Atalasoft.Imaging.Codec.ImageType)">
            <summary>Removes a decoder from the dictionary.</summary>
            <param name="imageType">The image type to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.DecoderDictionary.Item(Atalasoft.Imaging.Codec.ImageType)">
            <summary>Allows the decoders to be enumerated.</summary>
            <param name="index">The index of the item to retrieve.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfDecoder">
            <summary>    An ImageDecoder used to read Enhanced Metafiles (EMF)     images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening an Emf image using the     AtalaImage or Workspace objects, this decoder will     automatically be selected from the RegisteredDecoders and does     not have to be explicitly set.     Any vectorized entities saved in the Metafile will be     converted to a raster format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.#ctor">
            <summary>Initializes a new instance of a EmfDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from an Emf image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Emf     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing an Emf encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EmfDecoder.SupportedImageType">
            <summary>Returns an Emf ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EmfEncoder">
            <summary>    An ImageEncoder that will write Enhanced Metafiles (EMF)     images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a EMF image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.#ctor">
            <summary>Initializes a new instance of a EmfEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as an Emf image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EmfEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs">
            <summary>This object is used for events fired by an  MultiFramedImageEncoder when requesting a compression type.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.#ctor(Atalasoft.Imaging.AtalaImage,System.Int32,Atalasoft.Imaging.Codec.CodecCompression)">
            <summary>Creates a new instance of EncoderCompressionEventArgs.</summary>
            <param name="image">The AtalaImage that is to be encoded.</param>
            <param name="frameIndex">The zero based frame index that will be encoded.</param>
            <param name="compression">Specifies the compression that will be used to encode the image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.Compression">
            <summary>Gets or sets the compression that will be used to encode the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.FrameIndex">
            <summary>Gets the zero based frame index that will be encoded.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EncoderCompressionEventArgs.Image">
            <summary>Gets the AtalaImage that will be encoded.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EpsEncoder">
            <summary>    An ImageEncoder that will write Adobe Encapsulated     PostScript images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify an EPS image. The output format conforms to the Adobe Encapsulated PostScript 3.0 specification.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EpsEncoder.#ctor">
            <summary>Initializes a new instance of EpsEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.EpsEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as an EPS image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Creator">
            <summary>This property represents the creator field in the header of the resulting EPS image.</summary>
            <remarks>If the string contains carriage return or new line characters, the resulting image may not work properly. By default, this property is set to "Atalasoft, Inc."</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.IgnoreColorProfile">
            <summary>Allow the EPS encoder to ignore the color profile provided by an image.</summary>
            <remarks>If IgnoreColorProfile is set to false and the image contains a color profile, the resulting EPS will contain an embedded color profile. If IgnoreColorProfile is set to true the color profile will be ignored.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.ImageLocation">
            <summary>This sets the relative location of the image in page space in units of points.</summary>
            <remarks>    This sets where the image will be rendered on the virtual     EPS page. In page space, the lower left corner of the page is     (0, 0), as in a conventional Cartesian coordinate system.     ImageLocation is the point at which the lower left corner of     the image will be placed.     In EPS, the notion of a page doesn't fully apply, but     since EPS can also be rendered on a PostScript device, if this     point isn't chosen carefully, the image may get clipped.     By default, ImageLocation is (72, 72), or one inch up and     to the right of the lower left corner of a page.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.IncludeShowPage">
            <summary>Determines whether or not this image will include the PostScript showpage command.</summary>
            <remarks>    Some applications that consume EPS do not handle the     showpage command gracefully. Suppressing it may help     incompatible application handle the image correctly.          Setting this property to false will prevent the image     from displaying if it is sent directly to a PostScript     device.          The default value is true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.InvertBW">
            <summary>Switches the sense of black and white in 1 bit-per-pixel images</summary>
            <remarks>Default value is true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Resolution">
            <summary>Sets the output resolution of the image.</summary>
            <remarks>    This property is ignored if      UseImageResolution is set to true.     The default value is 72 pixels per inch.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Scale">
            <summary>Sets the output scale of the image.</summary>
            <remarks>    Use this to change the scale of the image in the EPS     image. It is initially set to (1, 1), which represents no     change in scale. To reduce the image, set this property to     values less than 1 but greater than 0. To enlarge the image,     set this property to values greater than 1.          Scale does not need to be uniform. In other words, an     image can be enlarged in either the x or y directions     independently.          Negative values will flip the image as well as scale     it.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.Title">
            <summary>Set the title of the image in the EPS header</summary>
            <remarks>Default value is "Untitled"</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.EpsEncoder.UseImageResolution">
            <summary>Determine whether or not to use the resolution of the image to be saved.</summary>
            <remarks>    If this property is set to true, then the     resolution off the image will be used for conversion to EPS. If     the image resolution has no units or the resolution is invalid,     it will be treated as 72 pixels per inch.          Default value is true.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifDecoder">
            <summary>    An ImageDecoder used to read Compuserve Graphics     Interchange (GIF) images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Gif image using the AtalaImage     or Workspace objects, this decoder will automatically be     selected from the RegisteredDecoders and does not have to be     explicitly set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.#ctor">
            <summary>Initializes a new instance of a GifDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetFrameCount(System.IO.Stream)">
            <summary>Gets the number of frames in a GIF.</summary>
            <returns>The number of frames in a GIF.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo">
            <summary>Retreive information from a Gif image stored in a Stream without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Gif image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a specified frame in a Gif image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">The zero based frame index to load from an animated GIF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Gif     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read">
            <summary>Returns an AtalaImage from a Stream containing a Gif encoded image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Gif encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns a specified frame to an AtalaImage from a Stream containing an animated Gif encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">The zero based frame index to load from an animated GIF.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifDecoder.Frames">
            <summary>Gets a GifFrameCollection from an animated GIF.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifDecoder.SupportedImageType">
            <summary>Returns a Gif ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifEncoder">
            <summary>    An ImageEncoder that will write Compuserve Graphics     Interchange (GIF) images to a System.IO.Stream.</summary>
            <remarks>    This ImageEncoder can be passed into the the AtalaImage     or Workspace objects when saving to specify a GIF image.          Gif Images typicaly have one color which is transparent.     When saving with a GifFrameCollection object, this is indicated     by the TransparentIndex property of each GifFrame.     When saving with a regular AtalaImage or ImageCollection,     the transparent index is determined automaticaly. Each color in     the palette can have an alpha value between 0 and 255. The     GifEncoder will chose (as the transparent color) the first     fully transparent color in the palette, that is the first color     with an alpha value of 255.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor">
            <summary>Initializes a new instance of a GifEncoder. Initializes a new instance of a GifEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor(System.Boolean)">
            <summary>Initializes a new instance of a BmpEncoder specifying the interlace setting.</summary>
            <param name="interlace">A value indicating if the image is saved with a pixel row interlacing pattern.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.#ctor(System.Boolean,System.Boolean)">
            <summary>Creates a new instance of GifEncoder specifying whether to interlace the image and optimize color depth.</summary>
            <param name="interlace">A value indicating if the image is saved with a pixel row interlacing pattern.</param>
            <param name="optimizeColorDepth">A value indicating whether to optimize the color depth.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save">
            <summary>Encode an AtalaImage as a Gif image to a stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Gif image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifEncoder.Save(System.IO.Stream,Atalasoft.Imaging.Codec.GifFrameCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves an animated GIF image.</summary>
            <param name="stream">The stream to save the image into.</param>
            <param name="frameCollection">The GifFrameCollection containing information about each frame in the animation.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.BackgroundIndex">
            <summary>Gets or sets the background index to store in the GIF file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.Interlace">
            <summary>Gets or sets a value indicating if the image is saved with a pixel row interlacing pattern. Default false</summary>
            <remarks>Interlacing is a technique that allows a Gif to be displayed gradually. It first displays a blocky image which becomes finer and more clear as the image loads.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.OptimizeColorDepth">
            <summary>Gets or sets a value indicating if the bitdepth is optimized based on the number of colors in the palette. Default true.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrame">
            <summary>The GifFrame class holds information about a single frame in an animated GIF file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor">
            <summary>Creates a new instance of GifFrame.Creates a new instance of GifFrame.Creates a new instance of GifFrame using default values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of GifFrame specifying the frame image.</summary>
            <param name="image">The image for this frame.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Creates a new instance of GifFrame specifying the frame image and location.</summary>
            <param name="image">The image for this frame.</param>
            <param name="location">The location to render the image on the animated canvas.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
            <summary>Creates a new instance of GifFrame specifying the frame image, location and delay time.</summary>
            <param name="image">The image for this frame.</param>
            <param name="location">The location to render the image on the animated canvas.</param>
            <param name="delayTime">The number of milliseconds this frame should be displayed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrame.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32,System.Boolean,Atalasoft.Imaging.Codec.GifFrameDisposal,System.Int32,System.Boolean)">
            <summary>Creates a new instance of GifFrame specifying the frame image, location, delay time, interlaced, frame disposal, transparent index and local palette settings.</summary>
            <param name="image">The image for this frame.</param>
            <param name="location">The location to render the image on the animated canvas.</param>
            <param name="delayTime">The number of milliseconds this frame should be displayed.</param>
            <param name="interlaced">A value indicating whether the image is interlaced.</param>
            <param name="frameDisposal">The method of frame disposal to use before rendering the next frame.</param>
            <param name="transparentIndex">The transparent index for this image.</param>
            <param name="useLocalPalette">A value indicating whether this image uses the global palette or it's own palette.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.DelayTime">
            <summary>Gets or sets the number of milliseconds this frame should be displayed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.FrameDisposal">
            <summary>Gets or sets the method of frame disposal to use before rendering the next frame.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Image">
            <summary>Gets or sets the image for this frame.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Interlaced">
            <summary>Gets or sets a value indicating whether the image is interlaced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.Location">
            <summary>Gets or sets the location to render the image on the animated canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.TransparentIndex">
            <summary>Gets or sets the transparent index for this image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrame.UseLocalPalette">
            <summary>Gets or sets a value indicating whether this image uses the global palette or it's own palette.</summary>
            <remarks>Using a global palette for all of the images will reduce the file size.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifFrameCollection">
            <summary>    The GifFrameCollection class represents an animated GIF     file. It contains all of the frames and properties for the     animation.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.#ctor">
            <summary>Creates a new instance of GifFrameCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Add(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Adds a frame to the collection.</summary>
            <param name="frame">The GifFrame to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Contains(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Checks to see if a specific frame already exists in the collection.</summary>
            <returns>True if the frame exists.</returns>
            <param name="frame">The GifFrame to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.CopyTo(Atalasoft.Imaging.Codec.GifFrame[],System.Int32)">
            <summary>Copies the GifFrames into an array.</summary>
            <param name="frames">An array of GifFrame in which the collection will be copied.</param>
            <param name="index">The index in the frames array to begin copying to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Dispose">
            <summary>Releases all of the frames from the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.IndexOf(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Looks up the index for a specific frame.</summary>
            <returns>The index of the frame.</returns>
            <param name="frame">The GifFrame to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Inserts a frame into the collection at the specified position.</summary>
            <param name="index">The index position which the frame should be placed.</param>
            <param name="frame">The GifFrame to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifFrameCollection.Remove(Atalasoft.Imaging.Codec.GifFrame)">
            <summary>Removes a frame from the collection.</summary>
            <param name="frame">The GifFrame to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.BackgroundColorIndex">
            <summary>Gets or sets the index in the global palette used as the background color for the animation canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.GlobalPalette">
            <summary>Gets or sets the palette used by frames in the GIF.</summary>
            <remarks>Using a global palette can decrease the overall size of the animated GIF.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Height">
            <summary>Gets or sets the height of the animation canvas.</summary>
            <remarks>All images added to the collection must be equal to or less than this size.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Item(System.Int32)">
            <summary>Gets a GifFrame at the specified index.</summary>
            <param name="index">The index of the GifFrame to retrieve.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.LoopCount">
            <summary>Gets or sets the number of times to loop through the animation.</summary>
            <remarks>If this value is 0, the animation loop is infinite.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.TransparentIndex">
            <summary>Gets or sets the index in the global palette which represents the transparent color.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifFrameCollection.Width">
            <summary>Gets or sets the width of the animation canvas.</summary>
            <remarks>All images added to the collection must be equal or less than this size.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.GifImageInfo">
            <summary>Summary description for PngImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo.#ctor">
            <summary>Initializes a new instance of GifImageInfo.Creates a GifImageInfo object.Initializes a new instance of GifImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.GifImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary>Initialize a new instance of GifImageInfo specifying it's properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when the image is read.</param>
            <param name="transIndex">The transparent pixel index.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.BackgroundIndex">
            <summary>Gets the background index in the GIF file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.DelayTime">
            <summary>Gets or sets the amount of time to display this frame in milliseconds.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.FrameDisposal">
            <summary>Gets or sets the frame disposal method to use for this frame.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.Interlaced">
            <summary>Gets a value indicating if the GIF is interlaced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.LeftOffset">
            <summary>Gets or sets the pixel offset from the left side of the animated screen area.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TopOffset">
            <summary>Gets or sets the pixel offset from the top of the animated screen area.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.GifImageInfo.TransparentIndex">
            <summary>Gets the transparent index of the Gif.</summary>
            <remarks>This value may be -1 if no transparent index is used.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageDecoder">
            <summary>An abstract (MustInherit in Visual Basic) base class that defines a file format decoder to read an image from a Stream. All image decoders used in dotImage must inherit this class.</summary>
            <remarks>To load an image from a stream, the AtalaImage constructor may be used, and passing in a string filename, or a Stream. See the examples below</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from an image stored in a file without decoding the image data.</summary>
            <returns>An ImageInfo object containing information about the image such as size and bitdepth.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.IsValidFormat(System.IO.Stream)">
            <summary>Checks the stream to determine if the image can be read by the decoder that derives this class.</summary>
            <returns>True if the encoded image can be read by this decoder, otherwise false.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decode an image in a specified image Stream.</summary>
            <returns>An AtalaImage containing the decoded image.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageDecoder.SupportedImageType">
            <summary>Returns the ImageType that the implemented decoder class supports.</summary>
            <remarks>If the decoder supports a format not included with dotImage, then this will return Unknown.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageEncoder">
            <summary>An abstract (MustInherit in Visual Basic) base class that defines a file format encoder to save an image to a file. All image encoders used in dotImage must inherit this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns true if the given PixelFormat can be encoded with the derived encoder.</summary>
            <param name="format">The PixelFormat</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Save an image using this encoder.</summary>
            <returns>The number of bytes written to the file.</returns>
            <param name="stream">A stream containing the file which the image will be encoded to.</param>
            <param name="image">The image to save.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageInfo">
            <summary>Contains information from an encoded image file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor">
            <summary>Initialize a new instance of ImageInfo.Creates an ImageInfo object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat)">
            <summary>Initialize a new instance of ImageInfo specifying its properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when the image is read.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Int32)">
            <summary>Initialize a new instance of ImageInfo specifying its properties for a multi-frame image.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when the image is read.</param>
            <param name="frameCount">The number of frames in the image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ColorDepth">
            <summary>Gets the bits per pixel of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.FrameCount">
            <summary>Gets the number of frames in the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.ImageType">
            <summary>Gets the image type.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.PixelFormat">
            <summary>Gets the PixelFormat which will be returned when the image is read.</summary>
            <remarks>The pixel format to read might be different then the actual format stored within the image. dotImage will do it's best to read to the native pixel format and colordepth.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Resolution">
            <summary>Gets the image resolution, usually expressed in dots per inch.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.ImageInfo.Size">
            <summary>Gets the width and height of the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageReadException">
            <summary>This exception is thrown when there is a problem reading an image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor">
            <summary>Creates an ImageReadException object.Creates a new instance of ImageReadException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.String)">
            <summary>Creates a new instance of ImageReadException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageReadException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageReadException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.ImageWriteException">
            <summary>This exception is thrown when there is a problem writing an image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor">
            <summary>Creates an ImageWriteException.Creates a new instance of ImageWriteException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.String)">
            <summary>Creates a new instance of ImageWriteException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.ImageWriteException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageWriteException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegDecoder">
            <summary>    An ImageDecoder used to read JPEG images from a     System.IO.Stream.</summary>
            <remarks>    By default, when opening a Jpeg image using the     AtalaImage or Workspace objects, this decoder will     automatically be selected from the RegisteredDecoders and does     not have to be explicitly set.     Jpeg images can store metadata such as EXIF and IPTC into     the images. See the Atalasoft.Imaging.Metadata namespace for     more information on reading this information from a Jpeg     image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.#ctor">
            <summary>Initializes a new instance of a JpegDecoder. Creates a new JpegDecoder.Initializes a new instance of a JpegDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.#ctor(Atalasoft.Imaging.Codec.JpegScaleFactor)">
            <summary>Initializes a new instance of a JpegDecoder specifying the Jpeg scaling factor.</summary>
            <param name="scaleFactor">The Jpeg scaling factor to use when reading the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
            <summary>Gets the best scale given a requested scale factor. For a JPEG, this would result in either 1, 1/2, 1/4, 1/16, or 1/32</summary>
            <param name="stream">The encoded image stream</param>
            <param name="frameIndex">not used for JPEG's</param>
            <param name="requestedScale">The scale to request</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Jpeg image stored in a Stream without decoding the image data.</summary>
            <remarks>Many JPEG images do not contain valid resolution information. In these cases, the image info will contain a resolution of 96 pixels per inch.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Jpeg     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Jpeg encoded image.</summary>
            <remarks>Many JPEG images do not contain valid resolution information. In these cases, the image info will contain a resolution of 96 pixels per inch.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Gets an AtalaImage of the requested scale.</summary>
            <param name="stream">The encoded image</param>
            <param name="frameIndex">Not used for JPEG's</param>
            <param name="scaleFactor">The scale factor</param>
            <param name="progress">A progress delegate</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.ScaleFactor">
            <summary>Gets or sets a value indicating the scale factor to use when reading Jpeg's.</summary>
            <remarks>The scale factor allows a Jpeg image to be read to a smaller sized image. This is a good quick way of creating thumbnails out of Jpeg images.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegDecoder.SupportedImageType">
            <summary>Returns a Jpeg ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegEncoder">
            <summary>    An ImageEncoder that will write JPEG images to a     System.IO.Stream.</summary>
            <remarks>    This ImageEncoder can be passed into the the AtalaImage     or Workspace objects when saving to specify a JPEG     image.     Metadata can be written with the JPEG image including     EXIF, IPTC and COM Comments. See the Atalasoft.Imaging.Metadata     namespace for more information.     If the image being saved contains a ColorProfile, it will     be embedded within the file.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor">
            <summary>Initializes a new instance of a JpegEncoder. Creates a JpegEncoder.Initializes a new instance of a JpegEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32)">
            <summary>Initializes a new instance of a JpegEncoder specifying the quality.</summary>
            <param name="quality">The quality level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of a JpegEncoder specifying the quality and smoothing.</summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of a JpegEncoder specifying the quality, smoothing, and progressive value.</summary>
            <param name="quality">The quality level.</param>
            <param name="smoothing">The smoothing level.</param>
            <param name="progressive">A value indicating if the image is saved progressively.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers">
            <summary>These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG metadata with new metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the need to recompress the image data. This method does not overwrite existing JPEG images, but creates a copy of the existing JPEG data. The original image could be deleted if this method succeeds.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String)">
            <summary>These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG metadata with new metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the need to recompress the image data. This method does not overwrite existing JPEG images, but creates a copy of the existing JPEG data. The original image could be deleted if this method succeeds.</remarks>
            <param name="source">The source image filename to copy from.</param>
            <param name="dest">The destintation image filename to copy to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.String,System.String,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
            <summary>These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG metadata with new metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the need to recompress the image data. This method does not overwrite existing JPEG images, but creates a copy of the existing JPEG data. The original image could be deleted if this method succeeds.</remarks>
            <param name="source">The source image filename to copy from.</param>
            <param name="dest">The destintation image filename to copy to.</param>
            <param name="flags">Specifies the metadata to copy into the new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream)">
            <summary>Performs a lossless copy of the JPEG image data into a new image while replacing the JPEG metadata with new metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the need to recompress the image data. This method does not overwrite existing JPEG images, but creates a copy of the existing JPEG data. The original image could be deleted if this method succeeds.</remarks>
            <param name="source">The source image stream to copy from.</param>
            <param name="dest">The destintation image stream to copy to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.CopyJpegWithNewMarkers(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags)">
            <summary>These methods perform a lossless copy of the JPEG image data into a new image while replacing the JPEG metadata with new metadata.</summary>
            <remarks>By saving the APP1 Jpeg marker, EXIF, IPTC, and COM data can be copied to existing images, without the need to recompress the image data. This method does not overwrite existing JPEG images, but creates a copy of the existing JPEG data. The original image could be deleted if this method succeeds.</remarks>
            <param name="source">The source image stream to copy from.</param>
            <param name="dest">The destintation image stream to copy to.</param>
            <param name="flags">Specifies the metadata to copy into the new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Jpeg image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegEncoder.SetDownsamplingFactors(System.Int32[],System.Int32[])">
            <summary>Sets the downsampling factors used when compressing the image data. This will affect both quality and file size of the saved image.</summary>
            <remarks>    The horizontal and vertical arrays represent the factors     for each color channel. If the image is 8-bit there should only     be a single element in the array. For 24-bit images there will     be three elements.     The values of these factors range from 1 to 4, but not     all value combinations will work. Those that do not work will     throw an exception when saving the image.</remarks>
            <param name="horizontalFactors">An array of horizontal factors used. This can be null (Nothing in VB) to use the default settings. See remarks below for more information.</param>
            <param name="verticalFactors">An array of vertical factors used. This can be null (Nothing in VB) to use the default settings. See remarks below for more information.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.AppMarkers">
            <summary>Gets or sets the JPEG APPn Markers that will be saved with the image.</summary>
            <remarks>Metadata can be preserved in the new image by setting this property to the JPEG Marker collection from the source image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ComText">
            <summary>Gets or sets COM Text Markers that are to be saved with the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.DctMode">
            <summary>Gets or sets the DCT compression mode used for encoding.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.ImageType">
            <summary>Get the ImageType associated with this Encoder Setting.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.IptcTags">
            <summary>Gets or sets IPTC Metadata that will be saved with the image.</summary>
            <remarks>Setting this property to an IptcCollection allows IPTC tags to be added or inserted into a new JPEG image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.PhotoshopResources">
            <summary>Gets or sets Photoshop resources to be saved with the image.</summary>
            <remarks>Photoshop saves information to the APP13 Jpeg Marker. This information can be parsed with the  PhotoshopResourceParser. When PhotoshopResources and IptcTags are set to a value other than null, IptcData will be added to the PhotoshopResource when saved.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Progressive">
            <summary>Gets or sets a value indicating if the image is saved progressively.</summary>
            <remarks>A progressive Jpeg will be displayed while it's being loaded from top down in supported viewers such as web browsers.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Quality">
            <summary>Gets or sets the quality level of the Jpeg as it's encoded to a file. Valid values are 1 - 100 with a default of 75.</summary>
            <remarks>The lower the quality, the smaller the filesize. A good range of values is between 70 and 95.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Smoothing">
            <summary>Gets or sets the smoothing level when saving a Jpeg image.</summary>
            <remarks>Valid values are 0 to 100 with a default of 0. Increasing the smoothing value will tend to create smaller Jpeg files, however the image is blurred while saving.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegEncoder.Xmp">
            <summary>Gets or sets a byte array containing XMP data.</summary>
            <remarks>This property can be used to save XMP Annotation data created with DotAnnotate, our full featured Annotations toolkit for the Microsoft .NET Framework.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.JpegImageInfo">
            <summary>Summary description for JpegImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo.#ctor">
            <summary>Initialize a new instance of a JpegImageInfo. Creates a JpegImageInfo object.Initialize a new instance of a JpegImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.JpegImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean,System.Boolean)">
            <summary>Initialize a new instance of a JpegImageInfo specifying it's properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when the image is read.</param>
            <param name="progressive">A value indicating if the Jpeg is encoded progressively.</param>
            <param name="arithmetic">A value indicating if the Jpeg is encoded with arithmetic compression.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Arithmetic">
            <summary>Gets a value indicating if the Jpeg is encoded with arithmetic compression.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.JpegImageInfo.Progressive">
            <summary>Gets a value indicating if the Jpeg is encoded progressively.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.LzwNotLicensedException">
            <summary>This exception is fired when LZW is not licensed yet an attempt is made to use LZW functionality.</summary>
            <remarks>This exception is no longer thrown as the LZW patents have expired in all countries.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor">
            <summary>Creates an LzwNotLicensedException.Creates a new instance of LzwNotLicensedException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.String)">
            <summary>Creates a new instance of LzwNotLicensedException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.LzwNotLicensedException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of LzwNotLicensedException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageDecoder">
            <summary>A decoder for multiframed images such as multiple page TIFF's and animiated GIF's.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetFrameCount(System.IO.Stream)">
            <summary>Returns the number of frames in the image</summary>
            <returns>The number of frames in the image</returns>
            <param name="stream">The input Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetImageInfo">
            <summary>Retreive information in an image stored in a file without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a given frame in an image stored in a file without decoding the image data.</summary>
            <param name="stream">The input Stream.</param>
            <param name="frameIndex">The zero based frame index.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read">
            <summary>Read a specific frame in an encoded image using this decoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Read a given frame in an encoded image using this decoder.</summary>
            <param name="stream">The input Stream.</param>
            <param name="frameIndex">The zero based frame index.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.MultiFramedImageEncoder">
            <summary>An encoder for multiframed formats such as PDF and animated GIF's.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save">
            <summary>Saves the image.Saves a multi-framed image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.MultiFramedImageEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves a multiframed image specifying stream, images and progress.</summary>
            <param name="stream">The stream to save the image into.</param>
            <param name="images">An ImageCollection object containing all of the images to save.</param>
            <param name="progress">A ProgressEventHandler to give progress notification during the save.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcdDecoder">
            <summary>    An ImageDecoder used to read Kodak Photo CD (PCD) images     from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a PhotoCD image using the     AtalaImage or Workspace objects, this decoder will     automatically be selected from the RegisteredDecoders and does     not have to be explicitly set.     A PhotoCD image contains the same image stored at     multiple resolutions. By specifying the Resolution property,     you can choose which resolution image to load.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.#ctor">
            <summary>Initializes a new instance of a PcdDecoder. Creates a PcdDecoder.Initializes a new instance of a PcdDecoder with a default resolution of 768 x 512 pixels.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.#ctor(Atalasoft.Imaging.Codec.PcdResolution)">
            <summary>Initializes a new instance of a PcdDecoder specifying a resolution.</summary>
            <param name="resolution">Sets the resolution to read in a PhotoCD image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a PhotoCD image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a PhotoCD     image.</summary>
            <param name="stream">The input Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a PhotoCD encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.Resolution">
            <summary>    Gets or sets the resolution to read in a PhotoCD     image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcdDecoder.SupportedImageType">
            <summary>Returns a PhotoCD ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxDecoder">
            <summary>    An ImageDecoder used to read Zsoft Paintbrush (PCX)     images from a System.IO.Stream.</summary>
            <remarks>By default, when opening a Pcx image using the AtalaImage or Workspace objects, this decoder will automatically be selected from the RegisteredDecoders and does not have to be explicitly set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.#ctor">
            <summary>Initializes a new instance of a PcxDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Pcx image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains a Pcx     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Pcx encoded image.</summary>
            <param name="stream">The stream containing the image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcxDecoder.SupportedImageType">
            <summary>Returns a Pcx ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PcxEncoder">
            <summary>    An ImageEncoder that will write ZSoft Paintbrush (PCX)     images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a PCX image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.#ctor">
            <summary>Initializes a new instance of a PcxEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PcxEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Pcx image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PcxEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngDecoder">
            <summary>    An ImageDecoder used to read Portable Network Graphics     (PNG) images from a System.IO.Stream.</summary>
            <remarks>By default, when opening a Png image using the AtalaImage or Workspace objects, this decoder will automatically be selected from the RegisteredDecoders and does not have to be explicitly set.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.#ctor">
            <summary>Initializes a new instance of a PngDecoder. Initializes a new instance of a PngDecoder using the default screen gamma.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.#ctor(System.Double)">
            <summary>Initializes a new instance of a PcdDecoder with a specified screen gamma.</summary>
            <param name="screenGamma">The screen gamma value that will be used to adjust the colors of a PNG image when read if the image contains gamma.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Png image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Png     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Png encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.ScreenGamma">
            <summary>Gets or sets the screen gamma value that will be used to adjust the colors of a PNG image when read if the image contains gamma.</summary>
            <remarks>A value of 0 will ignore the gamma of the image. A value of 2.2 is typical for PC's. Default 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SetAlphaFromTransparentColor">
            <summary>Indicates whether or not the PngDcoder should set the alpha channel in the image using the Png file's transparent color.</summary>
            <remarks>GetImageInfo will always return the pixel format appropriate to the file without alpha. If the SetAlphaFromTransparentColor is true, the returned image may be in a different pixel format. For example, an image with a pixel format of Pixel24BppBgr will be Pixel32BppBgra if SetAlphaFromTransparentColor is true and there is a transparent color in the png.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.SupportedImageType">
            <summary>Returns a Png ImageType enumeration value.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngDecoder.TwoBytePerComponentSupport">
            <summary>Gets or sets a value indicating whether 16-bit per component images are read as 16 or 8-bit per component images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngEncoder">
            <summary>    An ImageEncoder that will write Portable Network Graphics     (PNG) images to a System.IO.Stream.</summary>
            <remarks>    This ImageEncoder can be passed into the the AtalaImage     or Workspace objects when saving to specify a PNG image.     If the image being saved contains a ColorProfile, it will     be embedded within the file.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor">
            <summary>Creates a PngEncoder.Initializes a new instance of a PngEncoder. Initializes a new instance of a PngEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor(System.Drawing.Color,System.Double,System.Boolean,Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary>Initializes a new instance of a PngEncoder specifying the background color, gamma, interlace, and COM Text value to save.</summary>
            <param name="backgroundColor">The color to use as the default background color for Png images with alpha.</param>
            <param name="gamma">The gamma value to write to a PNG image.</param>
            <param name="interlaced">The Png Interlace setting.</param>
            <param name="comText">The COM text metadata to save with the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.#ctor(Atalasoft.Imaging.Metadata.ComTextCollection)">
            <summary>Initializes a new instance of a PngEncoder specifying the COM Text metadata to save.</summary>
            <param name="comText">The COM text metadata to save with the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Png image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundColor">
            <summary>Gets or sets the color to use as the default background color for Png images with alpha.</summary>
            <remarks/>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.BackgroundIndex">
            <summary>Gets or sets the palette index or grayscale value to use as the default background color for colormapped Png images with alpha.</summary>
            <remarks>Set this value to -1 in order to use the closest color to  BackgroundColor.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.ComText">
            <summary>Gets or sets the COM text metadata to save with the image.</summary>
            <remarks>See COM Text Metadata for more information.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Gamma">
            <summary>Gets or sets the gamma value to write to a PNG image. 0 will not write any value, 2.2 is a typical value for PC's. Default 0.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.Interlace">
            <summary>Gets or sets whether Png files are saved with a pixel row interlacing pattern. Defaults False.</summary>
            <remarks>Interlacing is a technique that allows a PNG to be displayed gradually. It first displays a blocky image which becomes finer and more clear as the image loads.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PngImageInfo">
            <summary>Information from a PNG Image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo.#ctor">
            <summary>Creates a PngImageInfo object.Initialize a new instance of a PngImageInfo. Initialize a new instance of a PngImageInfo.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PngImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.Codec.ImageType,Atalasoft.Imaging.Dpi,Atalasoft.Imaging.PixelFormat,System.Boolean)">
            <summary>Initialize a new instance of a PngImageInfo specifying it's properties.</summary>
            <param name="size">The width and height of the image.</param>
            <param name="colorDepth">The bits per pixel of the image.</param>
            <param name="imageType">The image type.</param>
            <param name="resolution">The image resolution, usually expressed in dots per inch.</param>
            <param name="pixelFormat">The PixelFormat which will be returned when the image is read.</param>
            <param name="pngInterlaced">A value indicating if the PNG is interlaced.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.HasTransparentColor">
            <summary>Indicates that the image contains a transparency color.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.PngInterlaced">
            <summary>Gets a value indicating if the PNG is interlaced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PngImageInfo.TransparentColor">
            <summary>Gets or sets the transparent color for the PNG image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmDecoder">
            <summary>    An ImageDecoder used to read PNM/PBM/PGM/PPM images from     a System.IO.Stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.#ctor">
            <summary>Initializes an instance of the PnmDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Gets image information from a PNM image given an encoded image stream.</summary>
            <param name="stream">The encoded image stream</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.IsValidFormat(System.IO.Stream)">
            <summary>Returns true of the given stream is a PNM image.</summary>
            <param name="stream">The encoded image stream</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes a PNG image stream into an AtalaImage.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmEncoder">
            <summary>Encodes an AtalaImage into a PNM image file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Method that encodes an AtalaImage into a PNM image file given an Atalaimage and stream.</summary>
            <param name="stream">Stream to encode the image into</param>
            <param name="image">AtalaImage to encode</param>
            <param name="progress">Progress delegate</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PnmEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PnmImageInfo">
            <summary>Information about a PNM Image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PnmImageInfo.#ctor(System.Drawing.Size,System.Int32,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.Codec.PnmImageType,System.Int32)">
            <summary>Creates a new instance of PnmImageInfo.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PnmImageInfo.Format">
            <summary>Gets the PNM Format.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PnmImageInfo.MaxValue">
            <summary>Gets the maximum pixel value, as specified in the file.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdDecoder">
            <summary>    An ImageDecoder used to read Adobe Photoshop (PSD) images     from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Psd image using the AtalaImage     or Workspace objects, this decoder will automatically be     selected from the RegisteredDecoders and does not have to be     explicitly set.     Any layering information saved in the PSD image will be     lost when read. This information is read into a merged RGB     format.     For obtaining Photoshop Resources from a PSD image, see     the      PhotoshopResourceParser class.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.#ctor">
            <summary>Initializes a new instance of a PsdDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Psd image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.GetThumbnail(System.IO.Stream)">
            <summary>Gets the thumbnail image stored in the Photoshop Resource of the image.</summary>
            <returns>An AtalaImage containing the thumbnail image.</returns>
            <remarks>See the  PhotoshopResourceParser for obtaining the RAW thumbnail data and other photoshop specific information.</remarks>
            <param name="stream">The PSD image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Psd     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Psd encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdDecoder.SupportedImageType">
            <summary>Gets a Psd ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.PsdEncoder">
            <summary>    An ImageEncoder that will write Adobe Photoshop (PSD)     images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a PSD image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.#ctor">
            <summary>Initializes a new instance of a PsdEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.PsdEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Psd image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.IptcTags">
            <summary>Gets or sets IPTC Tags that will be saved with the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.PhotoshopResources">
            <summary>Gets or sets Photoshop resources to be saved with the image.</summary>
            <remarks>Photoshop resource information can be parsed with the  PhotoshopResourceParser. When PhotoshopResources and IptcTags are set to a value other than null, IptcData will be added to the PhotoshopResource when saved.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.PsdEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.RegisteredDecoders">
            <summary>This class includes static members containing information on image decoders to use in the project when reading images as well as methods to obtain a an appropriate decoder based on an image stream or filename.</summary>
            <remarks>Any file format extensions, such as the Atalasoft DotImage Jpeg2000 should be registered using this class by adding the decoders to the Decoders collection.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoder(System.IO.Stream)">
            <summary>Returns an ImageDecoder that can be used to decode the given stream.</summary>
            <remarks>Use this method for obtaining the file format of an image saved to a file. See GetImageInfo for obtaining the file format and extended information.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetDecoderFromType(System.Type)">
            <summary>Returns an ImageDecoder that matches a specific type.</summary>
            <param name="codecType">The type of decoder to retreive.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo">
            <summary>Returns information about an encoded image file.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String)">
            <summary>Returns information about an encoded image file specifying a filename.</summary>
            <returns>The ImageInfo from an existing file.</returns>
            <param name="fileName">A file name containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.String,System.Int32)">
            <summary>Returns information about an encoded image file specifying a filename and frame index.</summary>
            <returns>The ImageInfo from an existing file.</returns>
            <param name="fileName">A file name containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to retreive information from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Returns information about an encoded image file specifying a stream and frame index.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">If the image contains multiple frames, this is the zero based index to retreive information from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.RegisteredDecoders.GetImageInfo(System.IO.Stream)">
            <summary>Returns information about an encoded image file specifying a stream.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.Decoders">
            <summary>Gets a static collection of Image Decoders that will be used to decode any arbitrary image.</summary>
            <remarks>Add any custom decoders to this collection so that the AtalaImage constructor and Workspace.Open will use that decoder when attempting to load an image. DotImage will loop through each decoder testing the IsValidFormat until it returns true. The decoders collection is order dependent.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.KnownTypeDecoders">
            <summary>Returns a reference to the decoders that are registered in dotImage to load the known dotImage ImageTypes.</summary>
            <remarks>dotImage is initialized with the standard decoders set to the known image types. A custom decoder can override a standard encoder by setting the custom decoder to the ImageType in this dictionary collection.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.RegisteredDecoders.UnknownTypeDecoders">
            <summary>Returns a reference to the decoders that are used for reading images that dotImage doesn't recognize as a standard ImageType.</summary>
            <remarks>    An unlimited number of formats not natively supported by     dotImage can be added by including the decoders in this     collection.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaDecoder">
            <summary>    An ImageDecoder used to read Truevision Targa (TGA)     images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Targa image using the     AtalaImage or Workspace objects, this decoder will     automatically be selected from the RegisteredDecoders and does     not have to be explicitly set.     Because there is no identifier when reading Tga images,     it is up to the developer to detect the file extension, and if     "tga" then specify this decoder directly. In many cases,     dotImage cannot guess an image is encoded as a TGA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.#ctor">
            <summary>Initializes a new instance of a TgaDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Targa image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Targa     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Returns an AtalaImage from a Stream containing a Targa encoded image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TgaDecoder.SupportedImageType">
            <summary>Returns a Tga ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TgaEncoder">
            <summary>    An ImageEncoder that will write Truevision Targa (TGA)     images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a TGA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.#ctor">
            <summary>Initializes a new instance of a TgaEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TgaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Tga image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TgaEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffCodecCompression">
            <summary>This class represents the compression for a TIFF image.</summary>
            <remarks>Used in the  MultiFramedImageEncoder when saving a multipage image to indicate the compression settings for each page in a TIFF.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor">
            <summary>Creates a new instance of TiffCodecCompression.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression)">
            <summary>Creates a new instance of TiffCodecCompression specifying the compression type.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32)">
            <summary>Creates a new instance of TiffCodecCompression specifying the compression type and JPEG quality.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32,System.Boolean)">
            <summary>Creates a new instance of TiffCodecCompression specifying the compression type, JPEG Quality, and LZW Predictor.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffCodecCompression.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Int32,System.Boolean,System.Boolean)">
            <summary>Creates a new instance of TiffCodecCompression specifying the compression type, JPEG Quality, and LZW Predictor, and whether to use old style JPEG compression.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.Compression">
            <summary>Gets or sets the TIFF compression to use.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.JpegQuality">
            <summary>Gets or sets the JPEG quality when Compression is set to JPEG.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.UseLzwPredictor">
            <summary>Gets or sets the LZW predictor value.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffCodecCompression.UseOldJpegCompression">
            <summary>Gets or sets a value indicating if Old Style JPEG compression should be used when Compression is set to JPEG.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffDecoder">
            <summary>    An ImageDecoder used to read Tagged     Image File Format (TIFF) images from an image     Stream.</summary>
            <remarks>    By default, when opening a TIFF image using the     AtalaImage or Workspace objects, this decoder will     automatically be selected from the      RegisteredDecoders.Decoders collection and does not have to     be explicitly set.     TIFF images can contain multiple pages in one file. You     may wish to specify which page to read or get information about     by specifying the frameindex in the associated Read     methods.     TIFF images can store metadata such as EXIF, IPTC, XMP,     and other TIFF tags. See the Atalasoft.Imaging.Metadata     namespace for more information on reading this     information.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetBestScale(System.IO.Stream,System.Int32,System.Double)">
            <summary>Gets the most effiicient image scale stored within the codec.</summary>
            <returns>Always returns 1.0.</returns>
            <param name="stream">encoded image stream</param>
            <param name="frameIndex">Zero based frame index</param>
            <param name="requestedScale">Requested image scale.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetFrameCount(System.IO.Stream)">
            <remarks>Returns the number of pages in an Encoded Tiff file.</remarks>
            <param name="stream">Encoded image stream</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo">
            <summary>Retreive information from a Tiff image stored in a Stream without decoding the image data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream,System.Int32)">
            <summary>Retreive information from a particularr page in a Tiff image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="frameIndex">The zero based frame index.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Tiff image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag">
            <summary>Gets a TIFF Tag from a file or stream.</summary>
            <remarks>    Information stored in a TIFF file can be obtained with     this method. A TiffTag is class containing the     object data, data type, and tag id. The data is typically a     string value.     Not all TIFF Tags are currently supported. See TIFF Tags for a list of supported     tags.     This method can be used to obtain WANG Annotations data     saved as TagID 32932.     For more comprehensive TIFF Tag handling, see the          TiffFile class in the Atalasoft.dotImage     assembly.</remarks>
            <returns>Returns a TiffTag object containing the tag data, or null if the tag does not exist in the image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.String,System.Int32)">
            <summary>Gets a TIFF Tag from a TIFF file.</summary>
            <returns>Returns a TiffTag object containing the tag data, or null if the tag does not exist in the image.</returns>
            <param name="tagID">The tag ID to retrieve data from.</param>
            <param name="fileName">The TIFF filename</param>
            <param name="frameIndex">The zero based frame index of the page to query.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.GetTiffTag(System.Int32,System.IO.Stream,System.Int32)">
            <summary>Gets a TIFF Tag from a TIFF image stream.</summary>
            <returns>Returns a TiffTag object containing the tag data, or null if the tag does not exist in the image.</returns>
            <param name="tagID">The tag ID to retrieve data from.</param>
            <param name="source">The TIFF file stream.</param>
            <param name="frameIndex">The zero based frame index of the page to query.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an TIFF     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read">
            <summary>Decodes an image from a supplied TIFF image Stream.</summary>
            <returns>Returns an decoded AtalaImage from a Stream containing a TIFF encoded image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes an image from a supplied TIFF image Stream specifying a frame index.</summary>
            <returns>Returns an decoded AtalaImage from a Stream containing a TIFF encoded image.</returns>
            <param name="stream">A Stream containing the encoded image data.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page TIFF file.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes an image from a supplied TIFF image Stream.</summary>
            <returns>Returns an decoded AtalaImage from a Stream containing a TIFF encoded image.</returns>
            <param name="stream">A Stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadRegion(System.IO.Stream,System.Drawing.Rectangle,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes a specified region of a TIFF image given a source Stream.</summary>
            <remarks>    This method will read only the strips or tiles that it     needs in order to compose and image of the indicated     rectangular region, and trim any excess data. This can be     significantly faster than reading the entire image if only a     specified region needs to be decoded. To maximize benefit of     this method, use multiple tiles or strips per image.     For reading only a single strip or tile, see      ReadStrip or      ReadTile.     Note that the image data is not corrected for orientation     even when      CorrectOrientation is true.</remarks>
            <param name="stream">A Stream containing the encoded image data.</param>
            <param name="region">A rectangular region of the image to decode.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page Tiff file.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="stream">The encoded image stream</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="frameIndex">The zero based frame index to read</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="scaleFactor">The requested scale</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadScaled(System.IO.Stream,System.Int32,System.Double,Atalasoft.Imaging.ProgressEventHandler)">
            <param name="progress">Progress delegate</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadStrip(System.IO.Stream,System.Int32,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes a specified strip from a TIFF image stream that is encoded with strips.</summary>
            <remarks>    This method differs from      ReadRegion in that it doesn't check that the source image     is stripped. For reading multiple strips at once, ReadRegion is     more efficient. To determine the strip height, query the tag     TIFFTAG_ROWSPERSTRIP (278). To determine if an image is     stripped, make sure TIFFTAG_TILELENGTH (323) or     TIFFTAG_TILEWIDTH (322) doesn't exist.     Note that the image data is not corrected for orientation     even when      CorrectOrientation is true.</remarks>
            <param name="stream">A Stream containing the encoded image data.</param>
            <param name="stripIndex">The zero based strip index to decode.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page Tiff file.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffDecoder.ReadTile(System.IO.Stream,System.Drawing.Point,System.Int32,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Decodes a specified tile from a TIFF image stream that is encoded with strips.</summary>
            <remarks>    This method differs from      ReadRegion in that it doesn't check that the source image     is tiled. For reading multiple tiles at once, ReadRegion is     more efficient. To determine the tile size, query the tag     TIFFTAG_TILELENGTH (323) or TIFFTAG_TILEWIDTH (322). If those     tags do not exist, then the image is stripped in which case see          ReadStrip.     Note that the image data is not corrected for orientation     even when      CorrectOrientation is true.</remarks>
            <param name="stream">A Stream containing the encoded image data.</param>
            <param name="location">The pixel location of the top left location of the tile.</param>
            <param name="frameIndex">The zero based frame index to load from a multi-page Tiff file.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.CorrectOrientation">
            <summary>Gets or sets a value that when true (the default) will automatically correct the image orientation by rotating and/or flipping based on the TIFF_ORIENTATION tag setting.</summary>
            <remarks>Speed can be improved when setting this value to false on large images where the orientation is a value other than 1, however the resulting image will be rotated and/or flipped. The methods  ReadRegion,  ReadTile, and  ReadStrip ignore this setting and will never correct for orientation.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.ScaledResampleMethod">
            <summary>Gets or sets the resampling method to use for ReadScaled.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffDecoder.SupportedImageType">
            <summary>[obsolete]</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TiffEncoder">
            <summary>    An ImageEncoder that will write Tagged Image File Format     (TIFF) images to a System.IO.Stream.</summary>
            <remarks>    This ImageEncoder can be passed into the     the AtalaImage or Workspace objects when saving to specify a     TIFF image.     Metadata can be written with the TIFF image including     EXIF, IPTC, XMP, and Photoshop Resources. See the     Atalasoft.Imaging.Metadata namespace for more     information.     If the image being saved contains a ColorProfile, it will     be embedded within the file.     If the image being saved is 1-bit, and palette index 0 is     black and palette index 1 is white, the image will be saved     with the photometric value of MINISBLACK. If other viewers     mistakingly view the image reversed, invert the image and     palette data prior to saving.     When compressing TIFF images, it's sometimes useful to     adjust the StripSize to something other than the default. In     particular, Deflate and LZW compression work better with larger     chunks of data.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor">
            <summary>Initializes a new instance of a TiffEncoder. Creates a TiffEncoder.Initializes a new instance of a TiffEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor(Atalasoft.Imaging.Codec.TiffCompression)">
            <summary>Initializes a new instance of a TiffEncoder specifying the compression.</summary>
            <param name="compression">A value indicating the compression algorithm used when encoding to a file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.#ctor(Atalasoft.Imaging.Codec.TiffCompression,System.Boolean)">
            <summary>Initializes a new instance of a TiffEncoder specifying the compression and if the image should be appended to the end of an existing file.</summary>
            <param name="compression">A value indicating the compression algorithm used when encoding to a file.</param>
            <param name="append">A value indicating if the image should be appended to the end of an existing file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save">
            <summary>Encode an AtalaImage as a Tiff image to a stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.ImageCollection,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Saves a collection of images to a multi-page TIFF.</summary>
            <param name="stream">A stream that the encoded image data will be saved to. This stream must have FileAccess.ReadWrite set or else only the first image will be saved.</param>
            <param name="images">The ImageCollection containing the images to save.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TiffEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Tiff image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Append">
            <summary>Get or sets a value indicating if the image should be appended to the end of an existing file.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Compression">
            <summary>Gets or sets a value indicating the compression algorithm used when encoding to a file.</summary>
            <remarks>When setting the compression, be aware of the PixelFormat. Some compression types will result in no compression when used with an incompatible PixelFormat. See the TiffCompression enumeration for more information.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.IptcTags">
            <summary>Gets or sets IPTC Metadata that will be saved with the image.</summary>
            <remarks>Setting this property to an IptcCollection allows IPTC tags to be added or inserted into a new TIFF image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.JpegQuality">
            <summary>Gets or sets the quality level used when saving the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.PhotoshopResources">
            <summary>Gets or sets Photoshop resources to be saved with the image.</summary>
            <remarks>Photoshop saves information to a specific TIFF Tag. This information can be parsed with the  PhotoshopResourceParser. When PhotoshopResources and IptcTags are set to a value other than null, IptcData will be added to the PhotoshopResource when saved.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.SaveRichTiffIptc">
            <summary>Gets or sets a value indicating that IPTC data will be stored in the TIFFTAG_RICHTIFFIPTC Tag rather than the TIFFTAG_PHOTOSHOP tag.</summary>
            <remarks>Some readers support reading IPTC only in the RICHTIFFIPTC TiffTag. By default, IPTC data is saved as a photoshop tag.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.StripSize">
            <summary>Gets or sets the strip size used when saving the image.</summary>
            <remarks>    The strip size is the number of image rows saved as a     single strip in the TIFF. The default value is -1, which will     automatically calculate a strip size equal to about 8Kb of     uncompressed data. For higher compression, it often makes sense     to increase this number.     If the StripSize is greater than the image height, the     actual strip size will equal the image height.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TiffTags">
            <summary>Gets or sets a collection of TIFF Tags that will be encoded with the image when writing.</summary>
            <remarks>    Not all TIFF Tags are supported. See TIFF Tags for a list of supported tags.     Some standard tags included in this list would be dangerous to     modify and will be ignored if an attempt is made to add them.     Those exceptions include:     IMAGEWIDTH     IMAGELENGTH     BITSPERSAMPLE     COMPRESSION     PHOTOMETRIC     STRIPOFFSETS     SAMPLESPERPIXEL     ROWSPERSTRIP     STRIPBYTECOUNTS     PLANARCONFIG     JPEGTABLES     JPEGPROC     JPEGIFOFFSET     JPEGIFBYTECOUNT     JPEGRESTARTINTERVAL     JPEGLOSSLESSPREDICTORS     JPEGPOINTTRANSFORM     JPEGQTABLES     JPEGDCTABLES     JPEGACTABLES     YCBCRCOEFFICIENTS     YCBCRSUBSAMPLING     YCBCRPOSITIONING     For more comprehensive TIFF Tag handling, see the          TiffFile class in the Atalasoft.dotImage     assembly.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.TileSize">
            <summary>Gets or sets the size of tiles that are saved when  WriteTiled is true.</summary>
            <remarks>The size of tiles that are saved when  WriteTiled is true. The default value is 256, 256.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.UseLzwPredictor">
            <summary>Gets or sets a value indicating LZW predictor.</summary>
            <remarks>When this value it true and image uses LZW compression, images are generally compressed more.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.UseOldJpegCompression">
            <summary>When true, JPEG compression will generate old style JPEG in TIFF compression (compression value 6).</summary>
            <remarks>USE WITH CAUTION!!</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteImageColorProfile">
            <summary>Controls how the TiffEncoder writes color profiles.</summary>
            <remarks>ColorProfile objects are not written when the DotImage license is Photo.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.WriteTiled">
            <summary>Gets or sets a value that when true, will cause TIFF images to be encoded tiled.</summary>
            <remarks>Tiled TIFF images are useful when the image is large, and the reader is capable of reading individual tiles. See  TileSize for setting the tile width and length.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TiffEncoder.Xmp">
            <summary>Gets or sets XMP data to encode with the image.</summary>
            <remarks>This property can be used to save XMP Annotation data created with DotAnnotate, our full featured Annotations toolkit for the Microsoft .NET Framework.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaDecoder">
            <summary>    An ImageDecoder used to read Tla images from a     System.IO.Stream.</summary>
            <remarks>    By default, when opening a Tla image using the AtalaImage     or Workspace objects, this decoder will automatically be     selected from the RegisteredDecoders and does not have to be     explicitly set.     A TLA image can save images in an encrypted format. A     password needs to be supplied for opening these image     formats.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.#ctor">
            <summary>Initializes a new instance of a TlaDecoder. Creates a TlaDecoder.Initializes a new instance of a TlaDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.#ctor(System.String)">
            <summary>Initializes a new instance of a TlaDecoder specifying the password.</summary>
            <param name="password">The password to use for reading encrypted Tla images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Tla image stored in a Stream without decoding the image data.</summary>
            <returns>An ImageInfo object containing information about the image.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Tla     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <returns>Returns an AtalaImage from a Stream containing a Tla encoded image.</returns>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The ProgressEventHandler for this process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.Password">
            <summary>Gets or sets the password to use for reading encrypted Tla images.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaDecoder.SupportedImageType">
            <summary>Returns a Tla ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.TlaEncoder">
            <summary>    An ImageEncoder that will write TLA images to a     System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a TLA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.#ctor">
            <summary>Initializes a new instance of a TiffEncoder. Initializes a new instance of a TlaEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.#ctor(System.String)">
            <summary>Initializes a new instance of a TlaEncoder specifying the password to encrypt with.</summary>
            <param name="password">The password to use for reading, writing, or obtaining information on encrypted TLA images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.TlaEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Tla image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.Password">
            <summary>Gets or sets the password to use for reading, writing, or obtaining information on encrypted TLA images.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.TlaEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpDecoder">
            <summary>    An ImageDecoder used to read Wireless Bitmap (Wbmp)     images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Wbmp image using the     AtalaImage or Workspace objects, this decoder will     automatically be selected from the RegisteredDecoders and does     not have to be explicitly set.     A WBMP image is commonly used in PDA devices and is     always black and white.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.#ctor">
            <summary>Initializes a new instance of a WbmpDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Wbmp image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Wbmp     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <remarks>Returns an AtalaImage from a Stream containing a Wbmp encoded image.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WbmpDecoder.SupportedImageType">
            <summary>Returns a Wbmp ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WbmpEncoder">
            <summary>    An ImageEncoder that will write Wireless Bitmap (WBMP)     images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a WBMP image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.#ctor">
            <summary>Initializes a new instance of a WbmpEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WbmpEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Wbmp image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WbmpEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfDecoder">
            <summary>    An ImageDecoder used to read Windows Metafile (WMF)     images from a System.IO.Stream.</summary>
            <remarks>    By default, when opening a Wmf image using the AtalaImage     or Workspace objects, this decoder will automatically be     selected from the RegisteredDecoders and does not have to be     explicitly set.     Any vectorized entities saved in the Metafile will be     converted to a raster format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.#ctor">
            <summary>Initializes a new instance of a WmfDecoder. Initializes a new instance of a WmfDecoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.#ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of a WmfDecoder specifying the size of the image.</summary>
            <param name="defaultSize">The default System.Drawing.Size when reading a windows metafile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.GetImageInfo(System.IO.Stream)">
            <summary>Retreive information from a Wmf image stored in a Stream without decoding the image data.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.IsValidFormat(System.IO.Stream)">
            <summary>    Returns true if the specified Stream contains an Wmf     image.</summary>
            <param name="stream">A stream containing the encoded image data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfDecoder.Read(System.IO.Stream,Atalasoft.Imaging.ProgressEventHandler)">
            <remarks>Returns an AtalaImage from a Stream containing a Wmf encoded image.</remarks>
            <param name="stream">A stream containing the encoded image data.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.DefaultSize">
            <summary>Gets or sets the default System.Drawing.Size when reading a windows metafile.</summary>
            <remarks>Windows metafiles may or may not have dimensions associated with them. If not, then this attribute defines the size that will be used. If this value is empty, it will use information that might be stored in the file or a default of 640 x 480 pixels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfDecoder.SupportedImageType">
            <summary>Returns a Wmf ImageType enumeration value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.WmfEncoder">
            <summary>    An ImageEncoder that will write Windows Metafile (WMF)     images to a System.IO.Stream.</summary>
            <remarks>This ImageEncoder can be passed into the the AtalaImage or Workspace objects when saving to specify a WMF image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.#ctor">
            <summary>Initializes a new instance of a WmfEncoder. Initializes a new instance of a WmfEncoder.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.#ctor(System.Boolean)">
            <summary>Initializes a new instance of a WmfEncoder specifying the placeable value.</summary>
            <param name="placeable">A value indicating if an Aldus placeable metafile will be written.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.WmfEncoder.Save(System.IO.Stream,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Encode an AtalaImage as a Wmf image to a stream.</summary>
            <param name="stream">A stream that the encoded image data will be saved to.</param>
            <param name="image">The AtalaImage to encode.</param>
            <param name="progress">The progress delegate. Can be set to null (Nothing in Visual Basic).</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.ImageType">
            <summary>Returns the ImageType associated with thie Encoder Setting.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.Placeable">
            <summary>Gets or sets a value indicating if an Aldus placeable metafile will be written.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.WmfEncoder.SupportedPixelFormats">
            <summary>Returns an array of pixel formats supported by this encoder.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.CodecErrorEventHandler">
            <summary>Event handler when errors occur when reading images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.EncoderCompressionEventHandler">
            <summary>Event handler used when specifying compression in the MultiFramedImageEncoder.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.Codec.Tiff">
            <summary>A set of classes for the manipulation of Tiff files, without the need to have them loaded into memory.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectory">
            <summary>Represents a single TIFF page.</summary>
            <remarks>A TiffDirectory represents a single page in a TiffFile. It can be constructed by the TiffFile class internally, returning an object that contains all the TIFF tags with no binary image data, or it can be constructed by the developer and represent actual image data and tag information that will be saved into an existing TiffFile.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor">
            <summary>Creates a new TiffDirectory instance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new TiffDirectory from an AtalaImage</summary>
            <param name="image">The image data that the TiffDirectory will represent.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffCompression)">
            <summary>Creates a new TiffDirectory using the specified compression.</summary>
            <param name="image">The image data that the TiffDirectory will represent.</param>
            <param name="compression">The compression to use when the image data is encoded</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffEncoder)">
            <summary>Creates a new TiffDirectory with the specified Tiff Encoder.</summary>
            <param name="image">The image data that the TiffDirectory will represent.</param>
            <param name="tiff">The encoding settings to use when the image data is encoded</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Dispose">
            <summary>Disposes the TiffDirectory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Dispose">
            <summary>Disposes the TiffDirectory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Dispose(System.Boolean)">
            <summary>Disposes the TiffDirectory.</summary>
            <param name="disposing">Indicates whether or not the object is being disposed via the Dispose method (true) or the finalize method (false)</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Finalize">
            <summary>Finalizes the TiffDirectory</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
            <summary>Fires the Error event</summary>
            <param name="e">A CodecErrorEventArgs object specifying the error</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.AllowVitalTagChanges">
            <summary>Sets or gets a flag determining if changes should be allowed in vital TIFF tags.</summary>
            <remarks>    When certain tags are modified indiscriminantly, it is     possible to permanently damage a TIFF file. In dotImage 5.0 and     earlier, it was not possible to modify these tags as doing so     was considered an error.     In the 6.0 and above, these tags are now accessible. The     list of vital tags includes:     Strip Byte Counts, Strip Offsets, Tile Byte Counts, Tile     Offsets, Bits Per Sample, Rows Per Strip</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.ExifTags">
            <summary>Gets or sets a collection of EXIF Tags that will be saved with the image.</summary>
            <remarks>See ExifParser for obtaining EXIF Tags from a TIFF (or JPEG) image. When this property is set, the subsequent  Save will store the EXIF information contained within this property to the file.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.Tags">
            <summary>Gets the collection of TiffTag objects associated with the image.</summary>
            <remarks>    WARNING!!!     TIFF Tags can be edited, added, and removed using this     collection property. However the developer is expected to have     full understanding of the TIFF specification. Editing tags in     ways that are not supported by the TIFF specification can     create a corrupt file.     For example, changing the ImageWidth, ImageHeight,     Compression, Photometric, and others to an unexpected value     will result in a corrupt TIFF file.     When reading TIFF Tags, the TiffFile stream must remain     open to read some tags that are populated only when accessing     the Data property.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Codec.Tiff.TiffDirectory.CodecError">
            <summary>This event is raised an a non critical error exists when reading a TIFF File.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection">
            <summary>For use as part of a TiffFile. Holds the collection of images that make up the pages in a TIFF.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.#ctor">
            <summary>Creates a new TiffDirectoryCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary>Adds a  TiffDirectory to the collection.</summary>
            <returns>The index the TiffDirectory was added at.</returns>
            <param name="value">The TiffDirectory to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Contains(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary>Checks for the Existance of an entry in the collection.</summary>
            <returns>True if the object exists in the collection, false otherwise.</returns>
            <param name="value">The  TiffDirectory to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.CopyTo(Atalasoft.Imaging.Codec.Tiff.TiffDirectory[],System.Int32)">
            <summary>Copies an entry of the collection.</summary>
            <param name="value">The  TiffDirectory to copy to.</param>
            <param name="index">The index of the entry in the collection to copy.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.IndexOf(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary>Searches for the specified  TiffDirectory and returns the zero-based index of the first occurrence within the entire collection.</summary>
            <returns>The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.</returns>
            <param name="value">The TiffDirectory to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary>Adds a  TiffDirectory at a specified index to the collection.</summary>
            <param name="index">The zero-based index to add the TiffDirectory at.</param>
            <param name="value">The TiffDirectory to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Remove(Atalasoft.Imaging.Codec.Tiff.TiffDirectory)">
            <summary>Removes a  TiffDirectory from the collection.</summary>
            <param name="value">The TiffDirectory to remove.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Swap(System.Int32,System.Int32)">
            <summary>Swaps two entries in the collection.</summary>
            <param name="m">The zero-based index of the first  TiffDirectory to swap.</param>
            <param name="n">The zero-based index of the second TiffDirectory to swap.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDirectoryCollection.Item(System.Int32)">
            <summary>Gets the  TiffDirectory at the specified index.</summary>
            <param name="index">The zero-based index to get the entry from.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffDocument">
            <summary>    The TiffDocument class is used to represent an entire     TIFF file in a way that makes it convenient to manipulate the     pages of the document. Pages can be reordered, inserted, added,     and removed. The final document can then be saved to a new     file. TiffDocument keeps as little in memory at one time as     possible.     When saving, TiffDocument does not recompress image     data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor">
            <summary>Constructs a new TiffDocument object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor">
            <summary>Constructs a new empty TiffDocument.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.IO.Stream)">
            <summary>Constructs a new TiffDocument class, populated the Pages property with the contents of the given stream.</summary>
            <remarks>The constructor will throw an exception if the stream is null or does not represent a TIFF stream.</remarks>
            <param name="stream">A seekable stream whose contents is a TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.#ctor(System.String)">
            <summary>Constructs a new TiffDocument class, populated the Pages property with the contents of the given file.</summary>
            <remarks>The constructor will throw an exception if the file is null or does not represent a TIFF.</remarks>
            <param name="filename">A path to a TIFF file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine">
            <summary>Combines a two or more TIFF files or streams into a single output stream.</summary>
            <remarks>Each of these methods use a params array as the final argument so that they can be invoked with or without the array object (ie, Combine(outputStream, file1, file2, file2)).</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.IO.Stream,System.IO.Stream[])">
            <summary>Combines a set of TIFF Streams into a single output TIFF Stream</summary>
            <param name="output">The output stream that will contain the combined TIFF.</param>
            <param name="sources">An array of input streams that will be combined into a single output.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.IO.Stream,System.String[])">
            <summary>Combines a set of TIFF files into a single output TIFF Stream</summary>
            <param name="output">The output stream that will contain the combined TIFF.</param>
            <param name="sourceFiles">An array of input file names that will be combined into a single output.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Combine(System.String,System.String[])">
            <summary>Combines a set of TIFF files into a single output TIFF file</summary>
            <param name="outputFile">The output file that will contain the combined TIFF.</param>
            <param name="sourceFiles">An array of input file names that will be combined into a single output.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Save">
            <summary>Saves the contents of this TiffDocument into a new stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Save(System.IO.Stream)">
            <summary>Saves every TiffPage within the TiffDocument object into a new TIFF file.</summary>
            <param name="outputStream">The stream where the file will be saved. The outputStream object may not be the source of one or more of the TiffDocument's TiffPage objects. This condition will cause TiffDocument to throw an ArgumentException. The outputStream may not be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Save(System.String)">
            <summary>Saves every TiffPage within the TiffDocument object into a new TIFF file.</summary>
            <param name="fileName">The non-null path to the file to be saved. The Save method to a path does not check to see if the output path is the same as any of the input paths. If it is, the results will be unpredictable and most likely will result in a damaged TIFF file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffDocument.ValidOutputStream(System.IO.Stream)">
            <summary>Test a stream to see if it can be used as an output stream for this TiffDocument.</summary>
            <returns>Returns true if the stream is different from the streams used by each of the TiffPage objects contained within this TiffDocument.</returns>
            <param name="stm">The stream to write to.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffDocument.Pages">
            <summary>A collection of TiffPage objects that represent the contents of the Tiff file.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffFile">
            <summary>TiffFile is a class that allows access to a TIFF image file directly, without loading the image into memory. It represents a single TIFF document which can contain multiple pages.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.#ctor">
            <summary>Creates a new TiffFile instance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.GetPageCount(System.IO.Stream)">
            <summary>Returns the number of pages in a TIFF</summary>
            <param name="source">Encoded image stream</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.OnError(Atalasoft.Imaging.Codec.CodecErrorEventArgs)">
            <summary>Fires the Error event</summary>
            <param name="e">A CodecErrorEventArgs object specifying the error</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read">
            <summary>Open an existing TIFF Document, parsing the tags for each directory.Read will populate the Tags and TiffIfdCollection.</summary>
            <remarks>    The same stream or path cannot be used to read and save a     TiffFile object. To overwrite an existing     TIFF, save the TIFF into a new file, then overwrite the     original.     The stream must remain open while accessing TIFF Tags and     managing IFD's.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read(System.IO.Stream,System.Int32)">
            <summary>Reads directories and tags for a specific page.</summary>
            <param name="stream">Encoded image stream</param>
            <param name="frameIndex">Frame index to read</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Read(System.IO.Stream)">
            <summary>Reads directories and tags for all pages.</summary>
            <param name="stream">Encoded image stream</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save">
            <summary>Saves the TiffFile.</summary>
            <remarks>The same stream or path cannot be used to open and save a TiffFile object. To overwrite an existing TIFF, save the TIFF into a new file, then overwrite the original.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.IO.Stream)">
            <summary>Saves the TiffFile to a Stream.</summary>
            <remarks>The target stream must be different from the stream or filepath that was used to open the TiffFile.</remarks>
            <param name="target">The Stream to save the TiffFile to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffFile.Save(System.String)">
            <summary>Saves the TiffFile to a file path.</summary>
            <remarks>The target stream must be different from the stream or filepath that was used to open the TiffFile.</remarks>
            <param name="path">The file path to save the TiffFile to.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffFile.Images">
            <summary>Gets the image collection that is part of this TiffFile.</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Codec.Tiff.TiffFile.CodecError">
            <summary>This event is used by the TiffFile object to report errors that occur when parsing a TiffDirectory.</summary>
            <remarks>The Atalasoft Tiff decoder is aggressive in suppressing errors encountered while parsing damaged or somewhat malformed Tiff files. Normally these errors are not reported. This event provides a mechanism for an application to record, report, or abort in the event of an error.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffPage">
            <summary>An object that represents a page within a TiffDocument.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor">
            <summary>Constructs a new TiffPage object from an AtalaImage</summary>
            <remarks>    New TiffPage objects can't be constructed from streams or     files. To get a single page from an existing stream, create a     TiffDocument object from that stream and get the appropriate     TiffPage from the document's Pages property.     Internally, this creates a MemoryStream representing a     new single page TIFF file with the given image. It will be     compressed with the supplied compression scheme (or default if     none supplied).     After the TiffPage object is constructed, it no longer     needs the original image and the client code is free to dispose     it.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Constructs a new TiffPage object from the given image.</summary>
            <remarks>Non-destructive compression for the image will be automatically selected.</remarks>
            <param name="image">An AtalaImage object to use for a TiffPage</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPage.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.Codec.TiffCompression)">
            <summary>Constructs a new TiffPage object from the given image, using the specified compression.</summary>
            <param name="image">An AtalaImage object to use for a TiffPage</param>
            <param name="compression">Compression to use for the image</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Frame">
            <summary>Gets the original frame number of this page within its stream</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.PixelFormat">
            <summary>Returns the PixelFormat of the page.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Resolution">
            <summary>Returns the resolution of the page.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Size">
            <summary>Returns the dimensions of the page in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPage.Stream">
            <summary>Returns the stream from which the TiffPage originally came.</summary>
            <remarks>Modifying the stream object (or the contents of the stream) will create unpredictable results.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection">
            <summary>A collection object used to hold a set of TiffPage objects.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.#ctor">
            <summary>Constructs a new TiffPageCollection</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Add">
            <summary>Adds a new page to the end</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary>Adds the TiffPage to the end of this collection.</summary>
            <param name="value">A TiffPage to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Add(Atalasoft.Imaging.Codec.Tiff.TiffPageCollection)">
            <summary>Adds the entire contents of the TiffPageCollection to the end of this collection.</summary>
            <param name="other">A collection of TiffPage objects to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Contains(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary>Indicates if a TiffPage is contained in this collection</summary>
            <returns>True if the TiffPage is contained in this collection, false otherwise.</returns>
            <param name="value">The TiffPage to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.CopyTo(Atalasoft.Imaging.Codec.Tiff.TiffPage[],System.Int32)">
            <summary>Copies the contents of this collection into a given array.</summary>
            <param name="array">An non-null array of TiffPage objects</param>
            <param name="index">The index in the array where the collection elements will be put</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.IndexOf(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary>Returns the index of a given TiffPage object.</summary>
            <returns>An integer &gt;= 0 if the TiffPage is in this collection, -1 otherwise.</returns>
            <param name="value">The TiffPage to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Insert(System.Int32,Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary>Inserts a TiffPage into this collection at the given location.</summary>
            <param name="index">The location where the given TiffPage will be inserted.</param>
            <param name="value">The TiffPage object to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Remove(Atalasoft.Imaging.Codec.Tiff.TiffPage)">
            <summary>Removes a given TiffPage from the collection.</summary>
            <param name="value">The TiffPage to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Codec.Tiff.TiffPageCollection.Item(System.Int32)">
            <summary>Sets or gets the nth item in this collection.</summary>
            <param name="index">The index of the item to get or set.</param>
        </member>
        <member name="N:Atalasoft.Imaging.ColorManagement">
            <summary>Contains classes that are used for converting colorspaces and color matching images to a device.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorSpace">
            <summary>A value that indicates the color space in which profile data is defined.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.Platform">
            <summary>Indicates the platform that the profile is intended for.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileClass">
            <summary>Indicates the profile class.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Monitor">
            <summary>Display Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Printer">
            <summary>Output Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Scanner">
            <summary>Input Device Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Link">
            <summary>Device Link Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Abstract">
            <summary>Abstract Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.ColorSpace">
            <summary>Color Space Conversion Profile</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileClass.Named">
            <summary>Named Color Profile</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ProfileFlags">
            <summary>Bit flags containing hints that the CMM uses to interpret the profile data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.EmbeddedProfile">
            <summary>The profile is embedded in a bitmap file.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.ProfileFlags.DependentOnData">
            <summary>The profile can't be used independently of the embedded color data. Used for profiles that are embedded in bitmap files</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.RenderingIntent">
            <summary>Indicates different methods to create a color rendering as defined by the International Color Consortium (ICC).</summary>
            <remarks>See MSDN for more information on rendering intents.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Pictures">
            <summary>Known as perceptual intent in the ICC specification, causes the full gamut to be compressed or expanded to full the gamut of the destination device. Most suitable for photographic images and is usually the default intent.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Proof">
            <summary>Known as the colorimetric intent in the ICC specification, causes colors that fall outside the range of the output device to be set to the nearest color while leaving the other colors unchanged. Does not preserve the white point and is commonly used for proofing printed material.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Graphics">
            <summary>Known as the Saturation intent in the ICC specification, it preserves the saturation of colors as the expense of hue and lightness. Commonly used for business graphics.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ColorManagement.RenderingIntent.Match">
            <summary>Known as the absolute colorimetric intent in the ICC specification, causes colors that fall outside the range of the output device to be set to the nearest color while leaving the other colors unchanged. Preserves the white point.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorProfile">
            <summary>    A color profile that is used for translating     colors.</summary>
            <remarks>    Currently, dotImage will read and embed a color profile     into a JPEG, TIFF, or PNG image. The profile is used when     converting to different color spaces such as CMYK to RGB and     RGB to CMYK.     See www.color.org for     a detailed explanation of the ICC and color profiles.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor">
            <summary>Initializes a new instance of ColorProfile.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.Byte[])">
            <summary>    Initializes a new instance of ColorProfile specifying a     byte array containing the profile memory.</summary>
            <param name="data">The bytes that contain the color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.IntPtr,System.Int32)">
            <summary>    Initializes a new instance of ColorProfile specifying a     pointer to the profile memory and the size of this     memory.</summary>
            <param name="mempointer">A pointer to the memory containing a color profile.</param>
            <param name="size">The size of the memory pointer in bytes.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.IO.Stream)">
            <summary>    Initializes a new instance of ColorProfile specifying a     stream containing the profile memory.</summary>
            <param name="stream">A stream containing a color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.#ctor(System.String)">
            <summary>    Initializes a new instance of ColorProfile specifying the     filename containing a color profile.</summary>
            <param name="fileName">The file name of the color profile (usually with the ICM or ICC extension).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Dispose">
            <summary>Free unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Finalize">
            <summary>Finalizes the ColorProfile object</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded">
            <summary>Returns a ColorProfile embedded within an image.</summary>
            <returns>A ColorProfile embedded within an image.</returns>
            <remarks>Can be a PNG, TIFF, or JPEG image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.String)">
            <summary>Returns a ColorProfile embedded within an image given the image file name.</summary>
            <returns>A ColorProfile embedded within an image.</returns>
            <param name="fileName">The filename of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromEmbedded(System.IO.Stream)">
            <summary>Returns a ColorProfile embedded within an image given the image stream.</summary>
            <returns>A ColorProfile embedded within an image.</returns>
            <param name="imageStream">The encoded image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.FromSrgb">
            <summary>Returns the standard sRGB Color Profile.</summary>
            <returns>The standard sRGB Color Profile.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileBytes">
            <summary>Returns the number of bytes that this ColorProfile occupies.</summary>
            <returns>The number of bytes that this ColorProfile occupies.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileDirectory">
            <summary>Returns the path of the color profile directory.</summary>
            <returns>The path of the color profile directory.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromGraphics(System.Drawing.Graphics)">
            <summary>Returns the color profile assigned to a specified Graphics object.</summary>
            <returns>The color profile assigned to a specified Graphics object.</returns>
            <param name="graphics">A graphics object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetProfileFromScreen">
            <summary>Returns the default color profile assigned to the screen.</summary>
            <returns>The default color profile assigned to the screen.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.GetScreenProfileName">
            <summary>Returns the name of the color profile associated with the current display.</summary>
            <returns>The name of the color profile associated with the current display.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorProfile.Save(System.String)">
            <summary>Save this ColorProfile to a file.</summary>
            <param name="fileName">The filename of the colorprofile to save.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Class">
            <summary>Gets the profile class.</summary>
            <remarks>The profile class indicates a type of profile. For example Input, Display, Color Space Conversion, etc.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.CmmType">
            <summary>Gets the identification number of the CMM that is used in the profile. Identification numbers are registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ColorSpace">
            <summary>Gets a value that indicates the color space in which the profile data is defined.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.ConnectionColorSpace">
            <summary>Gets a value that indicates the color space in which the profile connection space (PCS) is defined.</summary>
            <remarks>Can be either XYZ or Lab.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Copyright">
            <summary>Gets the copyright information stored within the color profile.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Creator">
            <summary>Gets a signature of the software that created the profile. Signatures are registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Description">
            <summary>Gets the description value stored within the color profile.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Flags">
            <summary>Gets bit flags containing hints that the CMM uses to interpret the profile data.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Manufacturer">
            <summary>    Gets the identification number of the device profile     manufacturer. All manufacturer identification numbers are     registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Model">
            <summary>Gets the device manufacturer's device model number. All model identification numbers are registered with the ICC.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Platform">
            <summary>Gets the primary platform for which the profile was created.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.RenderingIntent">
            <summary>Gets the profile rendering intent.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorProfile.Version">
            <summary>Gets the version number of this color profile.</summary>
            <remarks>    The string returned is in the format of "0.0.0" where the     first number if the major version, the second is the minor     version, and the last is the bug fix version.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.ColorTransform">
            <summary>    Contains a color transform object and methods to convert     from one colorspace to another using a ColorProfile.</summary>
            <remarks>This class can be used to translate the colorspace of images or colors. It is used by the controls to view CMYK images and when color management is enabled. See Color Management in WinControls for more information.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor">
            <summary>Initializes a new instance of ColorTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Initializes a new instance of ColorTransform specifying a source and destination ColorProfile.</summary>
            <param name="source">The source color profile.</param>
            <param name="dest">The destination color profile.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary>Initializes a new instance of ColorTransform specifying a source,. destination, and target ColorProfile and the rendering intents of the translation.</summary>
            <remarks>This constructor is used for proofing images.</remarks>
            <param name="source">The source color profile.</param>
            <param name="dest">The destination color profile.</param>
            <param name="target">The target output device color profile.</param>
            <param name="displayIntent">The rendering intent to use for the display.</param>
            <param name="proofIntent">The rendering intent to use for the target device.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.#ctor(Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.ColorProfile,Atalasoft.Imaging.ColorManagement.RenderingIntent)">
            <summary>Initializes a new instance of ColorTransform specifying a source and destination ColorProfile and the rendering intent of the translation.</summary>
            <param name="source">The source color profile.</param>
            <param name="dest">The destination color profile.</param>
            <param name="renderingIntent">The rendering intent of the translation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColors(Atalasoft.Imaging.ColorManagement.ColorType,Atalasoft.Imaging.ColorManagement.ColorType,System.Drawing.Color[])">
            <summary>This method converts an array of colors using this ColorTransform.</summary>
            <returns>An array of Colors.</returns>
            <param name="inputColorType">The ColorType of the input colors.</param>
            <param name="outputColorType">The ColorType of the output colors.</param>
            <param name="inputColors">A parameterr array of color values.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.ConvertColorSpace(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <summary>Returns a new image with a translated colorspace.</summary>
            <returns>A new image with a translated colorspace.</returns>
            <param name="image">The image to translate.</param>
            <param name="destPixelFormat">The desired PixelFormat of the returned image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ColorManagement.ColorTransform.Dispose">
            <summary>Clean up unmanaged resources.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ColorManagement.ColorTransform.BlackPointCompensation">
            <summary>Sets or gets a flag indicating whether or not black point compensation will be used</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ColorManagement.InvalidColorProfileException">
            <summary>This exception fires when the ColorProfiles used for a ColorTransform are invalid.</summary>
            <remarks>This exception usually means that the appropriate tag for the desired conversion doesn't exist in the color profile.</remarks>
        </member>
        <member name="N:Atalasoft.Imaging.Drawing">
            <summary>Contains classes that will draw primitives such as lines, circles, and text onto an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Alignment">
            <summary>Specifies the line position.</summary>
            <remarks>The alignment will is ignored and always centered with DrawLine, DrawLines, and DrawPolygon.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Center">
            <summary>Center the line on the region.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Inset">
            <summary>Draw the line inside the region.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Alignment.Outset">
            <summary>Draw the line outside the region.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.CornerJoin">
            <summary>Corner style used where lines join.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Miter">
            <summary>Joins are mitred.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Bevel">
            <summary>Joins are beveled.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.CornerJoin.Round">
            <summary>Joins are round.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.EndCap">
            <summary>Drawing style for the end of lines.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Flat">
            <summary>End caps are flat.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Round">
            <summary>End caps are round.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.EndCap.Square">
            <summary>End caps are square.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.FontQuality">
            <summary>Font quality style when using the  DrawText method.</summary>
            <remarks>    The following situations do not support ClearType antialiasing:                       Text is rendered on a printer.         Display set for 256 colors or less.         Text is rendered to a terminal server client.         The font is not a TrueType font or an OpenType font         with TrueType outlines. For example, the following do not         support ClearType antialiasing: Type 1 fonts, Postscript         OpenType fonts without TrueType outlines, bitmap fonts,         vector fonts, and device fonts.         The font has tuned embedded bitmaps, for any font         sizes that contain the embedded bitmaps. For example, this         occurs commonly in East Asian fonts.     </remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Default">
            <summary>Appearance of the font does not matter. System settings will determine its quality.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Draft">
            <summary>Appearance of the font is less important than when Proof is used. For raster fonts, scaling is enabled, which means that more font sizes are available, but the quality may be lower. Bold, italic, underline, and strikeout fonts are synthesized if necessary.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Proof">
            <summary>Character quality of the font is more important than exact matching of the logical-font attributes. For raster fonts, scaling is disabled and the font closest in size is chosen.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.NonAntialiased">
            <summary>Font is never antialiased.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.Antialiased">
            <summary>Font is always antialiased if the font supports it and the size of the font is not too small or too large.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.FontQuality.ClearType">
            <summary>If set, text is rendered (when possible) using ClearType antialiasing method. Windows XP or above is requred.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Hatch">
            <summary>The style of Hatch to use with a HatchedFill.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Cross">
            <summary>Horizontal and vertical cross-hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalCross">
            <summary>45-degree crosshatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalDown">
            <summary>A 45-degree downward, left-to-right hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.DiagonalUp">
            <summary>A 45-degree upward, left-to-right hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Horizontal">
            <summary>Horizontal hatch</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.Hatch.Vertical">
            <summary>Vertical hatch</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.LineStyle">
            <summary>The type of line to draw.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Solid">
            <summary>The pen is solid.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dash">
            <summary>The pen is dashed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Dot">
            <summary>The pen is dotted.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDot">
            <summary>The pen has alternating dashes and dots.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.DashDotDot">
            <summary>The pen has alternating dashes and double dots.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.LineStyle.Custom">
            <summary>Allows for a custom dash/dot combination.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextAlignment">
            <summary>The horizontal alignment of the text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Left">
            <summary>Left aligned text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Center">
            <summary>Centered text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Right">
            <summary>Right aligned text.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Drawing.TextAlignment.Justify">
            <summary>Justified text.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.AtalaPen">
            <summary>    The AtalaPen is used to define a line or border used when     drawing primitives onto a Canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor">
            <summary>Creates an AtalaPen object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor">
            <summary>    Initializes a new instance of the AtalaPen class with the     object defaults:     Width = 1     EndCap = EndCap.Round     CornerJoin = CornerJoin.Miter     LineStyle = LineStyle.Solid     Fill = SolidFill(Color.Black)     Alignment = Alignment.Center</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color)">
            <summary>    Initializes a new instance of the AtalaPen class with the     specified color. Using a constructor that specifies the color     implies a fill type of solid</summary>
            <param name="color">The color of the pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32)">
            <summary>    Initializes a new instance of the AtalaPen class with a     specified color and width.</summary>
            <param name="color">The color of the fill.</param>
            <param name="width">The width of the pen in pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary>    Initializes a new instance of the AtalaPen class with a     specified color, width, and line style.</summary>
            <param name="color">The color of the fill.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary>    Initializes a new instance of the AtalaPen class with a     specified color, width, line style, end cap, and corner     join.</summary>
            <param name="color">The color of the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(System.Drawing.Color,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
            <summary>Creates a new instance of AtalaPen specifying color, width, line style, end cap, corner join and alignment.</summary>
            <param name="color">The color of the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
            <param name="alignment">The pen alignment.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill)">
            <summary>    Initializes a new instance of the AtalaPen class with a     specified fill.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32)">
            <summary>    Initializes a new instance of the AtalaPen class with a     specified fill and width.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle)">
            <summary>    Initializes a new instance of the AtalaPen class with a     specified fill, width, and line style.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin)">
            <summary>    Initializes a new instance of the AtalaPen class with a     specified fill, width, line style, end cap, and corner     join.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.#ctor(Atalasoft.Imaging.Drawing.Fill,System.Int32,Atalasoft.Imaging.Drawing.LineStyle,Atalasoft.Imaging.Drawing.EndCap,Atalasoft.Imaging.Drawing.CornerJoin,Atalasoft.Imaging.Drawing.Alignment)">
            <summary>Creates a new instance of AtalaPen specifying the fill, width, line style, end cap, corner join and alignment.</summary>
            <param name="fill">The Fill defining the fill characteristics of the line drawn with the pen.</param>
            <param name="width">The width of the pen in pixels.</param>
            <param name="lineStyle">The style of the line.</param>
            <param name="endCap">The pen EndCap used when drawing.</param>
            <param name="cornerJoin">The style of corners used for this pen.</param>
            <param name="alignment">The pen alignment.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.AtalaPen.Clone">
            <summary>Create a copy of this AtalaPen.</summary>
            <returns>Pen object</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Alignment">
            <summary>Gets or sets a value indicating the line positioning relative to the coordinates.</summary>
            <remarks>The property is ignored when drawing a line, lines, or polygon.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Color">
            <summary>Gets or sets the color of the pen.</summary>
            <remarks>This property references the Fill.Color property</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CornerJoin">
            <summary>Gets or sets the style of corners used for this pen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.CustomDashPattern">
            <summary>Gets or sets an array of int's indicating the dash pattern when the LineStyle is set to Custom.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.EndCap">
            <summary>Gets or sets the pen EndCap used when drawing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Fill">
            <summary>Gets or sets the Fill used when drawing with this pen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.LineStyle">
            <summary>Gets or sets the type of line drawn with this pen.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.AtalaPen.Width">
            <summary>Gets or sets the width of the pen in pixels.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Canvas">
            <summary>This class is used to draw primitives and text onto an AtalaImage, Bitmap, or Graphics object.</summary>
            <remarks>    To use the canvas class, create an instance specifying     the object that will be drawn on in the constructor. If you're     using the WorkspaceViewer WinControl, you will have to invoke     ClearCache to show the changes to the image.     The drawing class has some advantages over using the     Graphics object in GDI+. You may draw directly onto grayscale,     colormapped, and 1-bit document images. In addition, you can     choose the border color and line type with an     AtalaPen, and if the drawing entity supports     it, a Fill to use to fill the inside of the     entity. The various Fill objects can be used for solid,     hatched, gradient, or textured filled areas for both the border     and inside of the entity.     A smoothing level can be specified in the canvas object     which can be configured to enable antialising of the drawn     objects.     In addition, when drawing onto a graphics object, you may     specify an inverted pen, using the XOR algorithm when drawing     any entity onto the device. This property is ignored     </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor">
            <summary>Initializes a new instance of a Canvas object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of a Canvas object specifying an Atalasoft.Imaging.AtalaImage to draw on.</summary>
            <param name="image">The image to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.#ctor(System.Drawing.Graphics)">
            <summary>Initializes a new instance of a Canvas object specifying a System.Drawing.Graphics to draw on.</summary>
            <param name="graphics">The device to draw on.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize">
            <summary>Calculates the size of the text without actually drawing it.</summary>
            <returns>Returns the size of the text without actually drawing it.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Size,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Calculates the size of bound text without actually drawing it.</summary>
            <returns>Returns the size of bound text without actually drawing it.</returns>
            <param name="text">The text string to evaluate.</param>
            <param name="boundSize">The size of the bound</param>
            <param name="font">The text font.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Calculates the pixel size required to draw text using a specific font and text format.</summary>
            <returns>Returns the size of single line text without actually drawing it.</returns>
            <param name="text">The text string to evaluate.</param>
            <param name="font">The text font.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.CalculateTextSize(System.String,System.Drawing.Font)">
            <summary>Calculates the pixel size required to draw text using a specific font.</summary>
            <returns>The size in pixel.</returns>
            <param name="text">The text to draw.</param>
            <param name="font">The font used for the text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse">
            <summary>Draws an ellipse onto this canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws an ellipse onto this canvas specifying the border pen and Fill.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws an ellipse onto this canvas specifying the border pen.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawEllipse(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws an ellipse onto this canvas specifying the Fill.</summary>
            <param name="rect">The bounding rectangle of the ellipse.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLine(System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draw a line onto this canvas.</summary>
            <remarks>The line is specified from a start point to an end point and a pen to control it's color, thickness, line style, and fill style.</remarks>
            <param name="startPoint">The start point of the line in image pixel coordinates.</param>
            <param name="endPoint">The end point of the line in image pixel coordinates.</param>
            <param name="pen">The AtalaPen controling the line characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawLines(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws multiple connected lines onto this canvas.</summary>
            <remarks>The lines are specifyied with a series of points. To connect the last point with the first point see DrawPolygon.</remarks>
            <param name="points">An array of points that straight lines are drawn through.</param>
            <param name="pen">The AtalaPen controlling the line characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon">
            <summary>Draw a series of connected lines that form a closed polygon.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a series of connected lines that form a closed polygon specifying the border pen and inside fill.</summary>
            <remarks>The first and last points are connected, forming the closed polygon.</remarks>
            <param name="points">An array of points forming a polygon that straight lines are drawn through.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draw a series of connected lines that form a closed polygon specifying the border pen.</summary>
            <remarks>The first and last points are connected, forming the closed polygon.</remarks>
            <param name="points">An array of points forming a polygon that straight lines are drawn through.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawPolygon(System.Drawing.Point[],Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a series of connected lines that form a closed polygon specifying the inside fill.</summary>
            <remarks>The first and last points are connected, forming the closed polygon.</remarks>
            <param name="points">An array of points forming a polygon that straight lines are drawn through.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle">
            <summary>Draws a rectangle onto this canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a rectangle onto this canvas specifying the fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a rectangle onto this canvas specifying the border pen and fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the border pen.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen,Atalasoft.Imaging.Drawing.Fill,System.Drawing.Size)">
            <summary>Draws a rounded rectangle onto this canvas specifying the border pen and fill.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
            <param name="cornerRadius">The radius in pixels of the corners.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRectangle(System.Drawing.Rectangle,Atalasoft.Imaging.Drawing.AtalaPen)">
            <summary>Draws a rectangle onto this canvas specifying the border pen.</summary>
            <param name="rect">The position and size of the rectangle.</param>
            <param name="pen">The AtalaPen controlling the border characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawRegion(System.Drawing.Region,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draws a filled region.</summary>
            <param name="region">The region to fill.</param>
            <param name="fill">The Fill specifying the fill characteristics.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText">
            <summary>Draw a single line or multi-line text string onto this canvas.</summary>
            <returns>The actual size of the text drawn.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw a single line text string onto this canvas specifying the upper left corner position.</summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill)">
            <summary>Draw a single line text string onto this canvas specifying the upper left corner position and a solid background color.</summary>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="backColor">The background color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw a single line text string onto this canvas specifying the upper left corner position and text formatting.</summary>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Point,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw a single line text string onto this canvas specifying the upper left corner position and a solid background color.</summary>
            <param name="text">The text string to draw.</param>
            <param name="position">The position of the upper left corner of the text rectangle to draw.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="backColor">The background color.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill)">
            <summary>Draw multiline text onto this canvas specifying the rectangular bound area of the string.</summary>
            <remarks>    The rectangular width must be specified. Specify a value     for the rectangular height to clip the text, or 0 to prevent     clipping the text.</remarks>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle">The bounding rectangle of the text to draw. Specify 0 height to prevent clipping the text.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw multiline text onto this canvas specifying the rectangular bound area of the string and text formatting.</summary>
            <remarks>    The rectangular width must be specified. Specify a value     for the rectangular height to clip the text, or 0 to prevent     clipping the text.</remarks>
            <returns>The actual size of the text drawn.</returns>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle">The bounding rectangle of the text to draw. Specify 0 height to prevent clipping the text</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Canvas.DrawText(System.String,System.Drawing.Rectangle,System.Drawing.Font,Atalasoft.Imaging.Drawing.Fill,Atalasoft.Imaging.Drawing.SolidFill,Atalasoft.Imaging.Drawing.TextFormat)">
            <summary>Draw a single line text string onto this canvas specifying the upper left corner position and a solid background color.</summary>
            <param name="text">The text string to draw.</param>
            <param name="boundRectangle">The bounding rectangle of the text to draw. Specify 0 height to prevent clipping the text.</param>
            <param name="font">The text font.</param>
            <param name="foreColor">The text fill.</param>
            <param name="backColor">The background color.</param>
            <param name="format">The text formatting to apply.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.FontQuality">
            <summary>Gets or sets the quality for font rendering.</summary>
            <remarks>ClearType is only available on Windows XP and above.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.InvertedOnGraphics">
            <summary>Gets or sets a value indicating if entities being drawn on a graphics object will be inverted.</summary>
            <remarks>Setting this property to true will cause the pixels beneath the entity to be negated with the XOR algorithm. This is useful when drawing rubber-bands that can quickly be erased be drawing over the same location twice. The selection rectangle in the WinForm Viewport control by default draws on an inverted canvas.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Canvas.SmoothingLevel">
            <summary>Gets or sets the amount of antialiasing applied to the entity being drawn onto this canvas.</summary>
            <remarks>    Smoothing only works on continuous tone images     (grayscale, RGB, or RGBA generally) and will be ignored with     colormapped images. By default, all canvas objects start with a     smoothing level of 0. The greater the smoothing level the more     washed out the entity being drawn will appear. There is no     upper limit to the smoothing level but it must be greater than     or equal to zero.     </remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.Fill">
            <summary>    The base class which all Fill objects inherit. A Fill     contains the color of the entity being drawn.</summary>
            <remarks>The Atalasoft dotImage Fill object is equivalent to the GDI+ Brush.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.Clone">
            <summary>Returns a copy of this Fill.</summary>
            <returns>A copy of this Fill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.Fill.GetBrushHandle">
            <summary>Returns a GDI handle to the brush (for internal use only).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.Color">
            <summary>Gets or sets the color of the fill.</summary>
            <remarks>Specify the alpha value to draw with transparency onto a continuous tone image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.Fill.PaletteIndex">
            <summary>Gets or sets the palette index used for the color.</summary>
            <remarks>This is only valid when drawing onto an 8-bit image.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.HatchedFill">
            <summary>A Fill containing hatched lines.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.#ctor">
            <summary>Initializes a new instance of HatchedFill.Creates a HatchedFill object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.#ctor(Atalasoft.Imaging.Drawing.Hatch)">
            <summary>Initializes a new instance of HatchedFill with a black hatch and specified hatch style.</summary>
            <param name="style">The type of hatch.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.#ctor(Atalasoft.Imaging.Drawing.Hatch,System.Drawing.Color)">
            <summary>Initializes a new instance of HatchedFill with a specified hatch style and color.</summary>
            <param name="style">The type of hatch.</param>
            <param name="color">The hatch color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.Clone">
            <summary>Returns a copy of this HatchedFill.</summary>
            <returns>A copy of this HatchedFill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.HatchedFill.GetBrushHandle">
            <summary>Returns a GDI brush handle.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.SolidFill">
            <summary>A Fill containing a solid color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.#ctor">
            <summary>Initializes a new instance of SolidFill. Creates a SolidFill object.Initializes a new instance of SolidFill with the color black.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.#ctor(System.Drawing.Color)">
            <summary>Initializes a new instance of SolidFill with a specified color.</summary>
            <param name="color">The Fill color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.Clone">
            <summary>Returns a copy of this SolidFill.</summary>
            <returns>A copy of this SoldFill.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.SolidFill.GetBrushHandle">
            <summary>Returns a GDI brush handle.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Drawing.TextFormat">
            <summary>    Contains extended properties for use with drawing text     onto a Canvas.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor">
            <summary>Initializes a new instance of TextFormat.Creates a TextFormat object.Initializes a new instance of TextFormat with default settings.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment)">
            <summary>Initializes a new instance of TextFormat specifying the horizontal alignment.</summary>
            <param name="alignment">The horizontal alignment of the drawn text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double)">
            <summary>Initializes a new instance of TextFormat specifying the horizontal alignment and angle.</summary>
            <param name="alignment">The horizontal alignment of the drawn text.</param>
            <param name="angle">The angle in degrees of the drawn text.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Drawing.TextFormat.#ctor(Atalasoft.Imaging.Drawing.TextAlignment,System.Double,System.Int32)">
            <summary>Initializes a new instance of TextFormat specifying the horizontal alignment, angle, and inter-character spacing.</summary>
            <param name="alignment">The horizontal alignment of the drawn text.</param>
            <param name="angle">The angle in degrees of the drawn text.</param>
            <param name="interCharacterSpace">Number of additional pixels to add between characters.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Alignment">
            <summary>Gets or sets the horizontal alignment of the text to draw.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.Angle">
            <summary>Gets or sets the angle in degrees of the text to draw.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.CharacterWidth">
            <summary>Gets or sets the width of the characters</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Drawing.TextFormat.InterCharacterSpace">
            <summary>Gets or sets the number of additional pixels to add between characters.</summary>
            <remarks>This value may be negative to reduce the intercharacter spacing.</remarks>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing">
            <summary>Contains classes and namespaces that manipulate the image pixels via filters, transforms, and other effects.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable">
            <summary>This interface when applied to an ImageCommand allowing the command to have properties that the algorithm will automatically determine based on image metrics.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.AutoPropertyConfigurationEnabled">
            <summary>Gets or sets a property that when true will automatically determine property values as listed in ProptertiesToAutoConfigure based on image metrics</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.IPropertiesAutoConfigurable.PropertiesToAutoConfigure">
            <summary>Gets or sets a collection of property names that will be auto configured when applying the command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.IThreadableCommand">
            <summary>This interface is applied to an  ImageCommand to support parallelization.</summary>
            <remarks>ImageCommand objects with this interface applied perform faster with multiple core processors and systems with multiple processors.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>Sets the image area which will be processed and also defines the bands or chunks of the image of which each will be sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>Performs the command on a specified section of the image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.IThreadableCommand.AutoThread">
            <summary>If set to true the IThreadableCommand will automatically parallelize image processing.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AlphaMergeType">
            <summary>When images are combined, the alpha channels may be merged in one of many ways as listed in this enumeration.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Replace">
            <summary>Replace the bottom alpha value with the top.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostOpaque">
            <summary>Use the higher of the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseMostTransparent">
            <summary>Use the lower of the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Add">
            <summary>Add the bottom and top values. The maximum value is 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.Subtract">
            <summary>Subtract the top value from the bottom. The minimum value is 0.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalAnd">
            <summary>Perform a bitwise logical AND on the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalOR">
            <summary>Perform a bitwise logical OR on the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.LogicalXOR">
            <summary>Perform a bitwise logical XOR on the bottom and top values.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.AlphaMergeType.UseOriginal">
            <summary>Ignore the top value.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChannelFlags">
            <summary>Bit flags used by some methods to specify which channels to work with.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel1">
            <summary>The first channel in the image. For a RGB or RGBA image this is the Blue color channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel2">
            <summary>The second channel in the image. For a RGB or RGBA image this is the Green color channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel3">
            <summary>The third channel in the image. For a RGB or RGBA image this is the Red color channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.Channel4">
            <summary>The fourth channel in the image. For a RGBA image this is the Alpha channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ChannelFlags.AllChannels">
            <summary>Specifies all channels in the image (Channel1 | Channel2 | Channel3 | Channel4).</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColorMatchMode">
            <summary>Specifies the type of colormatching to use when using  FloodFillCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Edge">
            <summary>Indicates that the colormatching will occur up to a border of the specified color.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ColorMatchMode.Surface">
            <summary>Indicates that the colormatching will occur with all contingous pixels from the starting point.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.DitheringMode">
            <summary>Specifies the dithering algorithm to use when converting an image to colormapped.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.None">
            <summary>Specifies a best fit method with no dithering.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.TwoValue">
            <summary>Specifies a simple 2-value style of dithering.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.DitheringMode.FloydSteinberg">
            <summary>    Specifies Floyd-Steinberg dithering. This method of     dithering uses error diffusion and produces the best dithered     image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.InterpolationMode">
            <summary>Specifies the interpolation to use with various image processing commands.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.None">
            <summary>No interpolation.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiLinear">
            <summary>Uses standard bi-linear interpolation.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.InterpolationMode.BiCubic">
            <summary>Slowest, but most accurate interpolation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags">
            <remarks>Lossless Transform options</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Grayscale">
            <summary>Discard the chrominance channels in standard (YCbCr encoded) JPEGs. This leaves just the luminance which gives you a grayscale JPEG.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.NoExcessMcuBlocks">
            <summary>Do not remove excess MCU blocks.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformFlags.Progressive">
            <summary>Set or remove the progressive display option.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.JpegTransformType">
            <remarks>The specific type of JPEG transform.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.None">
            <summary>No Transform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipHorizontal">
            <summary>Flip the image horizontally.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.FlipVertical">
            <summary>Flip the image vertically.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transverse">
            <summary>Transpose across upper-right to lower-left axis.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Transpose">
            <summary>Transpose across upper-leftto lower-right axis.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate90">
            <summary>Rotate the image 90 degrees.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate180">
            <summary>Rotate the image 180 degrees.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.JpegTransformType.Rotate270">
            <summary>Rotate the image 270 degrees.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.MergeOption">
            <summary>Image overlay merge options.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.FastBlend">
            <summary>Fast Blend. Uses factor parameter as opacity. (0 to 1)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AccurateBlend">
            <summary>Slower, more accurate blend. Uses factor parameter as opacity. (0 to 1)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalAnd">
            <summary>Pixels are combined with logical AND. Supports binary images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalOR">
            <summary>Pixels are combined with logical OR. Supports binary images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LogicalXOR">
            <summary>Pixels are combined with logical XOR. Supports binary images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Max">
            <summary>Output pixels is max of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Min">
            <summary>Output pixel is min of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Sum">
            <summary>Output pixel is sum of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Difference">
            <summary>Output pixel is difference of top and bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.GreaterThanFactor">
            <summary>If top pixel value &gt; factor, output top pixel value, otherwise output factor.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.LessThanFactor">
            <summary>If top pixel value &lt; factor, output top pixel value, otherwise output factor.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.AbsoluteValueOfDifference">
            <summary>Absolute value of the differnce of top and bottom pixel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Multiply">
            <summary>Multiply bottom pixel value by top pixel value and divide by 255 (top * bottom) / 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MultiplyWidthFactor">
            <summary>Multiply bottom pixel value by top pixel value and by a factor and divide by 255 (top * bottom * factor) / 255.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Screen">
            <summary>255-(((255-top)*(255-bottom)) / 255).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.PlusFactor">
            <summary>bottom = bottom + top - factor</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.MinusFactor">
            <summary>bottom = bottom - top - factor</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeAnd">
            <summary>    Performs a negative Logical AND.     This can only be used with 1-bit images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeOR">
            <summary>    Performs a negative Logical OR.     This can only be used with 1-bit images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.NegativeXOR">
            <summary>    Performs a negative Logical XOR.     This can only be used with 1-bit images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.ColorDodge">
            <summary>Color dodge</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.ColorBurn">
            <summary>Color burn</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftDodge">
            <summary>Soft Dodge</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftBurn">
            <summary>Soft Burn</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.Photoshop">
            <summary>Photoshop "overlay"</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.SoftLight">
            <summary>soft light (similar but not identical to Photoshop)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.HardLight">
            <summary>Hard light</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderReflect">
            <summary>XFader reflect</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderGlow">
            <summary>XFader glow</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderFreeze">
            <summary>XFader freeze</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.MergeOption.XFaderHeat">
            <summary>XFader heat</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode">
            <summary>Specifies the type of noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Perlin">
            <summary>Generate an image filled with Perlin noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Hugo">
            <summary>Generate an image filled with Hugo Elias's implementation of Perlin noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Gaussian">
            <summary>Specifies the type of noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.NegativeExponential">
            <summary>Generate an image using negative exponential noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Rayleigh">
            <summary>Generate an image filled with rayleigh noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.Uniform">
            <summary>Generate an image filled with uniform noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode.DimensionalSlice">
            <summary>Create a single 2D plane of Perlin noise producing a single slice through a volume of noise at a given Z offset.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMethod">
            <summary>Specifies the type of resampling method to apply when using the ResampleCommand, ResampleColormappedToRgbCommand or the Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Default">
            <summary>Uses a predefined resampling method depending on the image PixelFormat and final size. Uses Nearest Neighbor resampling for 1-bit and 8-bit colormapped images, BiLinear when increasing the size of continuous tone images. and AreaAverage when reducing continuous tone images.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.NearestNeighbor">
            <summary>Use the nearest pixel value. This is the fastest algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiLinear">
            <summary>Uses bi-linear resampling. Yields good results when enlarging images, and fairly fast.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BiCubic">
            <summary>Uses bi-cubic interpolation. Better quality then bi-linear but slower.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.AreaAverage">
            <summary>Average the pixel values when reducing image size. Will cause an exception to be thrown if increasing image size.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BoxFilter">
            <summary>BoxFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.TriangleFilter">
            <summary>TriangleFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HammingFilter">
            <summary>HammingFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.GaussianFilter">
            <summary>GaussianFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BellFilter">
            <summary>BellFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.BsplineFilter">
            <summary>BsplineFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic1Filter">
            <summary>CubicFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.Cubic2Filter">
            <summary>Cubic2Filter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.LanczosFilter">
            <summary>    Generally yields the best results for photographic images     at the expense of speed. Very similar to Photoshop's Bi-cubic     reductions.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.MitchellFilter">
            <summary>MitchellFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.SincFilter">
            <summary>SincFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HermiteFilter">
            <summary>HermiteFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.HanningFilter">
            <summary>HanningFilter resize algorithm.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.ResampleMethod.CatromFilter">
            <summary>CatromFilter resize algorithm.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand">
            <summary>Maps an image into a specified palette, creating an 8-bit colormapped image.</summary>
            <remarks>This command uses various dithering algorithms to create a colormapped image that can very closely represent a full color image. A Palette containing up to 256 colors can be applied.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor">
            <summary>Initializes a new instance of ApplyPaletteCommand.Creates an ApplyPaletteCommand object used to modify an AtalaImage Palette.Creates a new instance of ApplyPaletteCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette)">
            <summary>Initializes a new instance of ApplyPaletteCommand specifying the Palette.</summary>
            <param name="palette">The Palette to map the image to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode)">
            <summary>Initializes a new instance of ApplyPaletteCommand specifying the Palette and dithering mode.</summary>
            <param name="palette">The Palette to map the image to.</param>
            <param name="ditherMode">The dithering mode to use when mapping the image to a palette.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.#ctor(Atalasoft.Imaging.Palette,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary>Initializes a new instance of ApplyPaletteCommand specifying the palette, dithering mode, and dither error.</summary>
            <param name="palette">The palette to map the image to.</param>
            <param name="ditherMode">The dithering mode to use when mapping the image to a palette.</param>
            <param name="ditherErrorMax">The amount of dithering. (0 - 127)</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherErrorMax">
            <summary>Gets or sets the amount of dithering to apply.</summary>
            <remarks>    Valid values are between 0 and 127 with 0 being little to     no dithering and 127 the full amount of possible dithering.     Defaults to 127.     For converting a color or grayscale image to 1-bit black     and white without dithering, see the      SimpleThresholdCommand,      GlobalThresholdCommand, and      AdaptiveThresholdCommand.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.DitherMode">
            <summary>    Gets or sets the dithering mode to use when mapping the     image to a palette.</summary>
            <remarks>Default value is DitheringMode.None.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.Palette">
            <summary>    Gets or sets the Palette to map the     image to.</summary>
            <remarks>The palette must be set before invoking ApplyToImage.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ApplyPaletteCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute">
            <summary>When applied to a property in an ImageCommand, allows is to be an Auto Configurable.</summary>
            <remarks>See IPropertiesAutoConfigurable for more information. This is intended to be for internal use only, and used primarily in Atalasoft.dotImage.AdvancedDocClean.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.#ctor(System.Int32)">
            <summary>Creates a new instance of AutoConfigurableAttribute specifying the bit value.</summary>
            <param name="bitValue">The value to associate with unmanaged code.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoConfigurableAttribute.BitValue">
            <summary>Gets the value to associate this property in unmanaged code.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.AutoCropCommand">
            <summary>Automatically crops an image by removing borders around the edge of an image with a solid color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor">
            <summary>Creates an AutoCropCommand object used to remove extra spacing around an image.Initializes a new instance of AutoCropCommand with 0 tolerance.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double)">
            <summary>Initializes a new instance of AutoCropCommand specifying a tolerance.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Drawing.Color)">
            <summary>Initializes a new instance of AutoCropCommand specifying a tolerance and override color.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideColor">    A specific color to represent the image     'whitespace'.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Drawing.Color,System.Boolean)">
            <summary>Initializes a new instance of AutoCropCommand specifying a tolerance, override color, and if uses median filter.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideColor">    A specific color to represent the image     'whitespace'.</param>
            <param name="useMedianFilter">If true, removed noise from the image prior to getting crop dimensions.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Int32)">
            <summary>Initializes a new instance of AutoCropCommand specifying a tolerance and override index.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideIndex">    A palette index value containing the color to represent     image 'whitespace'.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.#ctor(System.Double,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of AutoCropCommand specifying a tolerance, override index, and if uses median filter.</summary>
            <param name="tolerance">The tolerance used to locate the edges. (0 - 100)</param>
            <param name="overrideIndex">    A specific color to represent the image     'whitespace'.</param>
            <param name="useMedianFilter">If true, removed noise from the image prior to getting crop dimensions.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns a Rectangle of the border to remove.</summary>
            <param name="sourceImage">The AtalaImage that will be evaluated.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideColor">
            <summary>Gets or sets a specific color to represent the image 'whitespace'.</summary>
            <remarks>Default value is Color.Empty.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.OverrideIndex">
            <summary>Gets or sets a palette index value containing the color to represent image 'whitespace'.</summary>
            <remarks>Default value is -1. A value greater than -1 will override the OverrideColor property.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.Tolerance">
            <summary>Gets or sets the percentage tolerance used to locate the edges, from 0 to 100.</summary>
            <remarks>Default value is 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.AutoCropCommand.UseMedianFilter">
            <summary>Gets or sets a value indicating if the noise is removed prior to getting the crop dimensions.</summary>
            <remarks>Default value is false.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand">
            <summary>Changes the image to a new PixelFormat.</summary>
            <remarks>    This is equivalent to the      GetChangedPixelFormat in the AtalaImage     class, but in a Command form. Using this command will not raise     the      ChangePixelFormat event.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor">
            <summary>Initializes a new instance of ChangePixelFormatCommand. Creates a ChangePixelFormatCommand object used to change the current pixel format of an image to a different format.Creates a new instance of ChangePixelFormatCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(Atalasoft.Imaging.PixelFormat)">
            <summary>Initializes a new instance of ChangePixelFormatCommand specifying the new pixel format.</summary>
            <param name="newPixelFormat">The PixelFormat of the new image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.#ctor(Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.ColorManagement.ColorProfile)">
            <summary>Initializes a new instance of ChangePixelFormatCommand specifying the new pixel format and color profile.</summary>
            <param name="newPixelFormat">The PixelFormat of the new image.</param>
            <param name="destProfile">This is the destination colorprofile to use when changing colorspaces.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.DestProfile">
            <summary>Gets or sets the color profile to use when converting the image to a new colorspace.</summary>
            <remarks>This profile will be used as the destination device. By default the screen profile will be used. If specifying a CMYK image, a CMYK profile should be set.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.NewPixelFormat">
            <summary>Gets or sets the PixelFormat of the new image.</summary>
            <remarks>If the source and destination pixel formats are equal, ApplyToImage will return null.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ChangePixelFormatCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ColormatchedMask">
            <summary>This class is used to get a mask image matching a specified color or contiguous pixels at a specified point.</summary>
            <remarks>This class can be used for a "magic wand" tool.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.#ctor">
            <summary>Initializes a new instance of ColormatchedMask.Creates a ColormatchedMask object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of ColormatchedMask specifying the AtalaImage to evaluate.</summary>
            <param name="image">The AtalaImage to return apply the colormatching to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of ColormatchedMask specifying the AtalaImage to evaluate and a progress callback.</summary>
            <param name="image">The AtalaImage to return apply the colormatching to.</param>
            <param name="progress">The progress callback.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetEdgeColorMatchedMask(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary>Mask area is bounded by pixels matching the edgeColor parameter.</summary>
            <param name="center">The point to begin the colormatch.</param>
            <param name="edgeColor">The color of the edge to find.</param>
            <param name="tolerance">The tolerance (0 - 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.GetSurfaceColorMatchedMask(System.Drawing.Point,System.Double)">
            <summary>All contiguous pixels matching the pixel at the center point are returned as on in resulting mask.</summary>
            <param name="center">The point to begin the colormatch.</param>
            <param name="tolerance">The tolerance (0 - 100)</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Image">
            <summary>Gets or sets the AtalaImage to apply the colormatching to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ColormatchedMask.Progress">
            <summary>Gets or sets the progress callback.</summary>
            <remarks>Defaults value is null.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.CropCommand">
            <summary>Creates a new image from a rectangular section in the source image.</summary>
            <remarks>This command is equivalent to overlaying the original image onto a new image at the size and position of the crop rectangle.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor">
            <summary>Initializes a new instance of CropCommand specifying the crop rectangle.Creates a new instance of CropCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.CropCommand.#ctor(System.Drawing.Rectangle)">
            <summary>Creates a new instance of CropCommand specifying the crop rectangle.</summary>
            <param name="cropRect">The rectangular portion of the source image to copy into a new image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.CropRect">
            <summary>    Gets or sets the rectangular portion of the source image     to copy into a new image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.CropCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Histogram">
            <summary>    This command is used to represent the number of unique     color channel values or brightness values be returning an array     containing the number of pixels at the value signified by the     array index.</summary>
            <remarks>For 8-bit per component images, the array contains 256 values. 16-bit per component images returns an array of 65536 values.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor">
            <summary>Initializes a new instance of the Histogram object.Creates a Histogram object used to get brightness and channel histogram information from an AtalaImage.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of the Histogram object.</summary>
            <param name="image">The image to evaluate.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Initializes a new instance of the Histogram object.</summary>
            <param name="image">The image to evaluate.</param>
            <param name="progress">The progress callback.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>Creates a new instance of Histogram specifying the image to examine and a specific rectangular area of the image to work with.</summary>
            <param name="image">The image to examine.</param>
            <param name="area">A rectangular area of the image to work with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ProgressEventHandler)">
            <summary>Creates an instance of Histogram specifying the image to examine, a selection of the image to work with and the progress event handler.</summary>
            <param name="image">The image to examine.</param>
            <param name="area">A rectangular area of the image to work with.</param>
            <param name="progress">The progress callback.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetBrightnessHistogram">
            <summary>Returns an array containing a histogram of brightness values in the image.</summary>
            <returns>An array containing a histogram of brightness values in the image.</returns>
            <remarks>Returns the gray channel with grayscale images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetChannelHistogram(System.Int32)">
            <summary>Returns an array containing a histogram of color values from a particular channel in the image.</summary>
            <returns>An array containing a histogram of color values from a particular channel in the image.</returns>
            <param name="channelIndex">The zero based channel index to evaluate. (0 - 3)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Histogram.GetDocumentHistogram">
            <summary>Returns a two element array containing the number of black and white pixels in a binary image.</summary>
            <remarks>In a typical binary image, the first pixel value is white, and second is black (known as MinIsWhite). Occassionally this is swapped. Check the palette index color value to be certain.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Area">
            <summary>Gets or sets a rectangular area of the image the histogram methods will work with.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Image">
            <summary>Gets or sets the image to evaluate.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Histogram.Progress">
            <summary>Gets or sets the progress delegate.</summary>
            <remarks>Can be null (Nothing in Visual Basic).</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageCommand">
            <summary>Represents the base class for all image processing routines that modify image data.</summary>
            <remarks>    An ImageCommand can be used to apply any type of effect     onto an existing image. The Apply method can be used to process     the command. Classes that inherit ImageCommand     can be used in the      ApplyCommand method in the Workspace.     See Extending ImageCommands for more information on     creating custom commands.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.AllocatePixelFormatArray(System.Int32)">
            <summary>Allocate an array of PixelFormat enums.</summary>
            <remarks>This method was added to work around a bug in Managed C++ that made it impossible to correctly allocate an array of enums. In general, most client code will never need to call this method.</remarks>
            <param name="len">The number of elements to allocate.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary>Apply the command to the given image.</summary>
            <returns>A new object of type  ImageResults.</returns>
            <remarks>The ImageResults object will always contain a valid Image property which represents the output of the command. This property may be the same as the input image.</remarks>
            <param name="image">The image which will by processed by the command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Applies the command to the source AtalaImage.</summary>
            <returns>A new AtalaImage containing the processed image. For commandTypes that do not return an image, set this to null.</returns>
            <param name="sourceImage">The source AtalaImage which will be processed. For command types that do not require a source image, set this to null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>The method is called by the default implementation of Apply. It determines if it is necessary to create a copy of the source image in a different pixel format and if so, determines the best new pixel format and allocates that image.</summary>
            <returns>A new image in a pixel format supported by the command or null to indicate that the original image is acceptable.</returns>
            <remarks>    The default implementation of ConstructChangedSourceImage     requests that the command report its preferred pixel format     (typically, this is the source image's pixel format, but some     commands support many pixel formats, but work best in gray, for     example), and if that is supported, returns a new image in the     preferred format if it is different from the source     image.     If the pixel format is not supported and     ApplyToAnyPixelFormat is set to true, the command is queried     for its best alternate pixel format and a new image is returned     in that pixel format. If ApplyToAnyPixelFormat is set to false,     ConstructChangedSourceImage will throw an     IncompatiblePixelFormatException.     If an error occurs, ConstructChangedImage should throw an     exception. Any new image constructed by ConstructChangedImage     must be a pixel format supported by this command.</remarks>
            <param name="image">The original source image passed to Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Called by the default implementation of Apply, ConstructFinalImage constructs the image that will be used as the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">The source image being processed. This may be different from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ConstructImageResults">
            <summary>Constructs the results object for this command.</summary>
            <returns>A new object of type ImageResults representing the results for this command.</returns>
            <remarks>    The default implementation returns an object of type     ImageResults. If your command requires an object with more     information, subclass ImageResults and add in the information     you need. Your command will override ConstructImageResults and     return your new object.     The object allocated here is passed to     PerformActualCommand as a reference parameter, meaning the     entire object can be changed at that point too.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.GetChangedPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <summary>This method is called to change the pixel format of the source image.</summary>
            <returns>A new image in the new pixel format, with image data translated from the source image.</returns>
            <remarks>The default implementation uses the built-in AtalaImage.GetChangedPixelFormat method, which in turn uses the PixelFormatChanger installed in AtalaImage. By overriding this method, you can bypass the built-in pixel format translation and supply your own and isolate it to an individual command.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="newFormat">The new pixel format.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.GetContinuousFormatImage(Atalasoft.Imaging.AtalaImage)">
            <summary>A utility method for determining the best matching continuous tone pixel format and converting the given image to that format.</summary>
            <returns>If the image is already a continuous image format, this method will return null. Otherwise it will return a new image.</returns>
            <param name="image">A non-continuous (ie, color-mapped) image</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ImageCommandGetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Aggregates ImageCommand data into the supplied SerializationInfo object.</summary>
            <remarks>This method is only needs by child classes of image command which implement ISerializable. This method should be called to serialize all the base class information.</remarks>
            <param name="info">A serialization info object which will hold image command data</param>
            <param name="context">The streaming context for the serialization.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <summary>Returns a value indicating if the specified pixel format is supported.</summary>
            <remarks>All derived commands must override this property.</remarks>
            <param name="format">The pixel format to query.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>PerformActualCommand does the actual work of the image processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">The source image for processing. This may be different from the original image.</param>
            <param name="dest">The destination image. Dest will be null when InPlaceProcessing is true or when ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process. When the destination image is non-null, it will always be the same size as imageArea. ImageArea only differs in size from the source image when the command is a subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructChangedSourceImage(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
            <summary>Calls the ConstructChangedSourceImage method on the supplied ImageCommand.</summary>
            <remarks>This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand, which need to operate on existing ImageCommands by proxy.</remarks>
            <param name="command">An ImageCommand that will be called.</param>
            <param name="image">An AtalaImage to be passed to ConstructChangedSourceImage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructFinalImage(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
            <remarks>This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand, which need to operate on existing ImageCommands by proxy.</remarks>
            <param name="command">An ImageCommand that will be called.</param>
            <param name="image">An AtalaImage to be passed to ConstructFinalImage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyConstructImageResults(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <remarks>This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand, which need to operate on existing ImageCommands by proxy.</remarks>
            <param name="command">An ImageCommand that will be called.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyGetChangedPixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat)">
            <remarks>This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand, which need to operate on existing ImageCommands by proxy.</remarks>
            <param name="command">An ImageCommand that will be called.</param>
            <param name="sourceImage">An AtalaImage to be passed to GetChangedPixelFormat.</param>
            <param name="newFormat">The new target pixel format</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxySelectBestAlternatePixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <returns>This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand, which need to operate on existing ImageCommands by proxy.</returns>
            <param name="command">An ImageCommand that will be called.</param>
            <param name="sourceImage">An AtalaImage to be passed to SelectBestAlternatePixelFormat.</param>
            <param name="sourceFormat">The source image pixel format</param>
            <param name="formats">A set of supported pixel formats for the command</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxySelectPreferredPixelFormat(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <remarks>This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand, which need to operate on existing ImageCommands by proxy.</remarks>
            <param name="command">An ImageCommand that will be called.</param>
            <param name="sourceImage">An AtalaImage to be passed to SelectPreferredPixelFormat.</param>
            <param name="sourceFormat">The source image pixel format</param>
            <param name="formats">A set of supported pixel formats for the command</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.ProxyVerifyProperties(Atalasoft.Imaging.ImageProcessing.ImageCommand,Atalasoft.Imaging.AtalaImage)">
            <remarks>This method (and all the Proxy...() methods are meant for meta image commands, such as ThreadedCommand, which need to operate on existing ImageCommands by proxy.</remarks>
            <param name="command">An ImageCommand that will be called.</param>
            <param name="image">The source image for the command</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.SelectBestAlternatePixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>Choose the best pixel format to use for this command when the supplied source image's pixel format is unacceptable.</summary>
            <returns>A new pixel format for the command. This new pixel format must be one of the pixel formats in the supported pixel formats.</returns>
            <remarks>The default implementation returns the 0th element of the formats array.</remarks>
            <param name="sourceImage">The source image to be processed.</param>
            <param name="sourceFormat">The source image's pixel format.</param>
            <param name="formats">The pixel formats supported by this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>Chooses a pixel format that is preferred for this command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">An array of pixel formats supported by this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.VerifyImage(Atalasoft.Imaging.AtalaImage)">
            <summary>Verify the integrity of an AtalaImage.</summary>
            <remarks>Throws an ArgumentNullException if the image is null and an ArgumentException if the image's PixelMemory is null or disposed.</remarks>
            <param name="image">An AtalaImage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>Verify the integrity of properties in the command before processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.ApplyToAnyPixelFormat">
            <summary>Reports whether or not this command will be applied to any supplied PixelFormat image</summary>
            <remarks>    Note that not all commands will support this property. If     a command returns true in the property     CanApplyToAnyPixelFormat, then ApplyToAnyPixelFormat can be     either true or false.     If a command reports false in the property     CanApplyToAnyPixelFormat, then ApplyToAnyPixelFormat can only     be false and will throw a NotSupportedException if set to     true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.CanApplyToAnyPixelFormat">
            <summary>Returns true if the command can be applied to any PixelFormat.</summary>
            <remarks>    Many commands have the ability to take advantage of     automatic PixelFormat conversion so that they can operate on     all the PixelFormats instead of a select few. This capability     comes at the cost of time and memory.     If CanApplyToAnyPixelFormat is true, then it is possible     to set the property ApplyToAnyPixelFormat to true, to cause     automatic conversion. If CanApplyToAnyPixelFormat is false,     then it is incorrect to set ApplyToAnyPixelFormat to     true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.GlobalAutoThread">
            <summary>Determines if all ImageCommands that support multithreaded processing will be multithreaded.</summary>
            <remarks>Many ImageCommands can be run in a multithreaded manner that will improve the performance of the command without affecting the output. Speed improvements are especially apparent on multicore processors.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.InPlaceProcessing">
            <summary>Gets a value indicating if the source image data is processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.Progress">
            <summary>Gets or sets the ProgressEventHandler delegate which can be used to view or cancel the progress of the current process.</summary>
            <remarks>A null value will ignore progress.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageCommand.SupportedPixelFormats">
            <summary>Gets an array of supported pixel formats.</summary>
            <remarks>All derived classes must override this property.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand">
            <summary>Derives from ImageCommand and adds region of interest capability to ImageCommands.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageRegionCommand.RegionOfInterest">
            <summary>    Gets or sets a RegionOfInterest which will only process     the indicated region of the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ImageResults">
            <summary>This class is used to contain information generated during the processing of an ImageCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor">
            <summary>Constructs a new ImageResults objectConstruct a new ImageResults object with default values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean)">
            <summary>Construct a new ImageResults object with the supplied values.</summary>
            <param name="image">The image that was the result of processing</param>
            <param name="isImageSourceImage">An indicator as to whether or not image is the same AtalaImage as the original image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,System.Int32)">
            <summary>Construct a new ImageResults object with the supplied values.</summary>
            <param name="image">The image that was the result of processing</param>
            <param name="isImageSourceImage">An indicator as to whether or not image is the same AtalaImage as the original image.</param>
            <param name="processingTimeInMilliseconds">The total time to perform the command in milliseconds.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ImageResults.#ctor(System.Boolean)">
            <summary>Construct a new ImageResults object with the supplied values.</summary>
            <param name="isImageSourceImage">An indicator as to whether or not image is the same AtalaImage as the original image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageResults.Image">
            <summary>The image that was the result of processing</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageResults.IsImageSourceImage">
            <summary>An indicator as to whether or not image is the same AtalaImage as the original image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ImageResults.ProcessingTimeInMilliseconds">
            <summary>The total time to perform the command in milliseconds.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.LosslessJpeg">
            <summary>This class performs lossless transformations on JPEG images.</summary>
            <remarks>    JPEG images are compressed with lossy compression,     meaning that each time the image is saved, quality is lost.     Some operations, such as rotate, crop, and convert to grayscale     can be performed without re-encoding the data.     Do determine of the image can be operated on losslessly,     check the      CanDoLosslessTransform method. JPEG images are divided into     rectangular sections called MCU blocks that are typically 8x8     pixels. If the width and height are both divisible by 8, then     it usually means that lossless operations can be performed     without losing or cropping the edges. However some JPEG images     have MCU blocks other than 8.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform">
            <summary>Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be performed without cropping the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be performed without cropping the image.</summary>
            <param name="source">The source image file.</param>
            <param name="transform">The transform to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.CanDoLosslessTransform(System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Returns a value indicating the the MCU blocks are arranged such that a lossless transformation can be performed without cropping the image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="transform">The transform to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <remarks>    Perform a lossless crop on the image in a JPG file,     without decompressing the JPG data. By not decompressing, you     don't have to re-compress, thus avoiding adding additional JPG     artifacts to the output image.     This works by rearranging the compressed data (DCT     coefficients), without ever fully decoding the image.     Therefore, its transformations are lossless: there is no image     degradation at all, which is not the case if you were to read     the image to RGB, transform, and save again as JPG.     Note:JPG files are compressed in     rectangular blocks. The dimensions of these blocks are always a     multiple of 8 pixels: 8x8 and 16x16 are common.     Because the compression blocks on the top and left edges     cannot be split during a crop, the size of these blocks affects     the crops that this function can perform. This inability to     split blocks means that the top-left corner of the crop rect     you specify will always be rounded down to the next lowest     multiple of the MCU size (see GetMcuBlackSize). The bottom     right corner you specify is unaffected.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="cropRectangle">The crop rectangle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.String,System.String,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="cropRectangle">The crop rectangle.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="cropRectangle">The crop rectangle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Crop(System.IO.Stream,System.IO.Stream,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Performs a lossless crop on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="cropRectangle">The crop rectangle.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize">
            <summary>Get the compression block size for a JPG file.</summary>
            <remarks>This can be used in conjunction with a lossless crop to determine the range of crop rectangles that are possible.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.String)">
            <summary>Get the compression block size for a JPG file.</summary>
            <remarks>This can be used in conjunction with a lossless crop to determine the range of crop rectangles that are possible.</remarks>
            <param name="source">The source image file.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.GetMcuBlockSize(System.IO.Stream)">
            <summary>Get the compression block size for a JPG file.</summary>
            <remarks>This can be used in conjunction with a lossless crop to determine the range of crop rectangles that are possible.</remarks>
            <param name="source">The source image Stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <remarks>    This can be used to perform one of a set of simple     transformations without decompressing the JPEG data. By not     decompressing, you don't have to re-compress, thus avoiding     adding additional JPG artifacts to the output image.     This works by rearranging the compressed data (DCT     coefficients), without ever fully decoding the image.     Therefore, its transformations are lossless: there is no image     degradation at all, which is not the case if you were to read     the image to RGB, transform, and save again as JPG.     The transpose transformation has no restrictions     regarding image dimensions. The other transformations operate     rather oddly if the image dimensions are not a multiple of the     iMCU size (usually 8 or 16 pixels, though sometimes 32 or 48),     because they can only transform complete blocks of DCT     coefficient data in the desired way.     The default behavior is to discard these "extra" blocks.     This prevents ugly strips of unmodified data along one edge.     So, strictly speaking, these transformations are not lossless     for all images: they are lossless only for images with     dimensions that are multiples of 8 or 16. You can override this     discarding the extra blocks, though it is not     recommended.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="type">The transform type to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.String,System.String,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image file.</param>
            <param name="dest">The destination image filename.</param>
            <param name="type">The transform type to apply.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="type">The transform type to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.LosslessJpeg.Transform(System.IO.Stream,System.IO.Stream,Atalasoft.Imaging.ImageProcessing.JpegTransformType,Atalasoft.Imaging.ImageProcessing.JpegTransformFlags)">
            <summary>Perform a lossless transform on a JPEG image.</summary>
            <param name="source">The source image Stream.</param>
            <param name="dest">The destination image Stream.</param>
            <param name="type">The transform type to apply.</param>
            <param name="flags">The transform flags.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.NoiseGenerator">
            <summary>Creates a new image containing noise.</summary>
            <remarks>This function has many uses. One is to generate Perlin or Hugo noise, resize it large, and then use that as random clouds. There are many different types of noise you can generate.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor">
            <summary>Initializes a new instance of NoiseGenerator.Creates a NoiseGenerator object used for creating images of random noise patterns.Initializes a new instance of NoiseGenerator.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size and scale.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size, scale and mode.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
            <param name="mode">The type of noise to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.#ctor(System.Drawing.Size,System.Double,Atalasoft.Imaging.ImageProcessing.NoiseGeneratorMode,System.Drawing.Color)">
            <summary>Initializes a new instance of NoiseGenerator specifying the resulting image size, scale, mode and base color.</summary>
            <param name="imageSize">The size of the resulting image containing noise.</param>
            <param name="scale">The size of the noise.</param>
            <param name="mode">The type of noise to create.</param>
            <param name="baseColor">The color of the image prior to adding noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage">
            <summary>Create a new image containing noise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage">
            <summary>Create a new image containing noise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Double)">
            <summary>Create a new image containing noise specifying the z-offset of dimensional slice noise.</summary>
            <param name="zOffset">The z-axis offset used for DimensionSlice noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.GenerateImage(System.Int32,System.Double)">
            <summary>Create a new image containing noise specifying the octaves and persistence.</summary>
            <param name="octaves">The number of waves contributing to the noise. Only used with grayscale Hugo noise.</param>
            <param name="persistence">Controls the smoothness. Only used with grayscale Hugo noise. (0 to 10)</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.BaseColor">
            <summary>Gets or sets the color of the image prior to adding noise.</summary>
            <remarks>Default value is Color.Empty, which will result in a grayscale image. Ignored by DimensionalSlice noise, which is always grayscale.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.ImageSize">
            <summary>    Gets or sets the size of the resulting image containing     noise.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Mode">
            <summary>Gets or sets the type of noise to create.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.NoiseGenerator.Scale">
            <summary>Gets or sets the size of the noise.</summary>
            <remarks>Default value is 50.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayCommand">
            <summary>Overlays a specified image on top of the source image.</summary>
            <remarks>    If the top image has an alpha channel, that alpha will be     used to control the transparency of the overlay and will     override the TransparentColor and Opacity values.     When overlaying one image with alpha, on top of another     image with alpha, the alpha channels will be merged to take the     maximum pixel value of each alpha channel. See      OverlayMergedCommand for more specific options.     The top image will always be converted to the pixel     format of the bottom image, unless the top image has an alpha     channel, which it will then use for alpha blending.     This command supports all pixel formats with the     exception of 4-bit Indexed.     This command processes the source image in-place, and     ApplyToImage always returns null.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor">
            <summary>Initializes a new instance of OverlayCommand. Create an OverlayCommand used to overlay one image onto another.Creates a new instance of OverlayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image and position.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="position">Gets or sets the position of the top image onto the source image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Drawing.Color)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image, position and a transparent color.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="position">Gets or sets the position of the top image onto the source image.</param>
            <param name="transparentColor">The color that will be used as a transparent mask for the top image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Double)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image, position and an opacity of the top image.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="position">Gets or sets the position of the top image onto the source image.</param>
            <param name="opacity">The opacity of the top image. (0 - 1)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,System.Int32)">
            <summary>Initializes a new instance of OverlayCommand specifying the top image, position and a transparent color index.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="position">Gets or sets the position of the top image onto the source image.</param>
            <param name="transparentIndex">The palette index that will be used as a transparent mask for the top image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.InPlaceProcessing">
            <summary>Gets a value indicating whether the command returns a new image or modified the source image passed into the command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Opacity">
            <summary>Gets or sets the opacity of the top image.</summary>
            <remarks>    Valid values are 0.0 for fully transparent through 1.0     for fully opaque.     If the image has an alpha channel, the alpha channel will     be used for the opacity of each pixel in the top image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.Position">
            <summary>Gets or sets the position of the top image with respect to the source image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TopImage">
            <summary>Gets or sets the image that will be overlayed onto the source image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentColor">
            <summary>Gets or sets the color that will be used as a transparent mask for the top image.</summary>
            <remarks>By default, this color is set to Color.Transparent and ignored. If the top image has an alpha channel, this value is ignored.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayCommand.TransparentIndex">
            <summary>Gets or sets the palette index that will be used as a transparent mask for the top image.</summary>
            <remarks>By default, this color is set to -1 and ignored. It is also ignored if the top image has an alpha channel.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand">
            <summary>Overlay a specified image onto the source image using an 8-bit grayscale mask image to control the transparency of the overlay.</summary>
            <remarks>    If the top image already contains an alpha channel, use          OverlayCommand, which will alpha blend the images     automatically.     The bottom image must be a continuous format, such as     8-bit grayscale or 24-bit RGB. See      OverlayMaskedDocumentCommand for masking 1-bit binary     images.     This command processes the source image in-place, and     ApplyToImage always returns null.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor">
            <summary>Initializes a new instance of OverlayMaskedCommand.Create an OverlayMaskedCommand object that will use a mask image to filter the image overlay.Creates a new instance of OverlayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of OverlayMaskedCommand specifying the top image and alpha mask.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="alphaMask">The 8-bit grayscale image representing the transparency of the overlay.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Initializes a new instance of OverlayMaskedCommand specifying the top image and alpha mask and position of the top image.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="alphaMask">The 8-bit grayscale image representing the transparency of the overlay.</param>
            <param name="position">The position of the top image onto the source image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.AlphaMask">
            <summary>Gets or sets the 8-bit grayscale image representing the transparency mask of the overlay.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.InPlaceProcessing">
            <summary>Gets a value indicating whether the command returns a new image or modified the source image passed into the command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.Position">
            <summary>Gets or sets the position of the top image onto the source image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMaskedCommand.TopImage">
            <summary>Gets or sets the image that will be overlayed onto the source image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand">
            <summary>    Merge two images of the same PixelFormat together     specifying various merge types.</summary>
            <remarks>    This functionality is especially useful when combining     alpha channels with options other than the default "maximum"     used in the      OverlayCommand when overlaying two RGBA images.     This command processes the source image in-place, and     ApplyToImage always returns null.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor">
            <summary>Initializes a new instance of OverlayMergedCommand. Create an OverlayMergedCommand that will overlay one image onto another using a merging algorithm to determine the output pixel.Creates a new instance of OverlayMergedCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying the top image, and the merge option.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged together.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying the top image, position of the image, and the merge option.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="position">The position of the top image onto the source image.</param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged together.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.MergeOption,System.Double)">
            <summary>Initializes a new instance of OverlayMergedCommand specifying the top image, position of the image, the merge option, and a factor used for some merge options.</summary>
            <param name="topImage">The image that will be overlayed onto the source image.</param>
            <param name="position">The position of the top image onto the source image.</param>
            <param name="mergeOption">Specifies how the top and bottom pixels wil be merged together.</param>
            <param name="factor">A factor applied to some of the merge options. For example when using the Fast merge option, this value would be opacity (0 to 1).</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Factor">
            <summary>Gets or sets a factor applied to some of the merge options.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.InPlaceProcessing">
            <summary>Gets a value indicating whether the command returns a new image or modified the source image passed into the command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.MergeOption">
            <summary>Gets or sets a value indicating how the top and bottom pixels wil be merged together.</summary>
            <remarks>For 1-bit images, this option can only be LogicalAnd, LogicalOR, LogicalXOR, NegativeAnd, NegativeOR or NegativeXOR. NegativeAnd, NegativeOR, and NegativeXOR can only be used with 1-bit images.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.Position">
            <summary>Gets or sets the position of the top image onto the source image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.OverlayMergedCommand.TopImage">
            <summary>Gets or sets the image that will be overlayed onto the source image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.RegionOfInterest">
            <summary>This object can be passed into most ImageCommands to indicate a region of the image to process. Any shaped region can be used by specifying a System.Drawing.Region object or a simple System.Drawing.Rectangle.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor">
            <summary>Initializes a new instance of RegionOfInterest. Create a RegionOfInterest used by several ImageCommands to specify the area of an image to process.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Drawing.Rectangle)">
            <summary>Initializes a new instance of RegionOfInterest specifying a simple rectangle to use as the region.</summary>
            <param name="rect">The rectangular area of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.#ctor(System.Drawing.Region)">
            <summary>Initializes a new instance of RegionOfInterest specifying a .NET Region object to use as the region.</summary>
            <param name="region">The Region used to specify the portion of an image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.IsSimpleRegion">
            <summary>    Returns true if the Region is a simple     rectangle.</summary>
            <returns>true if the Region is a simple rectangle.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.Region">
            <summary>Gets or sets the System.Drawing.Region used to specify the portion of an image to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.RegionOfInterest.SmoothingLevel">
            <summary>Gets or sets the smoothing level of the region.</summary>
            <remarks>By default this is 0. Can be any value greater than 0, and is the standard deviation of the gaussian kernel.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand">
            <summary>Resamples the source 8-bit colormapped image to a 24-bit RGB to a specified size.</summary>
            <remarks>This command is used when viewing a colormapped image in the controls when Antialiasing. It will smooth the lines and create better displays of colormapped images by efficiently converting the image from 8-bit colormapped to 24-bit RGB while it's resampling.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying the source rectangle, destination size, and resampling method. Create a ResampleColormappedToRgbCommand that will resize an indexed image directly to a 24-bit image.Creates a new instance of ResampleColormappedToRgbCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Int32)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying the maximum width or height using the defailt resampling method.</summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying final size and resampling method.</summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying the source rectangle, destination size, and resampling method.</summary>
            <param name="sourceRect">The rectangular region of the source image that will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying final size and using the the default resampling method.</summary>
            <param name="destSize">The final size of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.#ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleColormappedToRgbCommand specifying final size and resampling method.</summary>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.DestSize">
            <summary>Gets or sets the final width and height of the image.</summary>
            <remarks>Ignored when the  MaxSize property is set to a value greater than 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.MaxSize">
            <summary>Gets or sets the maximum width or height value for resizing while maintaining the aspect ratio.</summary>
            <remarks>When this value is 0 (the default), it is ignored and  DestSize is used instead. Use this value to automatically calculate the new width and height, keeping the same aspect ratio as the original image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.Method">
            <summary>Gets or sets the resampling algorithm to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SourceRect">
            <summary>Gets or sets the rectangular region of the source image that will be resized.</summary>
            <remarks>The default value is Rectangle.Empty, in which case the entire image is resized.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleColormappedToRgbCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleCommand">
            <summary>Resamples the source image to the specified dimensions.</summary>
            <remarks>This object is capable of resampling continuous and 8-bit colormapped images. For resizing 1-bit document images see Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor">
            <summary>Initializes a new instance of ResampleCommand.Create a ResampleCommand used to resize AtalaImage objects.Creates a new instance of ResampleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Int32)">
            <summary>Initializes a new instance of ResampleCommand specifying the maximum width or height using the defailt resampling method.</summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying final size and resampling method.</summary>
            <param name="maxSize">The maximum width or height of the final image while maintaining the aspect ratio.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying the source rectangle, destination size, and resampling method.</summary>
            <param name="sourceRect">The rectangular region of the source image that will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Size)">
            <summary>Initializes a new instance of ResampleCommand specifying final size and using the the default resampling method.</summary>
            <param name="destSize">The final size of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleCommand.#ctor(System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Initializes a new instance of ResampleCommand specifying final size and resampling method.</summary>
            <param name="destSize">The final size of the image.</param>
            <param name="method">The resampling algorithm to apply.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.DestSize">
            <summary>Gets or sets the final size of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.MaxSize">
            <summary>Gets or sets the width of height value for resizing while maintaining the aspect ratio.</summary>
            <remarks>When this value is 0, it is ignored.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.Method">
            <summary>Gets or sets the the resampling algorithm to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SourceRect">
            <summary>Gets or sets the rectangular region of the source image that will be resized.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand">
            <summary>Resample an 8 bit image honoring one color value as a mask.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor">
            <summary>Construct a new ResampleMaskedCommand with the provided information.Construct a new ResampleMaskedCommand with default properties.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Int32,System.Int32)">
            <summary>Construct a new ResampleMaskedCommand with the provided size and mask index.</summary>
            <param name="maxSize">The maximum size for either dimension of the final image.</param>
            <param name="maskIndex">In color index to treat as a mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,System.Int32)">
            <summary>Construct a new ResampleMaskedCommand with the provided source rectangle, destination size, and mask index.</summary>
            <param name="sourceRect">The rectangle describing the pixels to resample.</param>
            <param name="destSize">In color index to treat as a mask.</param>
            <param name="maskIndex">In color index to treat as a mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.#ctor(System.Drawing.Size,System.Int32)">
            <summary>Construct a new ResampleMaskedCommand with the provided destination size and mask index.</summary>
            <param name="destSize">In color index to treat as a mask.</param>
            <param name="maskIndex">In color index to treat as a mask.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.DestSize">
            <summary>Sets or gets the destination size of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.MaskIndex">
            <summary>Gets or sets the index of the color of the mask.</summary>
            <remarks>MaskIndex must be a value between 0 and 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.MaxSize">
            <summary>Sets or gets the maximum dimension of the final image.</summary>
            <remarks>MaxSize must be greater than zero.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.SourceRect">
            <summary>Sets or gets the area to be resampled.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ResampleMaskedCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.ThreadedCommand">
            <summary>ThreadedCommand is a proxy command that will induce ImageCommands that support multithreading to run in on multiple threads.</summary>
            <remarks>    Only ImageCommands that implement the IThreadableCommand     and ICloneable interfaces can be used with ThreadedCommand.     ThreadedCommand manages all thread creation and     synchronization, proxy management of ImageCommand operations     and so on.     Once a ThreadedCommand has been created and given a valid     ImageCommand, it can be used any place that ImageCommand can be     used.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor">
            <summary>Constructs a new ThreadedCommand.</summary>
            <remarks>ThreadedCommand is not an image processing command itself. It applies multithreading to other commands that support multithreading.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor(Atalasoft.Imaging.ImageProcessing.ImageCommand)">
            <param name="command">The image command to perform in a multithreaded manner.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.Int32)">
            <param name="command">The image command to perform in a multithreaded manner.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.#ctor(Atalasoft.Imaging.ImageProcessing.ImageCommand,System.Int32)">
            <param name="threadCount">The total number of threads to use for this command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ApplyToAnyPixelFormat">
            <summary>Sets or gets the value of AppyToAnyPixelFormat in the underlying command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.CanApplyToAnyPixelFormat">
            <summary>Returns the value of CanApplyToAnyPixelFormat in the underlying command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.Command">
            <summary>Sets or gets the underlying command that will be multithreaded.</summary>
            <remarks>In addition to being an ImageCommand, the given command must implement the IThreadableCommand and ICloneable interfaces.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.InPlaceProcessing">
            <summary>Returns the InPlaceProcessing value of the underlying command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.OptimalThreadCount">
            <summary>Returns the best number of threads to use for the current system.</summary>
            <remarks>This is typically the number of CPUs available times two. The number of CPUs is not always the number of physical CPUs chips in the computer. For example, a computer with two dual core CPUs may report 8 for its OptimalThreadCount. Other variables like hyperthreading will affect the final count.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.StripSize">
            <summary>Gets or sets the size of strips that will be processed by individual threads.</summary>
            <remarks>If this value is -1, ThreadedCommand will calculate the optimal size for you.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.SupportedPixelFormats">
            <summary>Returns the value of SupportedPixelFormats of the underlying command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.ThreadedCommand.ThreadCount">
            <summary>The total number of threads that will be used for this command.</summary>
            <remarks>By default, this is initialized to ThreadedCommand.OptimalThreadCount.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Thumbnail">
            <summary>Creates a high speed and high quality thumbnail image from a source file.</summary>
            <remarks>    This class uses optimized image decoding and scaling to     create a high quality thumbnail from a source image. It will     used scaled loading when the source file is a JPEG, utilize     scale to gray resampling when the source image is 1-bit with a     document imaging license, and use area average     otherwise.     This class can be conveniently used to generate thumbnail     preview images.     note: when using DotImage Photo or Photo Pro, making a     thumbnail out of a 1-bit image will take much more memory and     be less efficient as it will convert to grayscale first, then     resample the image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.#ctor">
            <summary>Constructs a new Thumbnail object.Constructs a new Thumbnail object with default properties.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.#ctor(System.Drawing.Size)">
            <summary>Constructs a new Thumbnail object with the provided size.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create">
            <summary>Creates a new thumbnail image from the supplied image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new thumbnail image from the supplied image.</summary>
            <param name="image">The name of the file from where the image will be taken.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(System.String,System.Int32)">
            <summary>Creates a new thumbnail image from the supplied file and frame index.</summary>
            <param name="fileName">The name of the file from where the image will be taken.</param>
            <param name="frameIndex">The index of the frame to be loaded.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Thumbnail.Create(System.IO.Stream,System.Int32)">
            <summary>Creates a new thumbnail image from the supplied stream and frame index.</summary>
            <param name="stream">A stream from which an image can be loaded.</param>
            <param name="frameIndex">The index of the frame to be loaded.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.Size">
            <summary>Gets or sets the maximum X and Y dimensions of the thumbnail to be created.</summary>
            <remarks>The actual thumbnail size will be calculated based on the Size value, maintaining the aspect ratio from the original image. For example, if the source image is 640x480 and the size is 100x100 the resulting thumbnail size will be 100x75.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Thumbnail.ThrowOnZeroDimensions">
            <summary>Gets or sets a value that will thrown an exception if the resized image ends up with zero dimensions.</summary>
            <remarks>Default value is false. In this case the smallest dimension is always 1 pixel.</remarks>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Channels">
            <summary>Contains classes that directly manipulate image channels and colors.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand">
            <summary>This method may be used to adjust a channel by adding or subtracting a literal value or percentage. A negative value will reduce the amount of that channel and a positive value will increase it. A value of 0 will have no effect.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor">
            <summary>Initializes a new instance of the  AdjustChannelCommand class, used to modify each channel value of an image.Creates a new instance of AdjustChannelCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor">
            <summary>Initializes a new instance of the AdjustChannelCommand class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double)">
            <summary>Initializes a new instance of the AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel1 Property.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double)">
            <summary>Initializes a new instance of the AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel1 Property.</param>
            <param name="channel2">Amount to adjust the second channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel2 Property.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of the AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel1 Property.</param>
            <param name="channel2">Amount to adjust the second channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel2 Property.</param>
            <param name="channel3">Amount to adjust the third channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel3 Property.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of the AdjustChannelCommand class.</summary>
            <param name="adjustByPercentage">Determines if the channel values are considered a percentage rather than a literal value.</param>
            <param name="channel1">Amount to adjust the first channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel1 Property.</param>
            <param name="channel2">Amount to adjust the second channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel2 Property.</param>
            <param name="channel3">Amount to adjust the third channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel3 Property.</param>
            <param name="channel4">Amount to adjust the fourth channel. Valid values are -100 to 100 when using percentage and -255 to 255 when using literal. This can be changed later via the Channel4 Property.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AdjustChannelCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>Sets the image area which will be processed and also defines the bands or chunks of the image of which each will be sent to a separate thread for processing.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <param name="bounds">The area of the image which processing will be restricted to.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Clone">
            <summary>                          Creates a new object that is a copy of the             current instance.              </summary>
            <remarks>    Clone can be implemented either as a deep copy or     a shallow copy. In a deep copy, all objects are duplicated;     whereas, in a shallow copy, only the top-level objects are     duplicated and the lower levels contain references.     The resulting clone must be of the same type as or a     compatible type to the original instance.</remarks>
            <returns>A new object that is a copy of this instance.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>    Populates a SerializationInfo with the data needed     to serialize the target object.</summary>
            <remarks>    Any objects included in the SerializationInfo are     automatically tracked and serialized by the formatter.     Code that calls GetObjectData requires the     SecurityPermission for providing serialization services.     Associated enumeration:     SecurityPermissionFlag.SerializationFormatter.</remarks>
            <param name="info">The SerializationInfo to populate with data.</param>
            <param name="context">The destination (see StreamingContext) for this serialization.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>Performs the command on a specified section of the image.</summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AdjustByPercentage">
            <summary>Gets or sets the value which determines if the channel values are considered a percentage rather than a literal value.</summary>
            <remarks>    When this is set to true the value contained within each     of the Channel properties is considered to be based on a     percentage. When it is false it is considered to be a literal     byte value change.          Defaults to false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.AutoThread">
            <summary>If set to true the IThreadableCommand will automatically parallelize image processing.</summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel1">
            <summary>Gets or sets the amount to adjust the first channel.</summary>
            <remarks>Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel2">
            <summary>Gets or sets the amount to adjust the second channel.</summary>
            <remarks>Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel3">
            <summary>Gets or sets the amount to adjust the third channel.</summary>
            <remarks>Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.Channel4">
            <summary>Gets or sets the amount to adjust the fourth channel.</summary>
            <remarks>Valid values are -100 to 100 when AdjustByPercentage is true and -255 to 255 when it is false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is processed     in-place as opposed to returning a new image.     Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustChannelCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand">
            <summary>    This method may be used to adjust the hue, saturation and     luminance by adding or subtracting a literal value or     percentage. A negative value will reduce the amount of that     channel and a positive value will increase it. A value of 0     will have no effect.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor">
            <summary>Creates a new instance of AdjustHslCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor">
            <summary>Creates a new instance of AdjustHslCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor(System.Boolean,System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of AdjustHslCommand specifying the Hue, Saturation and Luminance values.</summary>
            <param name="adjustByPercentage">Set to true if you want the hue, saturation and luminance values to be considered percentages.</param>
            <param name="hue">Amount to adjust the Hue. Valid values are -100 to 100 when using percentage and -240 to 240 when using literal.</param>
            <param name="saturation">Amount to adjust the Saturation. Valid values are -100 to 100 when using percentage and -240 to 240 when using literal.</param>
            <param name="luminance">Amount to adjust the Luminance. Valid values are -100 to 100 when using percentage and -240 to 240 when using literal.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AdjustHslCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread for processing.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <param name="bounds">The area of the image which processing will be restricted to.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Clone">
            <summary>    Creates a new object that is a copy of the current     instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
            <remarks>    Clone can be implemented either as a deep copy or     a shallow copy. In a deep copy, all objects are duplicated;     whereas, in a shallow copy, only the top-level objects are     duplicated and the lower levels contain references.     The resulting clone must be of the same type as or a     compatible type to the original instance.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>    Populates a SerializationInfo with the data needed     to serialize the target object.</summary>
            <remarks>    Any objects that are included in the     SerializationInfo are automatically tracked and     serialized by the formatter.     Code that calls GetObjectData requires the      SecurityPermission for providing serialization services.     Associated enumeration:      SecurityPermissionFlag.SerializationFormatter.</remarks>
            <param name="info">The  SerializationInfo to populate with data.</param>
            <param name="context">                          The destination (see              StreamingContext) for this serialization.              </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>Performs the command on a specified section of the image.</summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AdjustByPercentage">
            <summary>Gets or sets a value to indicate if the hue, saturation and luminance values will be considered percentages instead of literal values.</summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.AutoThread">
            <summary>If set to true the IThreadableCommand will automatically parallelize image processing.</summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Hue">
            <summary>Gets or sets the value of hue.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is processed     in-place as opposed to returning a new image.     Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Luminance">
            <summary>Gets or sets the value of luminance.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.Saturation">
            <summary>Gets or sets the value of saturation.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.AdjustHslCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand">
            <summary>Apply a Look-Up-Table to an image. A Look-Up-Table is an array of 256 byte values which are used to substitute for the image pixel data. This allows you to modify each pixel component value.</summary>
            <remarks>This command will not work on 1-bit or 4-bit images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor">
            <summary>Create an ApplyLutCommand used to modify the Look-up-table of an image.Creates a new instance of ApplyLutCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor">
            <summary>Creates a new instance of ApplyLutCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand specifying channel1.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand specifying channel1 and channel2.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic).</param>
            <param name="channel2">An array of 256 bytes, representing the second color channel. This can be null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[],System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand specifying channel1, channel2 and channel3.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic).</param>
            <param name="channel2">An array of 256 bytes, representing the second color channel. This can be null (Nothing in Visual Basic).</param>
            <param name="channel3">An array of 256 bytes, representing the third color channel. This can be null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
            <summary>Creates a new instance of ApplyLutCommand specifying channel1, channel2, channel3, and channel4.</summary>
            <param name="channel1">An array of 256 bytes, representing the first color channel. This can be null (Nothing in Visual Basic).</param>
            <param name="channel2">An array of 256 bytes, representing the second color channel. This can be null (Nothing in Visual Basic).</param>
            <param name="channel3">An array of 256 bytes, representing the third color channel. This can be null (Nothing in Visual Basic).</param>
            <param name="channel4">An array of 256 bytes, representing the fourth color channel. This can be null (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[])">
            <summary>Creates a new instance of ApplyLutCommand specifying channel1 for two byte per pixel images.</summary>
            <param name="channel1">    An array of 65536 Int32s, representing the first color     channel. This can be null     (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[],System.Int32[],System.Int32[])">
            <summary>Creates a new instance of ApplyLutCommand specifying channel1, channel2 and channel3 for two byte per pixel images.</summary>
            <param name="channel1">    An array of 65536 Int32s, representing the first color     channel. This can be null     (Nothing in Visual Basic).</param>
            <param name="channel2">    An array of 65536 Int32s, representing the second color     channel. This can be null     (Nothing in Visual Basic).</param>
            <param name="channel3">    An array of 65536 Int32s, representing the third color     channel. This can be null     (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
            <summary>Creates a new instance of ApplyLutCommand specifying channel1, channel2, channel3, and channel4 for two byte per pixel images.</summary>
            <param name="channel1">    An array of 65536 Int32s, representing the first color     channel. This can be null     (Nothing in Visual Basic).</param>
            <param name="channel2">    An array of 65536 Int32s, representing the second color     channel. This can be null     (Nothing in Visual Basic).</param>
            <param name="channel3">    An array of 65536 Int32s, representing the third color     channel. This can be null     (Nothing in Visual Basic).</param>
            <param name="channel4">    An array of 65536 Int32s, representing the fourth color     channel. This can be null     (Nothing in Visual Basic).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ApplyLutCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread for processing.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <param name="bounds">The area of the image which processing will be restricted to.</param>
            <param name="bands">An array of Rectangles which represent the desired bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.Clone">
            <summary>    Creates a new object that is a copy of the current     instance.</summary>
            <returns>A new object that is a copy of this instance.</returns>
            <remarks>    Clone can be implemented either as a deep copy or     a shallow copy. In a deep copy, all objects are duplicated;     whereas, in a shallow copy, only the top-level objects are     duplicated and the lower levels contain references.     The resulting clone must be of the same type as or a     compatible type to the original instance.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Returns the look-up-table for a single channel.</summary>
            <returns>The look-up-table for the specified channel.</returns>
            <param name="channel">The channel you want to retrieve the look-up-table from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>    Populates a SerializationInfo with the data needed     to serialize the target object.</summary>
            <remarks>    Any objects that are included in the     SerializationInfo are automatically tracked and     serialized by the formatter.     Code that calls GetObjectData requires the      SecurityPermission for providing serialization services.     Associated enumeration:      SecurityPermissionFlag.SerializationFormatter.</remarks>
            <param name="info">                          The              SerializationInfo to populate with data.              </param>
            <param name="context">                          The destination (see              StreamingContext) for this serialization.              </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>InternalActualCommand does the actual work of the image processing command.</summary>
            <returns>Null (Nothing in VB)</returns>
            <param name="source">The source image for processing. This may be different from the original image.</param>
            <param name="dest">The destination image. Dest will be null when InPlaceProcessing is true or when ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process. When the destination image is non-null, it will always be the same size as imageArea. ImageArea only differs in size from the source image when the command is a subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>Performs the command on a specified section of the image.</summary>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut">
            <summary>Sets the look-up-table for a single channel.</summary>
            <remarks>The byte array must have 256 elements.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Byte[])">
            <summary>Sets a lookup table for a single channel.</summary>
            <param name="channel">The channel you want to set.</param>
            <param name="lut">The look-up-table byte array.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.SetChannelLut(Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32[])">
            <summary>Sets a lookup table for a single channel.</summary>
            <remarks>This method is for transforming two byte per pixel images. It must be given a table of 65536 Int32s.</remarks>
            <param name="channel">The channel you want to set.</param>
            <param name="lut">The look-up-table array.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommand.AutoThread">
            <summary>If set to true the IThreadableCommand will automatically parallelize image processing.</summary>
            <remarks>Defaults to false.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase">
            <summary>This is a base-class for creating look up table commands. This class is abstract and cannot be instantiated on its own.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>    Populates a SerializationInfo with the data needed     to serialize the target object.</summary>
            <remarks>    Any objects that are included in the     SerializationInfo are automatically tracked and     serialized by the formatter.     Code that calls GetObjectData requires the      SecurityPermission for providing serialization services.     Associated enumeration:      SecurityPermissionFlag.SerializationFormatter.</remarks>
            <param name="info">The  SerializationInfo to populate with data.</param>
            <param name="context">The destination (see  StreamingContext) for this serialization.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.InPlaceProcessing">
            <summary>Indicates whether or not the command will operate on the source image alone.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ApplyLutCommandBase.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand">
            <summary>    This command will remove the alpha information from an     image by blending the transparent areas with a solid     color.</summary>
            <remarks>This command requires an image containing alpha information.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor">
            <summary>Creates a  FlattenAlphaCommand that can be used to remove alpha information from an image.Creates a new instance of FlattenAlphaCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor">
            <summary>Creates a new instance of FlattenAlphaCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor(System.Drawing.Color)">
            <summary>Creates a new instance of FlattenAlphaCommand specifying the color used to replace the alpha.</summary>
            <param name="color">The background color to blend with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of FlattenAlphaCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>    Populates a SerializationInfo with the data needed     to serialize the target object.</summary>
            <remarks>    Any objects that are included in the     SerializationInfo are automatically tracked and     serialized by the formatter.     Code that calls GetObjectData requires the      SecurityPermission for providing serialization services.     Associated enumeration:      SecurityPermissionFlag.SerializationFormatter.</remarks>
            <param name="info">                          The              SerializationInfo to populate with data.              </param>
            <param name="context">                          The destination (see              StreamingContext) for this serialization.              </param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.Color">
            <summary>Gets or sets the color to use for the transparent areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.FlattenAlphaCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand">
            <summary>Use this command to invert the image.</summary>
            <remarks>    Uses a highly optimized invert routine on RGB images when     AllChannels are included. You may specify any or all channels     to invert.     Inverting an image creates a photo negative by     subtracting 255 from each channel value.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.#ctor">
            <summary>Creates a new instance of the InvertCommand class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.#ctor">
            <summary>Creates a new instance of InvertCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of InvertCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the InvertCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo where the data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>InternalActualCommand does the actual work of the image processing command.</summary>
            <param name="source">The source image for processing. This may be different from the original image.</param>
            <param name="dest">The destination image. Dest will be null when InPlaceProcessing is true or when ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process. When the destination image is non-null, it will always be the same size as imageArea. ImageArea only differs in size from the source image when the command is a subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag specifying which channels to process.</summary>
            <remarks>Default value is ChannelFlags.AllChannels</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.InvertCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand">
            <summary>This command allows you to replace the channels of an existing image by substituting the channel values with those of an 8-bit grayscale image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor">
            <summary>Creates a new instance of the ReplaceChannelCommand object specifying a param array of channels.Creates a new instance of ReplaceChannelCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor">
            <summary>Creates a new instance of ReplaceChannelCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor(Atalasoft.Imaging.AtalaImage[])">
            <summary>Creates a new instance of ReplaceChannelCommand specifying the channel images.</summary>
            <param name="channelImage">A parameter array of grayscale AtalaImage's representing each channel in the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ReplaceChannelCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the ReplaceChannelCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo where the data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel1Image">
            <summary>Gets or sets a grayscale image to represent the first channel. Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel2Image">
            <summary>Gets or sets an 8-bit image to represent the second channel. Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel3Image">
            <summary>Gets or sets an 8-bit image to represent the third channel. Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.Channel4Image">
            <summary>Gets or sets an 8-bit image to represent the fourth channel. Set this to null if you want to skip this channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ReplaceChannelCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand">
            <summary>    This command will create an alpha channel for an image     based on a color value. If the image already contains alpha     information, the color will be blended into it.</summary>
            <remarks>    This method will convert 1-bit, 4-bit and 8-bit grayscale     images to 8-bit indexed. 24-bit images will be converted to     32-bit.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor">
            <summary>Creates a new instance of the SetAlphaColorCommand object.Creates a new instance of SetAlphaColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor">
            <summary>Creates a new instance of SetAlphaColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color)">
            <summary>Creates a new instance of SetAlphaColorCommand specifying color.</summary>
            <param name="color">Color used to create the alpha channel.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of SetAlphaColorCommand specifying color and tolerance.</summary>
            <param name="color">Color used to create the alpha channel.</param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 - 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary>Creates a new instance of SetAlphaColorCommand specifying color, tolerance, and merge type.</summary>
            <param name="color">Color used to create the alpha channel.</param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 - 100)</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Int32,System.Int32)">
            <summary>Creates a new instance of SetAlphaColorCommand specifying color, tolerance, merge type, matching alpha, and non-matching alpha.</summary>
            <param name="color">Color used to create the alpha channel.</param>
            <param name="tolerance">Tolerance percentage for finding matching colors. (0 - 100)</param>
            <param name="mergeType">The type of merge performed.</param>
            <param name="matchAlpha">The alpha value to use when a match of the color is found. (0 - 255)</param>
            <param name="nonMatchAlpha">The alpha value to use when a match of the color is not found. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SetAlphaColorCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the SetAlphaColorCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo where the data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Color">
            <summary>Gets or sets the color used to create the alpha channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MatchAlpha">
            <summary>Gets or sets the alpha value to use when a match of the color is found.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.MergeType">
            <summary>Gets or sets the type of merge performed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.NonMatchAlpha">
            <summary>Gets or sets the alpha value to use when a match of the color is not found.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaColorCommand.Tolerance">
            <summary>Gets or sets the tolerance percentage for finding matching colors.</summary>
            <remarks>Valid values are from 0 to 1.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand">
            <summary>    Creates an alpha channel for an image using an 8-bit     grayscale mask image to control transparency.</summary>
            <remarks>This command will result in a 16-bit grayscale-alpha or 32-bit RGBA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor">
            <summary>Creates a new instance of the SetAlphaFromMaskCommand object, used to create an image with alpha by setting the alpha values to the corresponding pixel value in a mask image.Creates a new instance of SetAlphaFromMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor">
            <summary>Creates a new instance of SetAlphaFromMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary>Creates a new instance of SetAlphaFromMask specifying maskImage, resizeMask and mergeType.</summary>
            <param name="maskImage">An 8-bit image used to generate the alpha channel.</param>
            <param name="resizeMask">Set to true if the mask should be resized to fit the image.</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(Atalasoft.Imaging.AtalaImage,System.Boolean,Atalasoft.Imaging.ImageProcessing.AlphaMergeType,System.Drawing.Point)">
            <summary>Creates a new instance of SetAlphaFromMask specifying maskImage, resizeMask, mergeType and position.</summary>
            <param name="maskImage">An 8-bit image used to generate the alpha channel.</param>
            <param name="resizeMask">Set to true if the mask should be resized to fit the image.</param>
            <param name="mergeType">The type of merge performed.</param>
            <param name="position">The x,y position to place the mask image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SetAlphaFromMaskCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo where the data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MaskImage">
            <summary>Gets or sets an 8-bit image used to generate the alpha channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.MergeType">
            <summary>Gets or sets the type of merge performed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.Position">
            <summary>Gets or sets the left, top position of the mask image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.ResizeMask">
            <summary>Gets or sets a valid to indicate if the mask should be resized to fit the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaFromMaskCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand">
            <summary>    This command will create an alpha channel based on a     numeric value.</summary>
            <remarks>    This method will convert 1-bit, 4-bit and 8-bit grayscale     images to 8-bit indexed. 24-bit images will be converted to     32-bit.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor">
            <summary>Creates a new instance of  SetAlphaValueCommand.Creates a new instance of SetAlphaValueCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor">
            <summary>Creates a new instance of SetAlphaValueCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor(System.Byte,Atalasoft.Imaging.ImageProcessing.AlphaMergeType)">
            <summary>Creates a new instance of SetAlphaValueCommand specifying the alpha value and merge type.</summary>
            <param name="alphaValue">A value of 0 to 255 indicating the opacity to use on the alpha channel.</param>
            <param name="mergeType">The type of merge performed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SetAlphaValueCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary>Apply the command to the given image.</summary>
            <returns>A new object of type  ImageResults.</returns>
            <remarks>The ImageResults object will always contain a valid Image property which represents the output of the command. This property may be the same as the input image.</remarks>
            <param name="image">The image which will by processed by the command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the SetAlphaValueCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo where the data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>InternalActualCommand does the actual work of the image processing command.</summary>
            <param name="source">The source image for processing. This may be different from the original image.</param>
            <param name="dest">The destination image. Dest will be null when InPlaceProcessing is true or when ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process. When the destination image is non-null, it will always be the same size as imageArea. ImageArea only differs in size from the source image when the command is a subclass of ImageRegionCommand and when there is a region of interest.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AlphaValue">
            <summary>Gets or sets a value of 0 to 255 indicating the opacity to use on the alpha channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.MergeType">
            <summary>Gets or sets the type of merge performed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SetAlphaValueCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand">
            <summary>This command will shift individual image channels.</summary>
            <remarks>    This command requires an image with at least 2 channels.     If the image does not contain at least 2 channels, the     PixelFormat will be changed to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor">
            <summary>Creates a new instance of the  ShiftChannelsCommand class, used to offset individual channels in an image.Creates a new instance of ShiftChannelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor">
            <summary>Creates a new instance of ShiftChannelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Creates a new instance of ShiftChannelsCommand specifying offsetX, offsetY and channelsToProcess.</summary>
            <param name="offsetX">Number of pixels to horizontally offset the channels.</param>
            <param name="offsetY">Number of pixels to vertically offset the channels.</param>
            <param name="channelsToProcess">The channels you want to shift.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags,System.Int32)">
            <summary>Creates a new instance of ShiftChannelsCommand specifying offsetX, offsetY, channelsToProcess and backgroundValue.</summary>
            <param name="offsetX">Number of pixels to horizontally offset the channels.</param>
            <param name="offsetY">Number of pixels to vertically offset the channels.</param>
            <param name="channelsToProcess">The channels you want to shift.</param>
            <param name="backgroundValue">A value used for uncovered areas of the image. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ShiftChannelsCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo where the data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.BackgroundValue">
            <summary>Gets or set a channel value to use for uncovered channel areas of the image.</summary>
            <remarks>This value should be between 0 and 255 inclusive.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.ChannelsToProcess">
            <summary>Gets or sets the ChannelFlags specifying which channels to process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetX">
            <summary>Gets or sets the number of pixels to horizontally offset the channels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.OffsetY">
            <summary>Gets or sets the number of pixels to vertically offset the channels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.ShiftChannelsCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand">
            <summary>Swaps one channel with another channel within the same image.</summary>
            <remarks>This command requires an image with at least 2 channels. If the image does not contain at least 2 channels, the PixelFormat will be changed to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor">
            <summary>Creates a new instance of the SwapChannelsCommand object. Creates a new instance of SwapChannel specifying channel1, channel2 and channel3. Creates a new instance of SwapChannel specifying channel1, channel2, channel3, and channel4. Creates a new instance of SwapChannel specifying a param array of channels. Creates a new instance of SwapChannelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor">
            <summary>Creates a new instance of SwapChannelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor(System.Int32[])">
            <summary>Creates a new instance of SwapChannelsCommand specifying the channels to swap.</summary>
            <param name="channel">A parameter array of the channel orders. Values must be between 1 and 4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SwapChannelsCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo where the data will be stored.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel1">
            <summary>Gets or sets the first channel in the image. Valid values are 1-4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel2">
            <summary>Gets or sets the second channel in the image. Valid values are 1-4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel3">
            <summary>Gets or sets the third channel in the image. Valid values are 1-4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.Channel4">
            <summary>Gets or sets the fourth channel in the image. Valid values are 1-4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Channels.SwapChannelsCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Document">
            <summary>Contains classes that are designed to be used with 1-bit document (binary) images. These classes are enabled in the professional edition.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode">
            <summary>The crop mode to use in the  AutoDeskewCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.None">
            <summary>    Do not crop the deskewed image. The resulting image will     be larger then the source image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.FullCrop">
            <summary>Crop all of the excess rotated area. The resulting image will be smaller then the source image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode.OriginalSize">
            <summary>Crop the deskewed image to the original size.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges">
            <summary>Specifies the edges to remove when using  BorderRemovalCommand.</summary>
            <remarks>Values can be or'ed together.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Left">
            <summary>The left edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Right">
            <summary>The right edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Top">
            <summary>The top edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Bottom">
            <summary>The bottom edge of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Vertical">
            <summary>The left and right edges of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.Horizontal">
            <summary>The top and bottom edges of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges.AllSides">
            <summary>The left, right, top, and bottom edges of the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod">
            <summary>Specifies the technique used for dithering in a DitherCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod.FloydSteinberg">
            <summary>Use Floyd-Steinberg error diffusion</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod.Ordered">
            <summary>Use matrix-based ordered dithering</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode">
            <summary>The type of morphological filter to use in the  MorphoDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Dilation">
            <summary>    Used to smooth small dark regions tending to enhance     black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Erosion">
            <summary>    Used to smooth small light regions tending to reduce     black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Open">
            <summary>The dilation of the erosion of the image used to reduce small black regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.Close">
            <summary>The erosion of the dilation of the image used to reduce small white regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode.BoundaryExtraction">
            <summary>Perform a boundary detection/extraction on a binary image. This will generate an outline of the foreground features of the input image</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod">
            <summary>Specifies the resampling method to apply using the  ResampleDocumentCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.BiLinear">
            <summary>    Uses bi-linear resampling. Yields good results when     enlarging images, and fairly fast.     Note: This was previously incorrectly     named NearestNeighbor.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.ScaleToGray">
            <summary>Converts the 1-bit binary image to grayscale as it resizes which retains the visual detail of the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.AreaAverage">
            <summary>Performs an area average of the binary image with a specified "cut-off" factor that will favor black or white pixels. Valid for reductions only.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod.EnlargeFast">
            <summary>Performs a quick pixel mapping when enlarging speed is more important than quality.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod">
            <summary>Thresholding Method.</summary>
            <remarks>Used in  DocumentPixelFormatChanger.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Simple">
            <summary>Simple Thresholding</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Global">
            <summary>Global Thresholding</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Document.ThresholdMethod.Adaptive">
            <summary>Adaptive Thresholding</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand">
            <summary>An ImageCommand used to convert a grayscale or color image into black and white using a weighted thresholding technique.</summary>
            <remarks>    The AdaptiveThresholdCommand can be used     to cleanup a color or grayscale image when converting to black     and white. It results in an image that generally renders text     and objects intact, while removing effects from color     shades.     Like global thresholding, adaptive     thresholding is used to separate desirable foreground image     objects from the background. This is based on the difference in     pixel intensities of each region, while global thresholding     uses a fixed threshold for all pixels and therefore works only     if the intensity histogram of the input image contains     obviously separated peaks corresponding to the desired subjects     and backgrounds. Hence it cannot deal with images containing,     for example, a strong illumination gradient. Local adaptive     thresholding selects an individual threshold for each pixel.     This allows for thresholding of an image whose global intensity     histogram doesn't contain distinctive peaks.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor">
            <summary>Initializes a new instance of  AdaptiveThresholdCommand.Initializes a new instance of  AdaptiveThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor">
            <summary>Creates a new instance of AdaptiveThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Int32)">
            <summary>Initializes a new instance of  AdaptiveThresholdCommand specifying the window size.</summary>
            <param name="windowSize">    The size of the examination window surround the current     pixel</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of  AdaptiveThresholdCommand specifying the window size and difference threshold.</summary>
            <param name="windowSize">    The size of the examination window surround the current     pixel</param>
            <param name="differenceThreshold">The value used for improving the thresholding results.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AdaptiveThresholdCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the AdaptiveThresholdCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    The method is called by the default implementation of     Apply. It determines if it is necessary to create a copy of the     source image in a different pixel format and if so, determines     the best new pixel format and allocates that image.</summary>
            <returns>A new image in a pixel format supported by the command or null to indicate that the original image is acceptable.</returns>
            <remarks>    The default implementation of ConstructChangedSourceImage     requests that the command report its preferred pixel format     (typically, this is the source image's pixel format, but some     commands support many pixel formats, but work best in gray, for     example), and if that is supported, returns a new image in the     preferred format if it is different from the source     image.     If the pixel format is not supported and     ApplyToAnyPixelFormat is set to true, the command is queried     for its best alternate pixel format and a new image is returned     in that pixel format. If ApplyToAnyPixelFormat is set to false,     ConstructChangedSourceImage will throw an     IncompatiblePixelFormatException.     If an error occurs, ConstructChangedImage should throw an     exception. Any new image constructed by ConstructChangedImage     must be a pixel format supported by this command.</remarks>
            <param name="image">The original source image passed to Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.DifferenceThreshold">
            <summary>Gets or sets a value used for improving the thresholding results.</summary>
            <remarks>In local adaptive thresholding, an individual threshold for each pixel is based on the range of intensity values in its local neighborhood. In this class, a local mean value is used as the threshold. The situation can be improved if the threshold employed is not the mean, but "mean - DifferenceThreshold". The default value is 7.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AdaptiveThresholdCommand.WindowSize">
            <summary>Gets or sets the size of local window acting on each pixel to find local statistics.</summary>
            <remarks>Default value is 15.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand">
            <summary>The AutoDeskewCommand automatically deskews a binary image using Atalasoft's patent pending auto-deskew algorithm.</summary>
            <remarks>    This command works best with images containing horizontal     text.     There are a few ways to improve performance. Decrease the          LimitAngle and      Precision or pass in a smaller rectangular area containing     the horizontally aligned text area. The      Coverage property can be decreased to increase performance,     however it will result in loss accuracy. For guaranteed     accuracy, set the Coverage property to 100.     The      SkewAngle property is set to the last detected skew angle.     See      GetDeskewAngle to determine the skew angle without actually     rotating the image.     As of 6.0 AutoDeskewCommnd now additionally supports the     following image formats:     Pixel8bppGrayscale, Pixel24bppBgr, Pixel32bppBgr and     Pixel32bppBgra.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor">
            <summary>Create an AutoDeskewCommand that will attempt to calculate the amount of skewing in an image, then rotate the image to correct the skew.Initializes a new instance of the AutoDeskewCommand. Initializes a new instance of the AutoDeskewCommand with default settings</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor">
            <summary>Creates a new instance of AutoDeskewCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32)">
            <summary>Initializes a new instance of the AutoDeskewCommand specifying the precision and limit angle.</summary>
            <param name="precision">The precision of the deskew angle calculation. This value is the inverse of the degree precision.</param>
            <param name="limitAngle">The maximum deskew angle in degrees. (-360 to 360 excluding 0)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCropMode,System.Drawing.Color,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of the AutoDeskewCommand specifying the precision, limit angle, crop mode, background color, and rectangular area to process.</summary>
            <param name="precision">The precision of the deskew angle calculation. This value is the inverse of the degree precision.</param>
            <param name="limitAngle">The maximum deskew angle in degrees. (-360 to 360 excluding 0)</param>
            <param name="cropMode">The method of cropping the resulting deskewed image.</param>
            <param name="backgroundColor">The background color to use when deskewing the image.</param>
            <param name="area">The rectangular area that will be used for determining the deskew angle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Int32,System.Int32,System.Drawing.Rectangle)">
            <summary>Initializes a new instance of the AutoDeskewCommand specifying the precision, limit angle, and rectangular area to process.</summary>
            <param name="precision">The precision of the deskew angle calculation. This value is the inverse of the degree precision.</param>
            <param name="limitAngle">The maximum deskew angle in degrees. (-360 to 360 excluding 0)</param>
            <param name="area">The rectangular area that will be used for determing the deskew angle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Drawing.Rectangle)">
            <summary>Initializes a new instance of the AutoDeskewCommand with default settings and a rectangular area to process.</summary>
            <param name="area">A rectangular area that will be used for determining the deskew angle.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AutoDeskewCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ConstructImageResults">
            <summary>Constructs the results object for this command.</summary>
            <returns>A new object of type ImageResults representing the results for this command.</returns>
            <remarks>    The default implementation returns an object of type     ImageResults. If your command requires an object with more     information, subclass ImageResults and add in the information     you need. Your command will override ConstructImageResults and     return your new object.     The object allocated here is passed to     PerformActualCommand as a reference parameter, meaning the     entire object can be changed at that point too.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetDeskewAngle(Atalasoft.Imaging.AtalaImage)">
            <summary>GetDeskewAngle returns the skew angle of the image without changing the image at all.</summary>
            <returns>The skew angle (in degrees) of the image.</returns>
            <remarks>See the  SkewAngle property for determining the skew angle after processing the image.</remarks>
            <param name="sourceImage">The image to calculate the skew angle from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.IsPixelFormatSupported(Atalasoft.Imaging.PixelFormat)">
            <summary>    Returns a value indicating if the specified pixel format     is supported.</summary>
            <remarks>All derived commands must override this property.</remarks>
            <param name="format">The pixel format to query.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Area">
            <summary>Gets or sets rectangular area that will be used for determining the skew angle.</summary>
            <remarks>This value by default is Rectangle.Empty and will use the entire image for calculating the angle.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.BackgroundColor">
            <summary>Gets or sets the background color to use when de-skewing the image.</summary>
            <remarks>The background color is only relevant when the CropMode is set to None or OriginalSize. The default value is White.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Coverage">
            <summary>Represents the percentage of the image that will be randomly sampled when determining the skew angle.</summary>
            <remarks>    Given the random nature of the coverage, low values     result in must faster performance than 100 coverage with     generally the same results. A default value of 8 was derived     after tests with many images. This results in accurate skew     angle detection with fast speed. This property is exposed for     edge cases where 8 is not sufficient. When accuracy is of     utmost importance at the expense of speed, set this value to     100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.CropMode">
            <summary>Gets or sets a value indicating the method of cropping the resulting de-skewed image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.ExtractBoundary">
            <summary>Gets or sets a value which will pre-process the image by removing solid filled areas of the image.</summary>
            <remarks>Setting this value to false will improve performance at the expense of accuracy. If the image is known not to have solid filled areas, then it's safe to set this property to false, for an approximate 50 performance gain. The default value is true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.LimitAngle">
            <summary>Gets or sets the maximum skew angle in degrees.</summary>
            <remarks>Decreasing this value improves performance, while increasing improves the chance that a drastically skewed image will be straightened. The default value is 20 degrees.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.Precision">
            <summary>Gets or sets the precision of the de-skew angle calculation.</summary>
            <remarks>This value is the inverse of the smallest angle increment that it will find. For example, a value of 1 = 1 degree precision, 2 = 1/2 degree precision, 4 = 1/4 degree precision, etc. The smaller the value the more time it takes to calculate the de-skew angle. The default value is 2 (or 1/2 a degree).</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SkewAngle">
            <summary>Gets a value indicating the last detected skew angle.</summary>
            <remarks>Query this read-only property to determine the last detected skew angle.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults">
            <summary>This class represents the results of applying the  AutoDeskewCommand on an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.#ctor">
            <summary>Constructs a new AutoDeskewImageResults object.Constructs a new AutoDeskewImageResults object.</summary>
            <remarks>This class is created by calling the AutoDeskewCommand.Apply() method. You don't need to construct one normally.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.#ctor">
            <summary>Constructs a new AutoDeskewImageResults object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.#ctor(System.Double)">
            <summary>Constructs a new AutoDeskewImageResults object.</summary>
            <param name="skewAngle">The detected skew angle.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.AutoDeskewResults.SkewAngle">
            <summary>Gets the detected angle of rotation in the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand">
            <summary>An ImageCommand that removes solid borders from document images.</summary>
            <remarks>    This command can be used to remove black solid borders     from the edges of images. A      Tolerance of 0 will only work with perfect solid borders.     Use a tolerance between 0 and 100 to account for minor noise in     the border. Set      Edges to any of the sides (AllSides to remove borders from     all 4 sides). If      Despeckle is true, the image will be despeckled prior to     calculating the border, only if the image is binary. Note that     the image that's returned from Apply will not be despeckled,     only the image used in the calculation.     To calculate the border of the image, without cropping,     use the      GetBorder method. GetBorder     ignores the Edges property and returns the border from     all sides.     For a more advanced Border Removal, see the      Advanced Document Cleanup module.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor">
            <summary>Initializes a new instance of  BorderRemovalCommand.Initializes a new instance of  BorderRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor">
            <summary>Creates a new instance of BorderRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges)">
            <summary>Initializes a new instance of  BorderRemovalCommand specifying the edges to remove.</summary>
            <param name="edges">Indicates which of the 4 sides are to be removed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double)">
            <summary>Initializes a new instance of  BorderRemovalCommand specifying the edges to remove, and tolerance.</summary>
            <param name="edges">Indicates which of the 4 sides are to be removed.</param>
            <param name="tolerance">Indicates the tolerance of the border detection. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalEdges,System.Double,System.Boolean)">
            <summary>Initializes a new instance of  BorderRemovalCommand specifying the edges to remove, tolerance, and despeckling.</summary>
            <param name="edges">Indicates which of the 4 sides are to be removed.</param>
            <param name="tolerance">Indicates the tolerance of the border detection. (0 to 100)</param>
            <param name="despeckle">Indicates if the calculated border will be despeckled first.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BorderRemovalCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.ConstructImageResults">
            <summary>Constructs the results object for this command.</summary>
            <returns>A new object of type ImageResults representing the results for this command.</returns>
            <remarks>    The default implementation returns an object of type     ImageResults. If your command requires an object with more     information, subclass ImageResults and add in the information     you need. Your command will override ConstructImageResults and     return your new object.     The object allocated here is passed to     PerformActualCommand as a reference parameter, meaning the     entire object can be changed at that point too.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetBorder(Atalasoft.Imaging.AtalaImage)">
            <summary>Calculates the border of the image that is used in the  BorderRemovalCommand to remove the borders.</summary>
            <returns>A rectangle containing the position, and size of the image with the borders removed.</returns>
            <remarks>Use this method to calculate the borders of an image, without actually removing them.</remarks>
            <param name="sourceImage">The image to calculate the borders from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Despeckle">
            <summary>Gets or sets a value indicating if the calculated border will be despeckled first.</summary>
            <remarks>Defaults to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Edges">
            <summary>Gets or sets a value indicating which of the 4 sides are to be removed.</summary>
            <remarks>Values may be or'ed together to account for more than one side. Defaults to AllSides.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalCommand.Tolerance">
            <summary>Gets or sets a value indicating the tolerance of the border detection.</summary>
            <remarks>The default value is 0. Valid values range from 0 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults">
            <summary>This class represents the results of applying the  BorderRemovalCommand on an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults.#ctor">
            <summary>Constructs a new BorderRemovalResults object</summary>
            <remarks>This class is created by calling the BorderRemovalCommand.Apply() method. You don't need to construct one normally.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.BorderRemovalResults.Border">
            <summary>Gets the detected border.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand">
            <summary>    This command is used for converting color or gray images     to black and white using halftoning techniques to simulate gray     in the final image. This command operates best on photographic     images.     Dithering is done using either Ordered Dithering or     Floyd-Steinberg Error Diffusion dithering.     With Ordered Dithering, the dithering matrix is fully     replaceable and can be made to simulate custom halftone     screens.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor">
            <summary>Constructs a new DitherCommand to convert multi-bit images to 1 bit per pixel images using ordered dithering as the method.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor">
            <summary>Constructs a new DitherCommand to convert multi-bit images to 1 bit per pixel images using ordered dithering as the method.</summary>
            <remarks>The default dithering matrix will be a 16x16 matrix with evenly distributed gray levels.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.DitheringMethod)">
            <summary>Constructs a new DitherCommand to convert multi-bit images to 1 bit per pixel images using the supplied method.</summary>
            <param name="method">The method to be used for dithering.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DitherCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Matrix">
            <summary>Gets or sets the matrix to use for ordered dithering. The matrix must have either 4, 16, 64, or 256 elements in it representing 2x2, 4x4, 8x8 or 16x16 matrices, respectively.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Method">
            <summary>Set or get the method to be used for dithering.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Serpentine">
            <summary>Set or get whether or not Floyd Steinberg dithering will operate in alternating left to right/right to left patterns or simply left to right.</summary>
            <remarks>Default value is true. Using serpentine set to true can eliminate certain artifacting common in Floyd Steinberg dithering.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard16x16">
            <summary>Returns a standard 16x16 ordered dithering matrix.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard2x2">
            <summary>Returns a standard 2x2 ordered dithering matrix.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard4x4">
            <summary>Returns a standard 4x4 ordered dithering matrix.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.Standard8x8">
            <summary>Returns a standard 8x8 ordered dithering matrix.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DitherCommand.SupportedPixelFormats">
            <summary>Returns the set of PixelFormats that are supported by this image command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand">
            <summary>The DocumentDespeckleCommand is useful for removing small isolated features in a bitonal image without eroding solid features. The most common use is as a despeckle filter for document images.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.#ctor">
            <summary>Initializes a new instance of DocumentDespeckleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.#ctor">
            <summary>Creates a new instance of DocumentDespeckleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DocumentDespeckleCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the DocumentDespeckleCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>Does the actual work of the image processing command.</summary>
            <returns>Null (Nothing in VB).</returns>
            <param name="source">The source image for processing. This may be different from the original image.</param>
            <param name="dest">The destination image.</param>
            <param name="imageArea">An area of the source image to process. When the destination image is non-null, it will always be the same size as imageArea. ImageArea only differs in size from the source image when the command is a subclass of ImageRegionCommand and when there is a region of interest.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifyDest(Atalasoft.Imaging.AtalaImage)">
            <summary>Called to verify the dest provided to  PerformActualCommand.</summary>
            <param name="dest">The destination image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.VerifySource(Atalasoft.Imaging.AtalaImage)">
            <summary>Call to verify the source image provided to  PerformActualCommand.</summary>
            <param name="source">The source image for processing. This may be different from the original image.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentDespeckleCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand">
            <summary>Perform a hit-or-miss transformation on a binary image.</summary>
            <remarks>    Hit or Miss is a basic tool for finding geometric shapes     within an image. The masks used determine the shapes that are     detected.     The foreground mask operates on foreground features and     the background mask on background features. Together they     detect foreground-background transitions in the input     image.     The two masks used are normally the same size and     must contain mutually-exclusive elements: if a     mask position in A contains a 1, the corresponding position in     B must contain a 0.     For example, these masks will find vertical edges on the     left sides of the foreground image.     mask A: mask B:     0 0 0 0 0 0     0 1 1 1 0 0     0 0 0 0 0 0</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor">
            <summary>Create a new instance of DocumentHitOrMissCommand specifying foregroundMask and backgroundMask.Creates a new instance of DocumentHitOrMissCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor">
            <summary>Creates a new instance of DocumentHitOrMissCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary>Creates a new instance of DocumentHitOrMissCommand specifying the foreground and background masks.</summary>
            <param name="foregroundMask">A matrix of integer values to act as the foreground mask.</param>
            <param name="backgroundMask">A matrix of integer values to act as the background mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DocumentHitOrMissCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.BackgroundMask">
            <summary>Gets or sets a matrix of integer values to act as the background mask.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.ForegroundMask">
            <summary>Gets or sets a matrix of integer values to act as the foreground mask.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentHitOrMissCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand">
            <summary>Applies a median filter to a binary image.</summary>
            <remarks>A median filter will smooth out the image and remove dots and noise. This makes a good despeckle filter for a binary image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor">
            <summary>Creates a new instance of DocumentMedianCommand. Creates a new instance of DocumentMedianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor">
            <summary>Creates a new instance of DocumentMedianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of DocumentMedianCommand specifying filterSize.</summary>
            <param name="filterSize">The size of the filter to use for this command. (3, 5, 7, etc)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DocumentMedianCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    The method is called by the default implementation of     Apply. It determines if it is necessary to create a copy of the     source image in a different pixel format and if so, determines     the best new pixel format and allocates that image.</summary>
            <returns>A new image in a pixel format supported by the command or null to indicate that the original image is acceptable.</returns>
            <remarks>    The default implementation of ConstructChangedSourceImage     requests that the command report its preferred pixel format     (typically, this is the source image's pixel format, but some     commands support many pixel formats, but work best in gray, for     example), and if that is supported, returns a new image in the     preferred format if it is different from the source     image.     If the pixel format is not supported and     ApplyToAnyPixelFormat is set to true, the command is queried     for its best alternate pixel format and a new image is returned     in that pixel format. If ApplyToAnyPixelFormat is set to false,     ConstructChangedSourceImage will throw an     IncompatiblePixelFormatException.     If an error occurs, ConstructChangedImage should throw an     exception. Any new image constructed by ConstructChangedImage     must be a pixel format supported by this command.</remarks>
            <param name="image">The original source image passed to Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.FilterSize">
            <summary>Gets or sets the size of the filter to use for this command.</summary>
            <remarks>Should be an odd positive value. The default value is 3.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentMedianCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger">
            <summary>This PixelFormatChanger is suited for document images and can be set to AtalaImage.PixelFormatChanger.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.#ctor(Atalasoft.Imaging.PixelFormatChanger)">
            <summary>Creates a new instance of DocumentPixelFormatChanger.</summary>
            <param name="basePixelChanger">The base PixelFormatChanger that will be used when the target pixel format is not PixelFormat.Pixel1bppIndexed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GetThresholdCommand">
            <summary>Returns the threshold command used based on the value of  ThresholdMethod.</summary>
            <returns>The threshold command to use.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.AdaptiveThresholdCommand">
            <summary>Gets the  AdaptiveThresholdCommand used by the DocumentPixelFormatChanger.</summary>
            <remarks>This command is used when  ThresholdMethod is set to Adaptive.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.BasePixelChanger">
            <summary>Gets the base PixelFormatChanger passed into the DocumentPixelChanger constructor.</summary>
            <remarks>This PixelFormatChanger will be used when the target pixel format is not 1-bit.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.GlobalThresholdCommand">
            <summary>Gets the  GlobalThresholdCommand used by the DocumentPixelFormatChanger.</summary>
            <remarks>This command is used when  ThresholdMethod is set to Global.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.SimpleThresholdCommand">
            <summary>Gets the  SimpleThresholdCommand that used by the DocumentPixelFormatChanger.</summary>
            <remarks>This command is used when  ThresholdMethod is set to Simple.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentPixelFormatChanger.ThresholdMethod">
            <summary>Gets or sets the threshold method to use when converting to 1-bit images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand">
            <summary>Apply morphological thinning to a 1-bit image.</summary>
            <remarks>    This will reduce the geometric size of an image, leaving     only a skeletonized frame behind.     This function requires two sets of masks. The foreground     masks represents foreground matching masks and the background     masks should be the compliments of the foreground masks. (swap     ones and zeros).     A typical set of foreground masks is:     0 0 0 1 0 0 1 1 0 1 1 1 1 1 1 1 1 1 0 1 1 0 0 1     1 1 1 1 1 0 1 1 0 1 1 0 1 1 1 0 1 1 0 1 1 0 1 1     1 1 1 1 1 1 1 1 0 1 0 0 0 0 0 0 0 1 0 1 1 1 1 1     The background masks are compliments of these (1 and 0     reversed).     Note that the content of each mask is the preceding mask,     rotated 45 deg.     The process works by applying each of these masks in     pairs (A[x], B[x]) for all pairs, until MaxIterations has been     reached or until there is no change in the image. This can be a     long process.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor">
            <summary>Creates a new instance of DocumentThinningCommand.Creates a new instance of DocumentThinningCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor">
            <summary>Creates a new instance of DocumentThinningCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[],Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <summary>Creates a new instance of DocumentThinningCommand specifying foregroundMask and backgroundMask.</summary>
            <param name="foregroundMask">A matrix array of integer values to act as the foreground mask.</param>
            <param name="backgroundMask">A matrix array of integer values to act as the background mask.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DocumentThinningCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetBackgroundMask">
            <summary>Returns the background mask.</summary>
            <returns>A IntegerMatrix object containing the mask values.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetForegroundMask">
            <summary>Returns the foreground mask.</summary>
            <returns>A IntegerMatrix object containing the mask values.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetBackgroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns>Sets the background mask to use.</returns>
            <param name="mask">A IntegerMatrix object containing the mask values.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SetForegroundMask(Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix[])">
            <returns>Sets the foreground mask to use.</returns>
            <param name="mask">A IntegerMatrix object containing the mask values.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.MaxIterations">
            <summary>Gets or sets the maximum number of iterations to use when processing the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DocumentThinningCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand">
            <summary>Converts a multi-bit image (color or grayscale) to a single bit black and white image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor">
            <summary>Constructs a new DynamicThresholdCommand object</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor">
            <summary>Constructs a new DynamicThresholdCommand object</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Int32)">
            <summary>Constructs a new DynamicThresholdCommand object</summary>
            <param name="windowSize">    The size of the examination window surround the current     pixel.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance of DynamicThresholdCommand specifying the window size, difference threshold and black grouping.</summary>
            <param name="windowSize">    The size of the examination window surround the current     pixel</param>
            <param name="differenceThreshold">Value used to improving the thresholding results.</param>
            <param name="blackGrouping">A percentile indication of how tightly grouped black pixels need to be. Default value is 0.25.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DynamicThresholdCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the DynamicThresholdCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    The method is called by the default implementation of     Apply. It determines if it is necessary to create a copy of the     source image in a different pixel format and if so, determines     the best new pixel format and allocates that image.</summary>
            <returns>A new image in a pixel format supported by the command or null to indicate that the original image is acceptable.</returns>
            <remarks>    The default implementation of ConstructChangedSourceImage     requests that the command report its preferred pixel format     (typically, this is the source image's pixel format, but some     commands support many pixel formats, but work best in gray, for     example), and if that is supported, returns a new image in the     preferred format if it is different from the source     image.     If the pixel format is not supported and     ApplyToAnyPixelFormat is set to true, the command is queried     for its best alternate pixel format and a new image is returned     in that pixel format. If ApplyToAnyPixelFormat is set to false,     ConstructChangedSourceImage will throw an     IncompatiblePixelFormatException.     If an error occurs, ConstructChangedImage should throw an     exception. Any new image constructed by ConstructChangedImage     must be a pixel format supported by this command.</remarks>
            <param name="image">The original source image passed to Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.BlackGrouping">
            <summary>A percentile indication of how tightly grouped black pixels need to be.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.DifferenceThreshold">
            <summary>Gets or sets a value used to improving the thresholding results.</summary>
            <remarks>In local adaptive thresholding, an individual threshold for each pixel is based on the range of intensity values in its local neighborhood. In this class, a local mean value is used as the threshold. The situation can be improved if the threshold employed is not the mean, but "mean - DifferenceThreshold". The default value is 7.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.DynamicThresholdCommand.WindowSize">
            <summary>Gets or sets the size of local window acting on each pixel to find local statistics.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand">
            <summary>An ImageCommand used to convert a grayscale or color image into black and white using a global thresholding technique.</summary>
            <remarks>Global thresholding is the simplest of all thresholding techniques. It will partition the image histogram by using a single global threshold. Segmentation is then accomplished by scanning the image pixel by pixel and labelling each pixel as object or background. The success of this method depends entirely on how well the histogram can be partitioned.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor">
            <summary>Initializes a new instance of  GlobalThresholdCommand.Initializes a new instance of  GlobalThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor">
            <summary>Creates a new instance of GlobalThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor(System.Int32)">
            <summary>Initializes a new instance of  GlobalThresholdCommand specifying the initial threshold value.</summary>
            <param name="initThreshold">The initial threshold value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of GlobalThresholdCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.InitThreshold">
            <summary>Gets or sets the initial threshold value.</summary>
            <remarks>When there is reason to believe that the background and object occupy comparable areas in the image, a good initial value for InitThreshold is the average gray level of the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.GlobalThresholdCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand">
            <summary>This class will perform a mathematical morphological operation to a binary image.</summary>
            <remarks>    Morphology is the study of form and structure. In image     processing, it encompasses a set of techniques that merge     traditional image processing with set theory from     mathematics.     See Morphological Filters for more information about     morphology.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor">
            <summary>Create a new instance of MorphoDocumentCommand.Creates a new instance of MorphoDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor">
            <summary>Creates a new instance of MorphoDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode)">
            <summary>Create a new instance of MorphoDocumentCommand specifying mode.</summary>
            <param name="mode">The type of morphological filter to perform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary>Create a new instance of MorphoDocumentCommand specifying mode and mask.</summary>
            <param name="mode">The type of morphological filter to perform.</param>
            <param name="mask">A matrix of integers controlling the behavior and depth of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MorphoDocumentCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mask">
            <summary>Gets or sets a matrix of integers controlling the behavior and depth of the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.Mode">
            <summary>Gets or set the type of morphological filter to perform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.MorphoDocumentCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand">
            <summary>Overlay an image using an alpha mask.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand. Creates a new instance of OverlayMaskedDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand specifying topImage and mask.</summary>
            <param name="topImage">The top binary image to overlay.</param>
            <param name="mask">A binary image indicating the transparent and opaque regions of the overlay.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Point)">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand specifying topImage, mask and position.</summary>
            <param name="topImage">The top binary image to overlay.</param>
            <param name="mask">A binary image indicating the transparent and opaque regions of the overlay.</param>
            <param name="position">The position of the top image on the bottom image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of OverlayMaskedDocumentCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.InPlaceProcessing">
            <summary>Gets a value indicating if the image is processed in place instead of generating a new image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Mask">
            <summary>Gets or sets the 1-bit image indicating the transparent and opaque regions of the overlay.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.Position">
            <summary>Gets or sets the position of the top image on the bottom image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.OverlayMaskedDocumentCommand.TopImage">
            <summary>Gets or sets the top 1-bit image to overlay.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand">
            <summary>Resamples a binary image.</summary>
            <remarks>This command can be used to efficiently perform a "scale to gray" resample on a document image as well as "favor to black" using the AreaAverage method and specifying the cut-off value.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor">
            <summary>Creates a new instance of ResampleDocumentCommand. Creates a new instance of ResampleDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor">
            <summary>Creates a new instance of ResampleDocumentCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod)">
            <summary>Creates a new instance of ResampleDocumentCommand specifying sourceRect, destSize and documentMethod.</summary>
            <param name="sourceRect">The rectangular region of the source image which will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="documentMethod">The 1-bit specialized resampling method to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentMethod,System.Int32)">
            <summary>Creates a new instance of ResampleDocumentCommand specifying sourceRect, destSize, documentMethod and cutOff.</summary>
            <param name="sourceRect">The rectangular region of the source image which will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="documentMethod">The 1-bit specialized resampling method to apply.</param>
            <param name="cutOff">The grayscale value which is the cutoff value for a black pixel when using AreaAverage.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Drawing.Rectangle,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.ResampleMethod)">
            <summary>Creates a new instance of ResampleDocumentCommand specifying sourceRect, destSize and scaleToGrayMethod.</summary>
            <param name="sourceRect">The rectangular region of the source image which will be resized.</param>
            <param name="destSize">The final size of the image.</param>
            <param name="scaleToGrayMethod">The ResampleMethod to apply when the ResampleDocumentMethod is ScaleToGray.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ResampleDocumentCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for the command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the ResampleDocumentCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="info">A SerializationInfo object that will be filled with command information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.CutOff">
            <summary>Gets or sets the grayscale value which is the cutoff value for a black pixel when using AreaAverage.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DestSize">
            <summary>Gets or sets the final size of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.DocumentMethod">
            <summary>Gets or sets the 1-bit specialized resampling method to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.ScaleToGrayMethod">
            <summary>Gets or sets the ResampleMethod to apply when the DocumentMethod is ScaleToGray.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SourceRect">
            <summary>Gets or sets the rectangular region of the source image which will be resized.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.ResampleDocumentCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand">
            <summary>This command converts a continuous RGB or grayscale image to a 1-bit black and white image, given a threshold value.</summary>
            <remarks>SimpleThresholdCommand can result in considerably better performance over the  GetChangedPixelFormat method in AtalaImage or  ApplyPaletteCommand when converting color or grayscale images to black and white. however the quality of the conversion can vary, and offers no dithering.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.#ctor">
            <summary>Creates a new instance of SimpleThresholdCommand.Creates a new instance of SimpleThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.#ctor">
            <summary>Creates a new instance of SimpleThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of SimpleThresholdCommand indicating the threshold value.</summary>
            <param name="inputThreshold">The threshold value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the SimpleThresholdCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.InputThreshold">
            <summary>Gets or sets the threshold value.</summary>
            <remarks>This is the value from 0 - 255 of which any pixel that with a brightness greater then the value will be converted to white, and any pixel with a brightness less than this value will be converted to black. Default value is 127.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Document.SimpleThresholdCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Effects">
            <summary>Contains classes that produce an effect on the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType">
            <summary>Indicates the curve type used in the  BrightnessContrastCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.ThreePoint">
            <summary>The three point curve emphasizes mid-tones more than the five or seven point curves. This is closest to the brightness / contrast that Adobe Photoshop uses.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.FivePoint">
            <summary>The default curve type for traditional Brightness/Contrast adjustment.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType.SevenPoint">
            <summary>The seven point curve forces pixels in the extreme dark and light ranges to black or white faster than the five point curve.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode">
            <summary>Specifies the crackle mode to use in the  CrackleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips">
            <summary>Creates an effect of dried paint chipping off.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.TinPunch">
            <summary>Makes the image appear to be punched out onto a tin surface.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion">
            <summary>Creates the effect of erosion on the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.PaintChips2">
            <summary>A more intense version of the PaintChips effect.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode.Erosion2">
            <summary>A more intense version of the Erosion effect.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod">
            <summary>Specifies the merge method used by  DeInterlaceCommand when the Merge method is used.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiLinear">
            <summary>BiLinear filter is applied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.BiCubic">
            <summary>BiCubic filter is applied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Lanczos">
            <summary>Lanczos filter is applied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod.Hanning">
            <summary>Hanning filter is applied.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod">
            <summary>Specifies the method used by the  DeInterlaceCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Duplicate">
            <summary>Duplicates the interlaced lines.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Interpolate">
            <summary>Uses interpolation when the image is de-interlaced.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod.Merge">
            <summary>Merges the interlaced lines together.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention">
            <summary>Specifies the retention used in  DeInterlaceCommand when  Duplicate or  Interpolate methods are used.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.EvenLines">
            <summary>Even lines are retained.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention.OddLines">
            <summary>Odd lines are retained.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode">
            <summary>Indicates the type of effect to apply in the  GauzyCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Desaturated">
            <summary>Applies a desaturated effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.HighContrastForeground">
            <summary>Creates a high contrast effect on the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.FullColor">
            <summary>Applies a full color gauzy effect.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Max">
            <summary>Applies a maximum filter effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode.Min">
            <summary>Applies a minimum filter effect to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode">
            <summary>Defines the manner of blur for the MotionBlurCommand</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Linear">
            <summary>Applies linear blur path.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Radial">
            <summary>Applies radial blur.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode.Zoom">
            <summary>Applies a linear blur.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode">
            <summary>Indicates the type of blurring to use on the  ScribbleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Blurred">
            <summary>Applies a blurring effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Filtered">
            <summary>Applies a filtered effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Posterized">
            <summary>Applies a posterized effect to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode.Despeckled">
            <summary>Applies a despeckle effect to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType">
            <summary>Indicates the type of blurring to use in the  StippleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.ArithmeticMean">
            <summary>Applies an arithmetic mean filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Minimum">
            <summary>Applies a minimum filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.Maximum">
            <summary>Applies a maximum filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.GeometricMean">
            <summary>Applies a geometric mean filter to the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType.YPMean">
            <summary>Applies a YP mean filter to the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode">
            <summary>Indicates how to process the image in the  StippleCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.NoiseFirst">
            <summary>Applies the noise before the filter.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.StippleMode.FilterFirst">
            <summary>Applies the filter before adding the noise.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode">
            <summary>Specifies the tint mode for  WatercolorTintCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Darken">
            <summary>Darkens the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode.Lighten">
            <summary>Lightens the image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor">
            <summary>This structure is used with WatercolorTintCommand to specify the gamma levels used during the command process.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor">
            <summary>Create a GammaColor object for use with WatercolorTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double)">
            <summary>Creates a new instance of GammaColor specifying a single value for all channels.</summary>
            <param name="gamma">The gamma value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of GammaColor specifying the gamma value for blue, green and red channels.</summary>
            <param name="blue">The blue gamma value.</param>
            <param name="green">The green gamma value.</param>
            <param name="red">The red gamma value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of GammaColor specifying the gamma value for blue, green, red and alpha channels.</summary>
            <param name="blue">The blue gamma value.</param>
            <param name="green">The green gamma value.</param>
            <param name="red">The red gamma value.</param>
            <param name="alpha">The alpha gamma value.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.Default">
            <summary>Gets the default GammaColor object.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.A">
            <summary>The alpha channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.B">
            <summary>The blue channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.G">
            <summary>The green channel.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Effects.GammaColor.R">
            <summary>The red channel.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand">
            <summary>    Adjusts the tint of an image by specifying a     value.</summary>
            <remarks>This method requires an RGB or RGBA image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor">
            <summary>Creates a new instance of AdjustTintCommand specifying tint. Creates a new instance of AdjustTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor">
            <summary>Creates a new instance of AdjustTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of AdjustTintCommand specifying the tint value.</summary>
            <param name="tint">A value from -180 to +180. Positive values enhance green, negative values enhance red.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AdjustTintCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for the information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Clone">
            <summary>Creates a copy of the command.</summary>
            <returns>A copy of the AdjustTintCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo object data will be filled into.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AdjustTintCommand.Tint">
            <summary>Gets or sets a value from -180 to +180. Positive values enhance green, negative values enhance red.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand">
            <summary>Automatically corrects the color and contrast of an image. A combination of  AutoLevelsComand and  AutoContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor">
            <summary>Creates a new instance of AutoColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor">
            <summary>Creates a new instance of AutoColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor(System.Double)">
            <summary>Creates a new instance of AutoColorCommand specifying the clip amount.</summary>
            <param name="clip">The percentage of pixels to ignore when calculating the white and black points.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AutoColorCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo object data will be filled into.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.Clip">
            <summary>Gets or sets the percentage of pixels to ignore when calculating the white and black points.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoColorCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand">
            <summary>Adjusts the overall contrast of an image automatically.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor">
            <summary>Creates a new instance of AutoConstrastCommand.Creates a new instance of AutoConstrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor">
            <summary>Creates a new instance of AutoContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of AutoContrastCommand specifying the output range.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to. (0 to 255)</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to. (0 to 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance of AutoContrastCommand specifying the output range and gamma.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to. (0 to 255)</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to. (0 to 255)</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Int32,System.Int32,System.Double,System.Double)">
            <summary>Creates a new instance of AutoContrastCommand specifying the output range, gamma and clip values.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to. (0 to 255)</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to. (0 to 255)</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
            <param name="clip">The percentage of pixels to ignore when calculating the white and black points. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AutoContrastCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo object data will be filled into.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Clip">
            <summary>Gets or sets the percentage of pixels to ignore when calculating the white and black points.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.Gamma">
            <summary>Gets or sets the gamma adjustment to apply when running the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeHigh">
            <summary>Gets or sets the high pixel value to stretch the histogram to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.OutputRangeLow">
            <summary>Gets or sets the low pixel value to stretch the histogram to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoContrastCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand">
            <summary>Enhances the contrast of an image by automatically defining the light and dark pixels, then redistributing the histogram proportionately.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor">
            <summary>Creates a new instance of AutoLevelsCommand.Creates a new instance of AutoLevelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor">
            <summary>Creates a new instance of AutoLevelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color)">
            <summary>Creates a new instance of AutoLevelsCommand specifying the output range.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of AutoLevelsCommand specifying the output range and gamma.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary>Creates a new instance of AutoLevelsCommand specifying the output range, gamma and clip.</summary>
            <param name="outputRangeLow">The low pixel value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The high pixel value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
            <param name="clip">The percentage of pixels to ignore when calculating the white and black points.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AutoLevelsCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the AutoLevelsCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Clip">
            <summary>Gets or sets the percentage of pixels to ignore when calculating the white and black points.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.Gamma">
            <summary>Gets or sets the gamma adjustment to apply when running the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeHigh">
            <summary>Gets or sets the high pixel value to stretch the histogram to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.OutputRangeLow">
            <summary>Gets or sets the low pixel value to stretch the histogram to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoLevelsCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand">
            <summary>Automatically adjusts the white point in an image.</summary>
            <remarks>Auto White Balance is based on "Gray World" algorithm and balances the source image. It is best applied after the translation to gamma-corrected RGB space.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor">
            <summary>Creates a new instance of AutoWhiteBalanceCommand.Creates a new instance of AutoWhiteBalanceCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor">
            <summary>Creates a new instance of AutoWhiteBalanceCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor(System.Double)">
            <summary>Creates a new instance of AutoWhiteBalanceCommand specifying dampening.</summary>
            <param name="dampening">The amount of dampening to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AutoWhiteBalanceCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.Dampening">
            <summary>Gets or sets a value indicating the amount of dampening to use.</summary>
            <remarks>Dampening is used to mitigate the algorithm since full correction is often too extreme for real world scenes.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.AutoWhiteBalanceCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand">
            <summary>Apply a bevel effect to the edges of an image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor">
            <summary>Creates a new instance of BevelEdgeCommand. Creates a new instance of BevelEdgeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor">
            <summary>Creates a new instance of BevelEdgeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of BevelEdgeCommand specifying the bevel size and brightness levels.</summary>
            <param name="bevelSize">Size of the bevel along the edge, in pixels.</param>
            <param name="leftBrightness">Brightness level of the left facet. (0-255)</param>
            <param name="topBrightness">Brightness level of the top facet. (0-255)</param>
            <param name="rightBrightness">Brightness level of the right facet. (0-255)</param>
            <param name="bottomBrightness">Brightness level of the bottom facet. (0-255)</param>
            <param name="smoothFactor">Smooth the bevel edge. (0-500)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BevelEdgeCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BevelSize">
            <summary>Gets or sets the size of the bevel along the edge, in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.BottomBrightness">
            <summary>Gets or sets the brightness level of the bottom facet. (0-255)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.LeftBrightness">
            <summary>Gets or sets the brightness level of the left facet. (0-255)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.RightBrightness">
            <summary>Gets or sets the brightness level of the right facet. (0-255)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SmoothFactor">
            <summary>Gets or sets the smooth the bevel edge. (0-500)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BevelEdgeCommand.TopBrightness">
            <summary>Gets or sets the brightness level of the top facet. (0-255)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand">
            <summary>Modifies the brightness and/or contrast of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor">
            <summary>Initializes a new instance of BrightnessContrastCommand. Creates a new instance of BrightnessContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor">
            <summary>Creates a new instance of BrightnessContrastCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of BrightnessContrastCommand specifying the brightness and contrast.</summary>
            <param name="newBrightness">The percent to increase or decrease brightness. (-100 to 100)</param>
            <param name="newContrast">The percent to increate or decrease the contrast. (-100 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCurveType)">
            <summary>Initializes a new instance of BrightnessContrastCommand specifying the brightness, contrast, and curve shape.</summary>
            <param name="newBrightness">The percent to increase or decrease brightness. (-100 to 100)</param>
            <param name="newContrast">The percent to increase or decrease contrast. (-100 to 100)</param>
            <param name="curveShape">The curve shape.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BrightnessContrastCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.Clone">
            <summary>Creates a copy of the command.</summary>
            <returns>A copy of the BrightnessContrastCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.CurveShape">
            <summary>Gets or sets a value indicating the curve shape.</summary>
            <remarks>         </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewBrightness">
            <summary>Gets or sets the percent to increase or decrease brightness.</summary>
            <remarks>Valid values are from -100 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.NewContrast">
            <summary>Gets or sets the percent to increase or decrease contrast.</summary>
            <remarks>Valid values are from -100 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessContrastCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand">
            <summary>Perform histogram equalization on an image while preventing colors from shifting.</summary>
            <remarks>             This function will re-distribute the pixel values across         the given range so that there will be (approximately) equal         numbers of pixels with each pixel value (0 to 255). Input         pixels with values above or below the threshold values are         not modified in the output.         Can be used to extend the dynamic range of an         image.     </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor">
            <summary>Creates a new instance of BrightnessHistogramEqualizeCommand specifying the threshold values. Creates a new instance of BrightnessHistogramEqualizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor">
            <summary>Creates a new instance of BrightnessHistogramEqualizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of BrightnessHistogramEqualizeCommand specifying the threshold levels.</summary>
            <param name="lowThreshold">Pixels are uneffected below this value. (0 - 255)</param>
            <param name="highThreshold">Pixels are uneffected above this value. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BrightnessHistogramEqualizeCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.HighThreshold">
            <summary>Gets or sets a high threshold value above which pixels are uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.LowThreshold">
            <summary>Gets or sets a low threshold value below which pixels are uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramEqualizeCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand">
            <summary>Performs a histogram stretch on an image while preventing colors from shifting.</summary>
            <remarks>             Re-distribute the pixel values across the given range by         first setting values above and below the thresholds to zero         and 255 respectively and then scaling the remaining values         to span the entire zero to 255 range.         This can be used to increase the contrast and extend         the dynamic range of an image.     </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor">
            <summary>Creates a new instance of BrightnessHistogramStretchCommand. Creates a new instance of BrightnessHistogramStretchCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor">
            <summary>Creates a new instance of BrightnessHistogramStretchCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Double,System.Double)">
            <summary>Creates a new instance of BrightnessHistogramStretchCommand specifying the limit values.</summary>
            <param name="lowLimit">Percent of pixels to set to 0. (0 to 100)</param>
            <param name="highLimit">Percent of pixels to set to 255. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Double,System.Double,System.Boolean)">
            <summary>Creates a new instance of BrightnessHistogramStretchCommand specifying the limit values and if the HSL colorspace should be used.</summary>
            <param name="lowLimit">Percent of pixels to set to 0. (0 to 100)</param>
            <param name="highLimit">Percent of pixels to set to 255. (0 to 100)</param>
            <param name="hslColorSpace">Indicates if the Histogram Stretch is performed in the HSL colorspace.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BrightnessHistogramStretchCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of this BrightnessHistogramStretchCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HighLimit">
            <summary>Gets or sets the percent of pixels to set to 255.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.HslColorSpace">
            <summary>Gets or sets a value indicating if the Histogram Stretch is performed in the HSL colorspace.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.LowLimit">
            <summary>Gets or sets the percent of pixels to set to 0.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.MidPoint">
            <summary>Gets or sets the pixel value to set to middle intensity. This value must be from 1 to 254.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.BrightnessHistogramStretchCommand.UseMidPoint">
            <summary>Gets or sets a value indicating whether the MidPoint property will be used to divide output range.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand">
            <summary>    Generates an image which looks like a cracked ceramic     glaze.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will raise the ChangePixelFormat event and convert the image to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor">
            <summary>Initalize a new instance of the CrackleCommand class. Creates a new instance of CrackleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor">
            <summary>Creates a new instance of CrackleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.CrackleMode,System.Int32)">
            <summary>Creates a new instance of CrackleCommand specifying the crackle mode and definition.</summary>
            <param name="mode">The crackle mode.</param>
            <param name="definition">A value which controls sharpness of cracks. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of CrackleCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Definition">
            <summary>Gets or sets a value which controls sharpness of cracks.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.Mode">
            <summary>Gets or sets the crackle mode.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CrackleCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand">
            <summary>    Applies a color curve to an image, similar to the     Photoshop Curves method.     The curves are defined by an array of one or more          PointF objects.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor">
            <summary>Creates a CurvesCommand object that can be used to apply a color curve to an image.Creates a new instance of CurvesCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor">
            <summary>Creates a new instance of CurvesCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor(System.Drawing.PointF[],Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Creates a new instance of CurvesCommand specifying the points of the curve and channels to process.</summary>
            <param name="points">An array of PointF objects specifying the curve.</param>
            <param name="channels">A channel mask containing the channels to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of CurvesCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of this CurvesCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Channels">
            <summary>Gets or sets the channel flags that specify which color channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.InPlaceProcessing">
            <summary>Gets a value indicating if the source image data is processed in-place as opposed to returning a new image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.Points">
            <summary>Gets or sets the points that define the curve.</summary>
            <remarks>    At least one point must be provided, with a maximum of     256 points.     Each point value must have a range from 0.0 to 1.0. There     can be no duplicate PointF.X values can be in the     array.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.CurvesCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand">
            <summary>This command will de-interlace an image.</summary>
            <remarks>    Interlacing is when two frames, usually in video, are     mixed together in one frame with odd lines being from one frame     and even lines being from the other frame. De-Interlacing can     fix this with one of three options:                       Duplicating every other line         Interpolating every other line         Merging the odd and even lines     </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor">
            <summary>    Initializes a new instance of DeInterlaceCommand.     Initializes a new instance of DeInterlaceCommand with     default settings.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor">
            <summary>Creates a new instance of DeInterlaceCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod)">
            <summary>    Initializes a new instance of     DeInterlaceCommand specifying the     method.</summary>
            <param name="method">The de-interlace method.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMergeMethod)">
            <summary>    Initializes a new instance of     DeInterlaceCommand specifying the de-interlace     method and merging mode.</summary>
            <param name="method">The de-interlace method.</param>
            <param name="mergeMethod">The merge method used when merging the odd and even interpolated images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceMethod,Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceRetention)">
            <summary>    Initializes a new instance of     DeInterlaceCommand specifying the de-interlace     method and which lines to retain.</summary>
            <param name="method">The de-interlace method.</param>
            <param name="retention">Specifies which lines to retain.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DeInterlaceCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.MergeMethod">
            <summary>Gets or sets the merge method to use when merging the odd and even interpolated images.</summary>
            <remarks>Only used for the Merge method.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Method">
            <summary>Gets or sets the method used to de-interlace the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.Retention">
            <summary>Gets or sets the odd or even line to retain.</summary>
            <remarks>Only used for the Duplicate and Interpolate methods.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DeInterlaceCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand">
            <summary>Apply a drop shadow behind the image.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will raise the ChangePixelFormat event and convert the image to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor">
            <summary>Initialize a new instance of the DropShadowCommand class. Creates a new instance of DropShadowCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor">
            <summary>Creates a new instance of DropShadowCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Int32)">
            <summary>Initializes a new instance of DropShadowCommand specifying offset.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point)">
            <summary>Initialize a new instance of DropShadowCommand specifying offset.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color)">
            <summary>Creates a new instance of DropShadowCommand specifying offset and shadowColor.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double)">
            <summary>Initialize a new instance of DropShadowCommand specifying offset, shadowColor and blurLevel.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
            <param name="blurLevel">The amount of blur to add to the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double,System.Boolean)">
            <summary>Initialize a new instance of DropShadowCommand specifying offset, shadowColor, blurLevel and increaseCanvas.</summary>
            <param name="offset">The number of pixels to offset the the shadow.</param>
            <param name="shadowColor">The color to use for the shadow.</param>
            <param name="blurLevel">The amount of blur to add to the shadow.</param>
            <param name="increaseCanvas">A value to indicate if you want the canvas to be increased to include the shadow.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DropShadowCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.BlurLevel">
            <summary>Gets or sets the amount of blur to add to the shadow.</summary>
            <remarks>This is the standard deviation of the gaussian kernal.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.IncreaseCanvas">
            <summary>Gets or sets a value to indicate if you want the canvas to be increased to include the shadow.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.Offset">
            <summary>Gets or set the number of pixels to offset the the shadow.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.ShadowColor">
            <summary>Gets or sets the color to use for the shadow.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DropShadowCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand">
            <summary>The DuotoneCommand processes an image from its current color space into a two color space.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor">
            <summary>Constructs a new DuotoneCommand object.Construct a new DuotoneCommand with default properties.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor">
            <summary>Creates a new instance of DuotoneCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor(System.Drawing.Color)">
            <summary>Construct a new DuotoneCommand using the supplied color as the tint.</summary>
            <param name="tint">The tint that will be used for the duotone color space.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DuotoneCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the DuotoneCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.InPlaceProcessing">
            <summary>Indicates whether or not this command will act on the given or image or allocate a new one.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.DuotoneCommand.Tint">
            <summary>The color that will be used for the "light" tones of the duotoned image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand">
            <summary>Creates an effect which looks like fingerprint smuges on the image.</summary>
            <remarks>This method requires an 8-bit grayscale. If the source image is of a different format, it will raise the ChangePixelFormat event and convert the image to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor">
            <summary>Creates a new instance of FingerprintCommand. Creates a new instance of FingerprintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor">
            <summary>Creates a new instance of FingerprintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Double)">
            <summary>Creates a new instance of FingerprintCommand specifying depth.</summary>
            <param name="depth">A positive number indicating the depth of the effect.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Double,System.Int32,System.Boolean)">
            <summary>Creates a new instance of FingerprintCommand specifying depth, filterSize and dilation.</summary>
            <param name="depth">A positive number indicating the depth of the effect.</param>
            <param name="filterSize">Gets or sets the filter size of the effect. Should be an odd number greater than or equal to 3.</param>
            <param name="dilation">Indicates if dilation should be used.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of FingerprintCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Depth">
            <summary>Gets or sets a positive number indicating the depth of the effect.</summary>
            <remarks>50 is a good number to start with.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.Dilation">
            <summary>Gets or sets a value indicating if dilation mode should be used.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.FilterSize">
            <summary>Gets or sets the filter size of the effect.</summary>
            <remarks>Values of 3, 5 and 7 are good choices.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FingerprintCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand">
            <summary>Performs a flood fill on an image. You can use it to fill an area of an image surrounded by FillColor by setting Mode to Edge, or you can fill the pixel color at Position with FillColor.</summary>
            <remarks>    This command requires one of the following image     formats:                       PixelFormat24bppBgr         PixelFormat32bppBgr         PixelFormat32bppBgra          If any other image format is passed, you will receive a     System.ArgumentException.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor">
            <summary>Creates a new instance of FloodFillCommand specifying position, fillColor, tolerance and mode.Creates a new instance of FloodFillCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor">
            <summary>Creates a new instance of FloodFillCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor(System.Drawing.Point,System.Drawing.Color,System.Double,Atalasoft.Imaging.ImageProcessing.ColorMatchMode)">
            <summary>Creates a new instance of FloodFillCommand specifying the position, fill color, tolerance and color match mode.</summary>
            <param name="position">The X, Y pixel position where the fill should start.</param>
            <param name="fillColor">The color used for the fill.</param>
            <param name="tolerance">The percentage of color variation. (0 to 100)</param>
            <param name="mode">The ColorMatchMode used for the fill.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of FloodFillCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.FillColor">
            <summary>Gets or sets the Color used for the fill.</summary>
            <remarks>    If      Mode is Edge, this color also represents the the edge color     and will fill the area until it finds the edge color.     If Mode is Surface, this color will be used to fill the     pixel color located at      Position until it reaches a different color.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Mode">
            <summary>Gets or sets the ColorMatchMode used for the fill.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Position">
            <summary>Gets or sets the X, Y pixel position where the fill should start.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.FloodFillCommand.Tolerance">
            <summary>Gets or sets the percentage of color variation.</summary>
            <remarks>Valid values are 0 to 100. A value of 0 requires an exact color match, where a value of 100 will match any color.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand">
            <summary>Increases or decreases the gamma value of an image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor">
            <summary>Creates a new instance of the GammaCommand object.Creates a new instance of GammaCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor">
            <summary>Creates a new instance of GammaCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor(System.Double)">
            <summary>Creates a new instance of GammaCommand specifying the gamma level.</summary>
            <param name="gammaLevel">The gamma correction level. A value &lt; 1 decreases brightness and a value &gt; 1 increases brightness.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of GammaCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the GammaCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.GammaLevel">
            <summary>Gets or sets the gamma correction level.</summary>
            <remarks>    This value must be greater than or equal to 0. The effect     of this value is as follows:                       &lt; 1 - decreases brightness         &gt; 1 - increases brightness         = 1 - no change.     </remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GammaCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand">
            <summary>Generate a soft focus, gauzed image.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will raise the ChangePixelFormat event and convert the image to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor">
            <summary>Creates a new instance of GauzyCommand specifying blurAmount, sharpAmount, clarity, mode and regionOfInterest.Creates a new instance of GauzyCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor">
            <summary>Creates a new instance of GauzyCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor(System.Double,System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Effects.GauzyMode)">
            <summary>Creates a new instance of GauzyCommand specifying the blur and sharpen amounts.</summary>
            <param name="blurAmount">The amount of blur to apply. (0 to 100)</param>
            <param name="sharpAmount">The amount of original pixels in the image. (0 to 100)</param>
            <param name="clarity">The amount to clarify the result. (0 to 100)</param>
            <param name="mode">    The      GauzyMode to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of GauzyCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.BlurAmount">
            <summary>Gets or sets the amount of blur to apply.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Clarity">
            <summary>Gets or sets the amount to clarify the result.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.Mode">
            <summary>Gets or sets the  GauzyMode to use.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SharpAmount">
            <summary>Gets or sets the amount of original pixels in the image.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.GauzyCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand">
            <summary>Generates a black and white image dithered to "halftone" dots.</summary>
            <remarks>This method requires a 24-bit image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor">
            <summary>Creates a new instance of the HalftoneCommand object.Creates a new instance of HalftoneCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor">
            <summary>Creates a new instance of HalftoneCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor(System.Int32,System.Boolean)">
            <summary>Creates a new instance of HalftoneCommand specifying the dot size and smoothing values.</summary>
            <param name="maxDotSize">The maximum size of the dots.</param>
            <param name="smoothDots">A value indicating if the dots will be smooth or sharp.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of HalftoneCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.MaxDotSize">
            <summary>Gets or sets the maximum size of the dots.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SmoothDots">
            <summary>Gets or sets a value indicating if the dots will be smooth or sharp.</summary>
            <remarks>If false, dots are solid black, with sharp edges.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HalftoneCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand">
            <summary>Performs histogram equalization on an image.</summary>
            <remarks>             This function will re-distribute the pixel values across         the given range so that there will be (approximately) equal         numbers of pixels with each pixel value (0 to 255). Input         pixels with values above or below the threshold values are         not modified in the output.         Can be used to extend the dynamic range of an         image.         When applied to multi-channel (RGB, RGBA) images,         each channel is modified independently of the others;         because of this, colors may shift. See          BrightnessHistogramEqualizeCommand for a similar         command that doesn't cause this color shift.         This command processes the image         In-Place.     </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor">
            <summary>Creates a new instance of HistogramEqualizeCommand specifying the threshold values. Creates a new instance of HistogramEqualizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor">
            <summary>Creates a new instance of HistogramEqualizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of HistogramEqualizeCommand specifying the threshold levels.</summary>
            <param name="lowThreshold">Pixels are uneffected below this value. (0 - 255)</param>
            <param name="highThreshold">Pixels are uneffected above this value. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of HistogramEqualizeCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.HighThreshold">
            <summary>Gets or sets a high threshold value above which pixels are uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.LowThreshold">
            <summary>Gets or sets a low threshold value below which pixels are uneffected.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramEqualizeCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand">
            <summary>Performs a histogram stretch on an image.</summary>
            <remarks>             Re-distribute the pixel values across the given range by         first setting values above and below the thresholds to zero         and 255 respectively and then scaling the remaining values         to span the entire zero to 255 range.         This can be used to increase the contrast and extend         the dynamic range of an image.         When applied to multi-channel (RGB, RGBA) images,         each channel is modified independently of the others;         because of this, colors may shift. See          BrightnessHistogramStretchCommand for a similar command         that doesn't cause this color shift.     </remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor">
            <summary>Creates a new instance of HistogramStretchCommand specifying the limit values. Creates a new instance of HistogramStretchCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor">
            <summary>Creates a new instance of HistogramStretchCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor(System.Double,System.Double)">
            <summary>Creates a new instance of HistogramStretchCommand specifying the low and high limits.</summary>
            <param name="lowLimit">Percent of pixels to set to 0. (0 to 100)</param>
            <param name="highLimit">Percent of pixels to set to 255. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of HistogramStretchCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.HighLimit">
            <summary>Gets or sets the percent of pixels to set to 255.</summary>
            <remarks>Valid values are from 0 to 100. The sum of HighLimit and LowLimit must not exceed 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.LowLimit">
            <summary>Gets or sets the percent of pixels to set to 0.</summary>
            <remarks>Valid values are from 0 to 100. The sum of HighLimit and LowLimit must not exceed 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.MidPoint">
            <summary>Gets or sets the pixel value to set to middle intensity. This value must be from 1 to 254.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.HistogramStretchCommand.UseMidPoint">
            <summary>Gets or sets a value indicating whether the MidPoint property will be used to divide output range.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand">
            <summary>Corrects the tonal range and color balance by adjusting the shadow, midtone, and highlights of an image.</summary>
            <remarks>The shadow, midtone, and highlights are often manually determined from an "eyedropper" tool.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor">
            <summary>Creates a new instance of LevelsCommand.Creates a new instance of LevelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor">
            <summary>Creates a new instance of LevelsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>Creates a new instance of LevelsCommand specifying the shadow and highlight colors, and the output range.</summary>
            <param name="shadowColor">The black point in the image used as an input clipping point.</param>
            <param name="highlightColor">The white point in the image used as an input clipping point.</param>
            <param name="outputRangeLow">The dark color value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The light color value to stretch the histogram to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color)">
            <summary>Creates a new instance of LevelsCommand specifying shadow, midtone and highlight colors, and the output range.</summary>
            <param name="shadowColor">The black point in the image used as an input clipping point.</param>
            <param name="midtoneColor">The gray point in the image used as a gamma adjustment.</param>
            <param name="highlightColor">The white point in the image used as an input clipping point.</param>
            <param name="outputRangeLow">The dark color value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The light color value to stretch the histogram to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.Effects.GammaColor)">
            <summary>Creates a new instance of LevelsCommand specifying shadow color, highlight color, output range and gamma.</summary>
            <param name="shadowColor">The black point in the image used as an input clipping point.</param>
            <param name="highlightColor">The white point in the image used as an input clipping point.</param>
            <param name="outputRangeLow">The dark color value to stretch the histogram to.</param>
            <param name="outputRangeHigh">The light color value to stretch the histogram to.</param>
            <param name="gamma">The gamma adjustment to apply when running the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of LevelsCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the LevelsCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>This method performs the level manipulation on the image.</summary>
            <returns>Null (Nothing in VB).</returns>
            <param name="source">The source image for processing. This may be different from the original image.</param>
            <param name="dest">The destination image. Dest will be null when InPlaceProcessing is true or when ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process. When the destination image is non-null, it will always be the same size as imageArea. ImageArea only differs in size from the source image when the command is a subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.Gamma">
            <summary>Gets or sets the gamma adjustment to apply when running the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.HighlightColor">
            <summary>Gets or sets the white point in the image used as an input clipping point.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.MidtoneColor">
            <summary>Gets or sets the gray point in the image used as a gamma adjustment.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeHigh">
            <summary>Gets or sets the light color value to stretch the histogram to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.OutputRangeLow">
            <summary>Gets or sets the dark color value to stretch the histogram to.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.ShadowColor">
            <summary>Gets or sets the black point in the image used as an input clipping point.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.LevelsCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand">
            <summary>Generate a mosaic (large pixel) image.</summary>
            <remarks>This method requires a 24 or 32 bit image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor">
            <summary>Creates a new instance of MosaicCommand specifying squareSize. Creates a new instance of MosaicCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor">
            <summary>Creates a new instance of MosaicCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of MosaicCommand specifying the square size.</summary>
            <param name="squareSize">The size of the mosaic tiles.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MosaicCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SquareSize">
            <summary>Gets or sets the size of the mosaic tiles.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MosaicCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand">
            <summary>Create an effect to simulate motion blur on an image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor">
            <summary>Constructs a new MotionBlurCommand with the provided information.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor">
            <summary>Creates a new instance of MotionBlurCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32)">
            <summary>Constructs a new MotionBlurCommand with the provided distance and number of steps.</summary>
            <param name="distance">The distance of the blur.</param>
            <param name="steps">The number of steps used in the blur.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode)">
            <summary>Constructs a new MotionBlurCommand with the provided distance, number of steps and mode.</summary>
            <param name="distance">The distance of the blur.</param>
            <param name="steps">The number of steps used in the blur.</param>
            <param name="mode">The manner of the blur.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Double,System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurMode,System.Double)">
            <summary>Constructs a new MotionBlurCommand with the provided distance, number of steps, mode and angle.</summary>
            <param name="distance">The distance of the blur.</param>
            <param name="steps">The number of steps used in the blur.</param>
            <param name="mode">The manner of the blur.</param>
            <param name="angle">The angle of the blur in degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MotionBlurCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the MotionBlurCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Angle">
            <summary>Gets or sets the angle of the blur in degrees.</summary>
            <remarks>Default is 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Distance">
            <summary>Gets or sets the distance of the blur in pixels.</summary>
            <remarks>Default value is 10.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Mode">
            <summary>Gets or sets the manner of the blur.</summary>
            <remarks>Default value is MotionBlurMode.Linear.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.Steps">
            <summary>Gets or sets the number of steps in the blur.</summary>
            <remarks>This value must be at least 1. Default value is 2.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.MotionBlurCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand">
            <summary>This effect makes an image appear as if it's an oil painting.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor">
            <summary>Creates a new instance of OilPaintCommand.Creates a new instance of OilPaintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor">
            <summary>Creates a new instance of OilPaintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of OilPaintCommand specifying brush width and max density.</summary>
            <param name="brushWidth">The width of the virtual brush. Must be greater than zero.</param>
            <param name="maxDensity">The internal quantization level. (0 to 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>Creates a new instance of OilPaintCommand specifying the brush width, max density, color edges and contrast enhancement.</summary>
            <param name="brushWidth">The width of the virtual brush. Must be greater than zero.</param>
            <param name="maxDensity">The internal quantization level. (0 to 255)</param>
            <param name="blendColorEdges">A value indicating whether the edges use color blending.</param>
            <param name="enhanceContrast">A value indicating whether the image contrast is enhanced.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of OilPaintCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BlendColorEdges">
            <summary>Gets or sets a value indicating whether the edges use color blending.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.BrushWidth">
            <summary>Gets or set the width of the virtual brush.</summary>
            <remarks>Low number work best ( 3, 4, 5, ... ).</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.EnhanceContrast">
            <summary>Gets or sets a value indicating whether the image contrast is enhanced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.MaxDensity">
            <summary>Gets or sets the internal quantization level.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.OilPaintCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand">
            <summary>Generate an image made up of primary and secondary colors of the source image.</summary>
            <remarks>This method requires a 24-bit image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.#ctor">
            <summary>Creates a new instance of PosterizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.#ctor">
            <summary>Creates a new instance of PosterizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of PosterizeCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.PosterizeCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand">
            <summary>Attempts to eliminate "red-eye" from a region of an RGB image.</summary>
            <remarks>You must select an "eye" region from the image, then choose a saturation level and color range. These should be done interactively, as the color and saturation of the "red-eye" effect varies greatly between images. See the Rubberbanding features in WinControls for selecting the eye region.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor">
            <summary>Creates a new instance of RedEyeRemovalCommand.Creates a new instance of RedEyeRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor">
            <summary>Creates a new instance of RedEyeRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of RedEyeRemovalCommand specifying the saturation threshold.</summary>
            <param name="saturationThreshold">The percent that red is allowed to dominates the other colors before it is reduced. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of RedEyeRemovalCommand specifying the saturation threshold and color range.</summary>
            <param name="saturationThreshold">The percent that red is allowed to dominates the other colors before it is reduced. (0 to 100)</param>
            <param name="colorRange">The red band width. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of RedEyeRemovalCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the RedEyeRemovalCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.ColorRange">
            <summary>Gets or sets the red band width.</summary>
            <remarks>Higher values cause pixels with more cyan and yellow to be reduced.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SaturationThreshold">
            <summary>Gets or sets the percent that red is allowed to dominates the other colors before it is reduced.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RedEyeRemovalCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand">
            <summary>Use this command to convert an image into an 8-bit indexed image with a specified number of colors.</summary>
            <remarks>This method requires a 24 or 32 bit image. If the source image is of a different format, it will raise the ChangePixelFormat event and convert the image to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor">
            <summary>Creates a new instance of the ReduceColorsCommand object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor">
            <summary>Creates a new instance of ReduceColorsCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of ReduceColorsCommand specifying colors.</summary>
            <param name="colors">The number of colors you want the resulting image to contain. (2 to 256)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.DitheringMode,System.Int32)">
            <summary>Creates a new instance of ReduceColorsCommand specifying colors, ditherMode, and ditherMaxError.</summary>
            <param name="colors">The number of colors you want the resulting image to contain. (2 to 256)</param>
            <param name="ditherMode">The type of  DitheringMode to perform.</param>
            <param name="ditherMaxError">The maximum error value that can be carried between pixels. (0 to 127)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ReduceColorsCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.Colors">
            <summary>Gets or sets the number of colors you want the resulting image to contain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMaxError">
            <summary>Gets or sets the maximum error value that can be carried between pixels.</summary>
            <remarks>Valid values are from 0 to 127.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.DitherMode">
            <summary>Gets or sets the type of  DitheringMode to perform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReduceColorsCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand">
            <summary>Replaces a color in an image with another using the specified color tolerance.</summary>
            <remarks>This method requires a continuous tone or an 8-bit indexed image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor">
            <summary>Creates a new instance of ReplaceColorCommand specifying oldColor, newColor, and tolerance. Creates a new instance of ReplaceColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor">
            <summary>Creates a new instance of ReplaceColorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor(System.Drawing.Color,System.Drawing.Color,System.Double)">
            <summary>Creates a new instance of ReplaceColorCommand specifying color to replace, the new color and tolerance.</summary>
            <param name="oldColor">The color you want to replace.</param>
            <param name="newColor">The color used to replace the old color.</param>
            <param name="tolerance">The maximum color distance to match. A value of 0 will provide strict matching. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ReplaceColorCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the ReplaceColorCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.NewColor">
            <summary>Gets or sets the color used to replace the old color.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.OldColor">
            <summary>Gets or sets the color you want to replace.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ReplaceColorCommand.Tolerance">
            <summary>Gets or sets the maximum color distance to match. A value of 0 will provide strict matching.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand">
            <summary>Create an artistic embossing of an image.</summary>
            <remarks>This command works best on images with an isolated shape on a blank background.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor">
            <summary>Construct a new RoundedBevelCommand from the information provided.Construct a new RoundedBevelCommand with default properties.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor">
            <summary>Creates a new instance of RoundedBevelCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32)">
            <summary>Construct a new RoundedBevelCommand with the depth provided.</summary>
            <param name="depth">The depth of the embossing effect.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32)">
            <summary>Construct a new RoundedBevelCommand with the depth and angle provided.</summary>
            <param name="depth">The depth of the embossing effect.</param>
            <param name="angle">The angle of the embossing in degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32,System.Single)">
            <summary>Construct a new RoundedBevelCommand with the depth, angle and softness provided.</summary>
            <param name="depth">The depth of the embossing effect. Must be greater than 0.</param>
            <param name="angle">The angle of the embossing in degrees. (0 to 359)</param>
            <param name="softness">Sets the softness of the mask constructed to build the embossed shaped. (0.0 to 1.0)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Int32,System.Int32,System.Single,System.Drawing.Color,System.Drawing.Color)">
            <summary>Construct a new RoundedBevelCommand with the depth, angle and softness provided. Highlights and shadows will be created with the provided colors.</summary>
            <param name="depth">The depth of the embossing effect. Must be greater than 0.</param>
            <param name="angle">The angle of the embossing in degrees. (0 to 359)</param>
            <param name="softness">Sets the softness of the mask constructed to build the embossed shaped. (0.0 to 1.0)</param>
            <param name="highlight">The color that will used for applying highlights.</param>
            <param name="shadow">Sets or gets the color used for shadowing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of RoundedBevelCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Angle">
            <summary>The angle of the embossing in degrees.</summary>
            <remarks>Default value is 45.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Depth">
            <summary>The depth of the embossing effect.</summary>
            <remarks>Depth must be greater than zero. The default value is 5.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Highlight">
            <summary>The color that will used for applying highlights.</summary>
            <remarks>Default value is Color.White.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Shadow">
            <summary>Sets or gets the color used for shadowing.</summary>
            <remarks>Default value is Color.Black.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.Softness">
            <summary>Sets the softness of the mask constructed to build the embossed shaped.</summary>
            <remarks>Softness must be a value from 0 to 1. Default value is 1.0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.RoundedBevelCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand">
            <summary>Modify the saturation levels of an image.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor">
            <summary>Creates a new instance of SaturationCommand specifying saturationLevel.Creates a new instance of SaturationCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor">
            <summary>Creates a new instance of SaturationCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor(System.Double)">
            <summary>Creates a new instance of SaturationCommand specifying the saturation level.</summary>
            <param name="saturationLevel">The saturation level to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SaturationCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SaturationLevel">
            <summary>Gets or sets the saturation level to apply.</summary>
            <remarks/>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SaturationCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand">
            <summary>    Generate an image that looks like it was drawn with paint     and a heavy outline pen.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor">
            <summary>Constructs a new ScribbleCommand with the information provided.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor">
            <summary>Creates a new instance of ScribbleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Effects.ScribbleMode,System.Boolean,System.Int32)">
            <summary>Creates a new instance of ScribbleCommand specifying the mode, darkness and whether the filter should be applied before the effect.</summary>
            <param name="mode">The mode that will be used for the scribbling.</param>
            <param name="filterFirst">Filter the image before the scribbling effect is applied.</param>
            <param name="darkness">The darkness of the lines. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ScribbleCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    The method is called by the default implementation of     Apply. It determines if it is necessary to create a copy of the     source image in a different pixel format and if so, determines     the best new pixel format and allocates that image.</summary>
            <returns>A new image in a pixel format supported by the command or null to indicate that the original image is acceptable.</returns>
            <remarks>    The default implementation of ConstructChangedSourceImage     requests that the command report its preferred pixel format     (typically, this is the source image's pixel format, but some     commands support many pixel formats, but work best in gray, for     example), and if that is supported, returns a new image in the     preferred format if it is different from the source     image.     If the pixel format is not supported and     ApplyToAnyPixelFormat is set to true, the command is queried     for its best alternate pixel format and a new image is returned     in that pixel format. If ApplyToAnyPixelFormat is set to false,     ConstructChangedSourceImage will throw an     IncompatiblePixelFormatException.     If an error occurs, ConstructChangedImage should throw an     exception. Any new image constructed by ConstructChangedImage     must be a pixel format supported by this command.</remarks>
            <param name="image">The original source image passed to Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.Darkness">
            <summary>Gets or sets the darkness of the lines used for scribbling.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.FilterFirst">
            <summary>Gets or sets whether or not a filter should be applied to the image before the strokes.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.Mode">
            <summary>Gets or sets the ScribbleMode for the command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.ScribbleCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand">
            <summary>    Use this command to adjust the curves to generate a     classic "solarize" effect.</summary>
            <remarks>This method requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor">
            <summary>Creates a new instance of SolarizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor">
            <summary>Creates a new instance of SolarizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SolarizeCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">    A SerializationInfo containing information for this     command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.SolarizeCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand">
            <summary>This command generates a bumped image effect.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will raise the ChangePixelFormat event and convert the image to a compatible format.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor">
            <summary>Creates a new instance of  StippleCommand specifying size, filter, and mode.Creates a new instance of StippleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor">
            <summary>Creates a new instance of StippleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor(System.Int32,Atalasoft.Imaging.ImageProcessing.Effects.StippleFilterType,Atalasoft.Imaging.ImageProcessing.Effects.StippleMode)">
            <summary>Creates a new instance of StippleCommand specifying the size, filter and stipple mode.</summary>
            <param name="size">The size of the spots. (0 to 100)</param>
            <param name="filter">    The      StippleFilterType used to control blurring.</param>
            <param name="mode">    The      StippleMode to use for this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of StippleCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ConstructChangedSourceImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    The method is called by the default implementation of     Apply. It determines if it is necessary to create a copy of the     source image in a different pixel format and if so, determines     the best new pixel format and allocates that image.</summary>
            <returns>A new image in a pixel format supported by the command or null to indicate that the original image is acceptable.</returns>
            <remarks>    The default implementation of ConstructChangedSourceImage     requests that the command report its preferred pixel format     (typically, this is the source image's pixel format, but some     commands support many pixel formats, but work best in gray, for     example), and if that is supported, returns a new image in the     preferred format if it is different from the source     image.     If the pixel format is not supported and     ApplyToAnyPixelFormat is set to true, the command is queried     for its best alternate pixel format and a new image is returned     in that pixel format. If ApplyToAnyPixelFormat is set to false,     ConstructChangedSourceImage will throw an     IncompatiblePixelFormatException.     If an error occurs, ConstructChangedImage should throw an     exception. Any new image constructed by ConstructChangedImage     must be a pixel format supported by this command.</remarks>
            <param name="image">The original source image passed to Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Filter">
            <summary>Gets or sets the  StippleFilterType used to control blurring.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Mode">
            <summary>Gets or sets the  StippleMode to use for this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.Size">
            <summary>Gets or sets the size of the spots.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.StippleCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand">
            <summary>    Converts a grayscale image into a RGB or RGBA image and     applies a color tint in the same process.</summary>
            <remarks>This method requires an 8-bit or 16-bit grayscale w/ alpha image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor">
            <summary>Creates a new instance of  TintGrayscaleCommand specifying colorToTint.Creates a new instance of TintGrayscaleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor">
            <summary>Creates a new instance of TintGrayscaleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor(System.Drawing.Color)">
            <summary>Creates a new instance of TintGrayscaleCommand specifying the tint color.</summary>
            <param name="colorToTint">The color to tint the output.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of TintGrayscaleCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.ColorToTint">
            <summary>Gets or sets the color to tint the output.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.TintGrayscaleCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand">
            <summary>This command modifies an image to appear as if it was drawn using watercolors.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor">
            <summary>Creates a new instance of WatercolorTintCommand.Creates a new instance of WatercolorTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor">
            <summary>Creates a new instance of WatercolorTintCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode)">
            <summary>Creates a new instance of WatercolorTintCommand specifying the blur and tint mode.</summary>
            <param name="blur">The amount of blurring to add during processing. (0 to 100)</param>
            <param name="mode">Indicates if the image should be lightened or darkened.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintMode,System.Boolean)">
            <summary>Creates a new instance of WatercolorTintCommand specifying blur, tint mode and contrast enhancement.</summary>
            <param name="blur">The amount of blurring to add during processing. (0 to 100)</param>
            <param name="mode">Indicates if the image should be lightened or darkened.</param>
            <param name="enhanceContrast">A value indicating whether the image contrast is enhanced during processing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of WatercolorTintCommand from serialization information.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills the SerializationInfo object with information for this command.</summary>
            <param name="info">A SerializationInfo containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Blur">
            <summary>Gets or sets the amount of blurring to add during processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.EnhanceContrast">
            <summary>Gets or sets a value indicating whether the image contrast is enhanced during processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Effects.WatercolorTintCommand.Tint">
            <summary>Gets or sets a value indicating if the image should be lightened or darkened.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Fft">
            <summary>Contains classes for specialized filters that are processed using Fast Fourier Transformations (FFT).</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand">
            <summary>Combines low pass and high pass to filters at a low and high cutoff radius.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor">
            <summary>Initializes a new instance of BandPassFftCommand.Initializes a new instance of BandPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.#ctor(System.Double,System.Double)">
            <summary>Initializes a new BandPassFftCommand specifying the cut off values.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies BandPassFftComand to a grid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.HighCutoff">
            <summary>Gets or sets the high cutoff radius in the frequency domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.BandPassFftCommand.LowCutoff">
            <summary>Gets or sets the low cutoff radius in the frequency domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand">
            <summary>Similar to the high pass butterworth filter with an additive offset and multiplier.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor">
            <summary>Initializes a new instance of ButterworthHighBoostFftCommand.Initializes a new instance of ButterworthHighBoostFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of ButterworthHighBoostFftCommand specifying the cutoff radius, factor, and offset.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Factor">
            <summary>Gets or sets the multiplier applied to the high pass filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighBoostFftCommand.Offset">
            <summary>Gets or sets the offset applied to the high pass filter.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand">
            <summary>Similar to the ideal high pass filter, but with smoother transitions and less "ringing".</summary>
            <remarks>High pass filters clip low frequencies tending to sharpen images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor">
            <summary>Initializes a new instance of ButterworthHighPassFftCommand.Initializes a new instance of ButterworthHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.#ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of ButterworthHighPassFftCommand specifying the cutoff radius and order.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthHighPassFftCommand.Order">
            <summary>Gets or sets the function order.</summary>
            <remarks>A good value to start with is 2.0.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand">
            <summary>Similar to the ideal low pass filter, but with smoother transitions and less "ringing".</summary>
            <remarks>Low pass filters clip high frequencies tending to blur images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor">
            <summary>Initializes a new instance of ButterworthLowPassFftCommand.Initializes a new instance of ButterworthLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.#ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of ButterworthLowPassFftCommand specifying the cutoff radius and order.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.ButterworthLowPassFftCommand.Order">
            <summary>Gets or sets the function order.</summary>
            <remarks>A good value to start with is 2.0.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand">
            <summary>The base class used for all FFT (Fast Fourier Transform) filters for frequency domain image processing.</summary>
            <remarks>Includes the method ApplyToGrid which allows multiple FFT filters to be applied without converting back and forth to the frequency domain. Can also be used normally with the ApplyToImage method for processing a single FFT filter.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid">
            <summary>The FftGrid is used as an intermediate step in FFT processing. It transforms a grayscale image into the FFT domain, and is required prior to all FFT filters.</summary>
            <remarks>When using the Grid as the intermediate step, multiple FFT filters can be applied. Each FFT Command has an ApplyToGrid method that uses an FftGrid to process. Once the image has completed processing, be sure to return the changed image with the GetProcessedImage method.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.#ctor">
            <remarks>Initializes a new instance of FftGrid.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.#ctor(Atalasoft.Imaging.AtalaImage)">
            <param name="image">The grayscale AtalaImage to initialize the FftGrid with.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Dispose">
            <summary>Cleans up unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetNextPowerOfTwo(System.Int32)">
            <summary>A helper function that retrieves the next power of two (128, 256, 512, 1024, etc). x^2</summary>
            <returns>The next power of two.</returns>
            <param name="value">    The value to use when testing the next power of     two.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.GetProcessedImage">
            <summary>Returns the processed image from the frequency domain.</summary>
            <returns>The processed image.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Height">
            <summary>Gets the height of this FftGrid.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Image">
            <summary>Gets or sets the AtalaImage associated with this  FftGrid.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.FftGrid.Width">
            <summary>Gets the width of this FftGrid.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand">
            <summary>Similar to the high pass gaussian filter with an additive offset and multiplier.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor">
            <summary>Initializes a new instance of GaussianHighBoostFftCommand.Initializes a new instance of GaussianHighBoostFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary>Initializes a new instance of GaussianHighBoostFftCommand specifying cutoff radius, factor, and offset.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Factor">
            <summary>Gets or sets the multiplier applied to the high pass filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighBoostFftCommand.Offset">
            <summary>Gets or sets the offset applied to the high pass filter.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand">
            <summary>Similar to the ideal high pass filter, but with smoother transitions and less "ringing".</summary>
            <remarks>High pass filters clip low frequencies tending to sharpen images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor">
            <summary>Initializes a new instance of GaussianHighPassFftCommand.itializes a new instance of GaussianHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.#ctor(System.Double)">
            <summary>itializes a new instance of GaussianHighPassFftCommand specifying the cutoff frequency.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianHighPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand">
            <summary>Similar to the ideal low pass filter, but with smoother transitions and less "ringing".</summary>
            <remarks>Low pass filters clip high frequencies tending to blur images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor">
            <summary>Initializes a new instance of GaussianLowPassFftCommand.Initializes a new instance of GaussianLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.#ctor(System.Double)">
            <summary>Initializes a new instance of GaussianLowPassFftCommand specifying the cutoff radius.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.GaussianLowPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand">
            <summary>The ideal high pass filter zeros out all frequencies inside a specified cutoff radius.</summary>
            <remarks>High pass filters clip low frequencies tending to sharpen images. Ideal filters use a strict cutoff, tending to cause a ringing effect when converted back to the spatial domain. This "ringing" is similar to how JPEG's generate artifacts at sharp color changes. In practice, Ideal filters are rarely used due to this side effect.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor">
            <summary>Initializes a new instance of IdealHighPassFftCommand.Initializes a new instance of IdealHighPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.#ctor(System.Double)">
            <summary>Initializes a new instance of IdealHighPassFftCommand specifying the cutoff radius.</summary>
            <param name="cutoff">The cutoff radius</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealHighPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand">
            <summary>The ideal low pass filter zeros out all frequencies outside a specified cutoff radius.</summary>
            <remarks>Low pass filters clip high frequencies tending to blur images. Ideal filters use a strict cutoff, tending to cause a ringing effect when converted back to the spatial domain. This "ringing" is similar to how JPEG's generate artifacts at sharp color changes. In practice, Ideal filters are rarely used due to this side effect.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor">
            <summary>Initializes a new instance of IdealLowPassFftCommand.Initializes a new instance of IdealLowPassFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.#ctor(System.Double)">
            <summary>Initializes a new instance of IdealLowPassFftCommand specifying the cutoff radius.</summary>
            <param name="cutoff">The cutoff radius</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.IdealLowPassFftCommand.Cutoff">
            <summary>Gets or sets the cutoff radius in the frequency domain.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand">
            <summary>The base class used for all FFT (Fast Fourier Transform) filters for frequency domain image processing.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor">
            <summary>Initializes a new instance of InversePowerFftCommand.Initializes a new instance of InversePowerFftCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.#ctor(System.Double)">
            <summary>Initializes a new instance of InversePowerFftCommand specifying the power.</summary>
            <param name="power">The power applied to the function controlling the cutoff radius.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.ApplyToGrid(Atalasoft.Imaging.ImageProcessing.Fft.FftGrid)">
            <summary>Applies the filter on an FftGrid.</summary>
            <returns>null (Nothing in Visual Basic)</returns>
            <param name="grid">The FftGrid to process.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Fft.InversePowerFftCommand.Power">
            <summary>Gets or sets the power applied to the function controlling the cutoff radius.</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Filters">
            <summary>Contains classes that apply a filter to an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality">
            <summary>Indicates the quality level in the AdaptiveUnsharpMaskCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Low">
            <summary>Less accurate results, but very fast.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.Middle">
            <summary>Good results, slower to process.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality.High">
            <summary>Highest quality with the best results. Very slow.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType">
            <summary>The type of noise to add to an image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Gaussian">
            <summary>A type of noise whose histogram is bell-shaped: most of the noise will occur in the middle of the pixel value range, and less noise will occur at the extremes.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Negative">
            <summary>Negative Exponential Noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Rayleigh">
            <summary>Rayleigh noise.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType.Uniform">
            <summary>Uniform Noise.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection">
            <summary>Specifies the direction of the edge detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Top">
            <summary>Emphasizes top edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Right">
            <summary>Emphasizes right edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Bottom">
            <summary>Emphasizes bottom edges</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection.Left">
            <summary>Emphasizes left edges</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType">
            <summary>Specified the type of the edge detection.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Laplacian">
            <summary>Laplacian Edge Detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Prewitt">
            <summary>Prewitt Edge Detection</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType.Gradient">
            <summary>Gradient Edge Detection</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType">
            <summary>The type of mean filter to apply.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Arithmetic">
            <summary>Finds average values under the filter.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Geometric">
            <summary>Removes Gaussian type noise from an image better than the arithmetic mean filter. Unlike the YP mean filter, this is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter to output zero.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.Harmonic">
            <summary>Removes Gaussian type noise from an image better than the arithmetic mean filter. It is good at removing positive outliers, but it is susceptible to low-valued outliers: a zero pixel under the filter will cause the filter to output zero.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType.YP">
            <summary>A non-linear mean filter which is better at removing Gaussian type noise and preserving edge features than the basic arithmetic mean filter. It is also very good at removing outliers (positive or negative, depending on the order of the filter) from images.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode">
            <summary>The type of morphological filter to use in the MorphoGrayCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Dilation">
            <summary>    Used to smooth small dark regions tending to enhance     black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Erosion">
            <summary>    Used to smooth small light regions tending to reduce     black features in the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Open">
            <summary>The dilation of the erosion of the image used to reduce small black regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Close">
            <summary>The erosion of the dilation of the image used to reduce small white regions within the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Tophat">
            <summary>Used to enhance low-contrast, high frequency details within an image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode.Gradient">
            <summary>Highlights sharp gray-level transitions (edges) in an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand">
            <summary>    Uses a powerful technique for sharpening images in the     presence of low noise levels via an adaptive filtering     algorithm.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor">
            <summary>Initializes a new instance of AdaptiveUnsharpMask. Creates a new instance of AdaptiveUnsharpMaskCommand.</summary>
            <remarks>Region of Interest is available in the Professional edition only.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor">
            <summary>Creates a new instance of AdaptiveUnsharpMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor(System.Int32,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpQuality)">
            <summary>Creates a new instance of AdaptiveUnsharpMaskCommand specifying the threshold, sharpen amount and filter quality.</summary>
            <param name="threshold">    A value controlling the depth of the effect with the     lower the value, the greater the effect. (0 to 255)</param>
            <param name="amount">The amount of the sharpened signal to add to the output image.</param>
            <param name="filterQuality">Quality of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AdaptiveUnsharpMaskCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Amount">
            <summary>Gets or sets the amount of the sharpened signal to add to the output image.</summary>
            <remarks>    0 = no change     1 = full change     You can use any number (even negative), but the intended     use is between 0 and 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.FilterQuality">
            <summary>Gets or sets the quality of the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AdaptiveUnsharpMaskCommand.Threshold">
            <summary>    Gets or sets a value controlling the depth of the     effect.</summary>
            <remarks>    Any value between 0 and 255 is valid. The lower the     value, the greater the effect.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand">
            <summary>Add different types of noise to an image.</summary>
            <remarks>See the Workspace or WorkspaceViewer for applying this command to an image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor">
            <summary>Initialize a new instance of AddNoiseCommand. Creates a new instance of AddNoiseCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor">
            <summary>Creates a new instance of AddNoiseCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean)">
            <summary>    Initializes a new instance of AddNoiseCommand specifying     the filter type, variance, and monochromatic setting.</summary>
            <param name="noiseType">The type of noise to apply.</param>
            <param name="variance">Controls the intensity.</param>
            <param name="monochromatic">If True, the same noise is applied equally to all pixel channels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseFilterType,System.Double,System.Boolean,System.Double)">
            <summary>    Initializes a new instance of AddNoiseCommand specifying     the filter type, variance, monochromatic setting, and     mean.</summary>
            <param name="noiseType">The type of noise to apply.</param>
            <param name="variance">Controls the intensity.</param>
            <param name="monochromatic">When true applies the same noise equally to each channel.</param>
            <param name="mean">Adds additional noise to the output for Gaussian and Uniform noise types.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of AddNoiseCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>    Only the fourth channel can be set using this flag. By     default, with a value of 0, the fourth channel is ignored for     RGBA images.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Mean">
            <summary>Gets or sets a value which adds additional noise to the output for Gaussian and Uniform noise types.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Monochromatic">
            <summary>Gets or sets a value that when true applies the same noise equally to each channel.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.NoiseType">
            <summary>Gets or sets the type of noise to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.AddNoiseCommand.Variance">
            <summary>Gets or sets a value controlling the intensity.</summary>
            <remarks>There is no upper limit to this value. A good value to start with is around 500.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand">
            <summary>Applies a Blur filter onto an image.</summary>
            <remarks>Requires a continuous tone image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor">
            <summary>Initializes a new instance of BlurCommand. Creates a new instance of BlurCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor">
            <summary>Creates a new instance of BlurCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Double)">
            <summary>Initializes a new instance of BlurCommand specifying the intensity.</summary>
            <param name="intensity">The intensity of the filter. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Double,System.Int32)">
            <summary>Initializes a new instance of BlurCommand specifying the intensity and matrix size.</summary>
            <param name="intensity">The intensity of the filter. (0 to 100)</param>
            <param name="matrixSize">The size of the matrix. Should be an odd value greater than or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BlurCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>    A value of 0 or AllChannels will process each channel in     the image. Remove the fourth channel from the bit flag to     ignore the alpha in an RGBA image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.Intensity">
            <summary>Gets or sets a value controlling the intensity of the filter.</summary>
            <remarks>Valid values are between 0 and 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.MatrixSize">
            <summary>Gets or sets the size of the matrix.</summary>
            <remarks>The larger the matrix, the greater depth of the effect. Should be an odd value greater than or equal to 3.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand">
            <summary>Performs a Gaussian blur filter on the image. This has a more dispersed effect then the traditional blur filter, but slower.</summary>
            <remarks>    This method requires a continuous tone image. If the source     image is not continuous, it will raise the     ChangePixelFormat event and convert the image     to a continuous tone format, which can be 8-bit grayscale, RGB,     or RGBA.     Our ActiveX version, ImgX, uses Intensity for this method     where Intensity = (sigma - 0.5) * 100. A good value to start     with is around 2.0.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor">
            <summary>Initializes a new instance of BlurGaussianCommand. Creates a new instance of BlurGaussianCommand.</summary>
            <remarks>Region of Interest is available in the Photo Pro and Document Imaging editions.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor">
            <summary>Creates a new instance of BlurGaussianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor(System.Double)">
            <summary>Creates a new instance of BlurGaussianCommand specifying the amount of blur.</summary>
            <param name="sigma">The standard deviation of the gaussian kernal, controlling the amount of blur.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BlurGaussianCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>    A value of 0 or AllChannels will process each channel in     the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.Sigma">
            <summary>Gets or sets the standard deviation of the gaussian kernal, controlling the amount of blur.</summary>
            <remarks>Good values to start with are between 0.6 and 2.4. The higher the value the greater the blur depth and longer the processing time.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.BlurGaussianCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand">
            <summary>Find edges in an image using the Canny algorithm.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor">
            <summary>Initializes a new instance of CannyEdgeDetectorCommand. Creates a new instance of CannyEdgeDetectorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor">
            <summary>Creates a new instance of CannyEdgeDetectorCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Double,System.Double,System.Double)">
            <summary>Creates a new instance of CannyEdgeDetectorCommand specifying the deviation and hysteresis.</summary>
            <param name="sigma">Standard deviation of the gaussian kernal.</param>
            <param name="lowHysteresis">The low hysteresis value. (0 to 100)</param>
            <param name="highHysteresis">The high hysteresis value. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of CannyEdgeDetectorCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary>Apply the command to the given image.</summary>
            <returns>A new object of type  ImageResults.</returns>
            <remarks>The ImageResults object will always contain a valid Image property which represents the output of the command. This property may be the same as the input image.</remarks>
            <param name="image">The image which will by processed by the command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.HighHysteresis">
            <summary>Gets or sets a value used to specify the high hysteresis value.</summary>
            <remarks>This fraction (0 to 100) specifies the percentage point in a histogram of the gradient of the magnitude. Magnitude values of zero are not counted in the histogram. Good starting values are between 60 and 90.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.LowHysteresis">
            <summary>Gets or sets a value used to specify the low hysteresis value.</summary>
            <remarks>This is a percentage of the computed high threshold edge strength value. Good starting values are between 20 and 50.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.Sigma">
            <summary>Gets or sets the standard deviation of the gaussian kernal.</summary>
            <remarks>Good values to start with are between 0.6 and 2.4. Higher values increase processing time.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.CannyEdgeDetectorCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand">
            <summary>This command can be used to replace the hue, saturation and luminance values in an image with those of a specified color.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor">
            <summary>Creates a new instance of ColorizeCommand.Creates a new instance of ColorizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor">
            <summary>Creates a new instance of ColorizeCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Drawing.Color)">
            <summary>Creates a new instance of ColorizeCommand specifying the base color.</summary>
            <param name="baseColor">The color used for processing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Drawing.Color,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a new instance of ColorizeCommand specifying the base color and values indicating whether to process the hue, saturation and luminance.</summary>
            <param name="baseColor">The color used for processing.</param>
            <param name="applyHue">Set to true to replace the pixel hue with the hue from baseColor.</param>
            <param name="applySaturation">Set to true to replace the pixel saturation with the saturation from baseColor.</param>
            <param name="applyLuminance">Set to true to replace the pixel luminance with the luminance from baseColor.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ColorizeCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyHue">
            <summary>Gets or sets a value indicating whether the hue pixel values is replaced by the BaseColor hue.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplyLuminance">
            <summary>Gets or sets a value indicating whether the luminance pixel values is replaced by the BaseColor luminance.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.ApplySaturation">
            <summary>Gets or sets a value indicating whether the saturation pixel values is replaced by the BaseColor saturation.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.BaseColor">
            <summary>Gets or sets the base color used for processing.</summary>
            <remarks>The hue, saturation and luminance of this color is used to process the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ColorizeCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand">
            <summary>Applies a custom Convolution Filter to an image.</summary>
            <remarks>    This should only be used on continuous-tone images (RGBA,     grayscale, RGB, etc.).     If Traditional is true, this can be used to do things     like a Gaussian blur, etc., depending on the matrix     used.     The number of columns and the number of rows in the     matrix must both be odd.     The filter is applied as follows :              M = matrix ( 3 x 3, in this example)                                                            M                     =                     1                     1                     1                                          this is a sharpening matrix                                                       1                     -8                     1                                                       1                     1                     1                                                The matrix is centered on the current pixel. In this         example, M[4] is the center of the matrix.         k is the inteisity.         P = pixels . Since the matrix is centered on the         current pixel, P(x,y), the pixels used in this calculation         will be :                                                            P(x-1,y-1)                     P(x, y-1)                     P(x+1, y-1)                                                       P(x-1,y)                     P(x, y)                     P(x+1, y)                                                       P(x-1,y+1)                     P(x, y+1)                     P(x+1, y+1)                                                t = sum ( M[i] * P[i] ) [for all elements of the         matrix]         if "traditional" processing (see uFlags)         outPixel = k * t         else         outPixel = curPixel - (k * t)         outPixel is then clipped to 0..255          Matrix M in this example demonstrates the sharpening     filter used by this library, if bTraditional is FALSE.     Besides the ability to use matricies of arbitrary size,     this object differs from ConvolutionMatrixCommand in the way     the final calculation is performed.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor">
            <summary>Initializes a new instance of ConvolutionFilterCommand. Creates a new instance of ConvolutionFilterCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor">
            <summary>Creates a new instance of ConvolutionFilterCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Double)">
            <summary>Creates a new instance of ConvolutionFilterCommand specifying the matrix and intensity.</summary>
            <param name="matrix">The matrix to apply to the image.</param>
            <param name="intensity">The intensity of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ConvolutionFilterCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Intensity">
            <summary>Gets or sets a value controlling the intensity of the filter.</summary>
            <remarks>Must be a value greater than 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Matrix">
            <summary>Gets or sets the matrix to apply to the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionFilterCommand.Traditional">
            <summary>Gets or sets a value indicating if the traditional version is used.</summary>
            <remarks>The traditional filter can be used to perform gaussian blur and some others.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand">
            <summary>Applies a custom Convolution Matrix to an image.</summary>
            <remarks>    This method requires a continuous tone image. If the     source image is not continuous, it will raise the     ChangePixelFormat event and convert the image     to a continuous tone format, which can be 8-bit grayscale, RGB,     or RGBA.     The matrix is an array of 9 doubles, arranged as :                                                                      0                     1                     2                                                       3                     4                     5                                                       6                     7                     8                                                      where "4" is the source pixel.          It is applied for pixel(x,y) as :          Step 1     double tempSum = (     pMatrix[0] * pixel(x-1, y-1) +     pMatrix[1] * pixel(x, y-1) +     pMatrix[2] * pixel(x+1, y-1) +     pMatrix[3] * pixel(x-1, y ) +     pMatrix[4] * pixel(x, y ) +     pMatrix[5] * pixel(x+1, y ) +     pMatrix[6] * pixel(x-1, y+1) +     pMatrix[7] * pixel(x, y+1) +     pMatrix[8] * pixel(x+1, y+1));          Step 2     if doFeedback = true     tempSum = pixel(x,y) * (1.0 - k) + (k * tempSum);     else     tempSum = tempSum * k;          where k is the intensity          Step 3     tempSum = min(tempSum, 255);          Step 4     tempSum = max(tempSum, 0);          Step 5     outval = tempSum;</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor">
            <summary>Initializes a new instance of the ConvolutionMatrixCommand. Creates a new instance of ConvolutionMatrixCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor">
            <summary>Creates a new instance of ConvolutionMatrixCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix,System.Boolean,System.Double)">
            <summary>Creates a new instance of ConvolutionMatrixCommand specifying the matrix, feedback and intensity.</summary>
            <param name="matrix">The matrix to apply to the image.</param>
            <param name="feedback">Indicates if a feedback calculation is performed.</param>
            <param name="intensity">The intensity of the filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ConvolutionMatrixCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Feedback">
            <summary>Gets or sets a value indicating if a feedback calculation is performed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Intensity">
            <summary>Gets or sets a value controlling the intensity of the filter.</summary>
            <remarks>Must be a value greater than 0.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.Matrix">
            <summary>Gets or sets the matrix to apply to the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ConvolutionMatrixCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand">
            <summary>This filter cleans the image by removing stray pixel spikes (speckles).</summary>
            <remarks>For despeckling document images, see  DocumentDespeckleCommand.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.#ctor">
            <summary>Initializes a new instance of DespeckleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.#ctor">
            <summary>Creates a new instance of DespeckleCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DespeckleCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.Clone">
            <summary>Returns a copy of the command.</summary>
            <returns>A copy of the DespeckleCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.InternalActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>InternalActualCommand does the actual work of the image processing command.</summary>
            <returns>Null (Nothing in VB)</returns>
            <param name="source">The source image for processing. This may be different from the original image.</param>
            <param name="dest">The destination image. Dest will be null when InPlaceProcessing is true or when ConstructFinalImage returns null.</param>
            <param name="imageArea">An area of the source image to process. When the destination image is non-null, it will always be the same size as imageArea. ImageArea only differs in size from the source image when the command is a subclass of ImageRegionCommand and when there is a region of interest.</param>
            <param name="results">The results object that will be used for this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DespeckleCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix">
            <summary>This object composes of a matrix of doubles that is used in various filters including ConvolutionFilterCommand and ConvolutionMatrixCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.#ctor">
            <summary>Initializes a new instance of DoubleMatrix.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of DoubleMatrix.</summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DoubleMatrix from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this object.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetArray">
            <summary>Return a one-dimentional array that composes of the matrix elements.</summary>
            <returns>A one-dimentional array that composes of the matrix elements.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetItem(System.Int32,System.Int32)">
            <summary>Gets a value in the specified location of the matrix.</summary>
            <returns>A value in the specified location of the matrix.</returns>
            <param name="row">The row containing the element to get. (zero based)</param>
            <param name="column">The column containing the element to get. (zero based)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this object.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this object.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.GetRow(System.Int32)">
            <summary>Returns a one-dimensional array containing an entire row of the matrix.</summary>
            <returns>A one-dimensional array containing an entire row of the matrix.</returns>
            <param name="rowIndex">The zero based row to retreive.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetItem(System.Int32,System.Int32,System.Double)">
            <summary>Set the value of an element in the array.</summary>
            <param name="row">The row containing the element to set. (zero based)</param>
            <param name="column">The column containing the element to set. (zero based)</param>
            <param name="itemValue">The value to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.SetRow(System.Int32,System.Double[])">
            <summary>Set the entire row of the matrix to a parameter list of values.</summary>
            <param name="rowIndex">The zero based row index to set.</param>
            <param name="rowList">A parameter array of doubles that are set to the matrix row.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Columns">
            <summary>Gets or sets the number of columns in the matrix.</summary>
            <remarks>Most methods require an odd and equal number of columns and rows.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DoubleMatrix.Rows">
            <summary>Gets or sets the number of rows in the matrix.</summary>
            <remarks>Most methods require an odd and equal number of columns and rows.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand">
            <summary>This command is used to remove dust and scratch marks from an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor">
            <summary>Creates a new instance of DustAndScratchRemovalCommand specifying the filter size, threshold and blending values. Creates a new instance of DustAndScratchRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor">
            <summary>Creates a new instance of DustAndStratchRemovalCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor(System.Int32,System.Int32,System.Double)">
            <summary>Creates a new instance of DustAndScratchRemovalCommand specifying the filter size, threshold and blending.</summary>
            <param name="filterSize">The size of the features that will be removed.</param>
            <param name="threshold">The minimum detail intensity required to trigger removal. (0 to 255)</param>
            <param name="blending">The blending of original image with the removed image detail. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of DustAndScratchCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Blending">
            <summary>Gets or sets the blending of original image with the removed image detail.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.ChannelsToProcess">
            <summary>Gets or sets the channels of the image to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.FilterSize">
            <summary>Gets or sets the size of the features that will be removed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.DustAndScratchRemovalCommand.Threshold">
            <summary>Gets or sets the minimum detail intensity required to trigger removal.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand">
            <summary>This filter enhances edges in an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor">
            <summary>Initializes a new instance of EdgeDetectionCommand. Creates a new instance of EdgeDetectionCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor">
            <summary>Creates a new instance of EdgeDetectionCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType)">
            <summary>Initializes a new instance of EdgeDetectionCommand specifying the type.</summary>
            <param name="type">Type of edge detection filter to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double)">
            <summary>Initializes a new instance of EdgeDetectionCommand specifying the type and intensity.</summary>
            <param name="type">Type of edge detection filter to apply.</param>
            <param name="intensity">Intensity of the edge detection.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionType,System.Double,Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionDirection)">
            <summary>Initializes a new instance of EdgeDetectionCommand specifying the type, intensity, and direction.</summary>
            <param name="type">Type of edge detection filter to apply.</param>
            <param name="intensity">Intensity of the edge detection.</param>
            <param name="direction">The edge detection for Gradient and Prewitt filters.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of EdgeDetectionCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.ChannelsToProcess">
            <summary>Gets or sets the image channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Direction">
            <summary>Gets or sets the edge direction for Gradient and Prewitt filters.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Intensity">
            <summary>Gets or sets the intensity of the edge detection.</summary>
            <remarks>Generally values should be from 0 to 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EdgeDetectionCommand.Type">
            <summary>    Gets or sets the type of edge detection filter to     apply.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand">
            <summary>Applies an embossing filter to the source image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor">
            <summary>Initializes a new instance of the EmbossCommand. Creates a new instance of EmbossCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor">
            <summary>Creates a new instance of EmbossCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the EmbossCommand specifying the angle, elevation, and depth.</summary>
            <param name="angle">Angle of the light source in degrees.</param>
            <param name="elevation">Height of the light source in degrees.</param>
            <param name="depth">Controls the depth of the emboss.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32,Atalasoft.Imaging.AtalaImage)">
            <summary>Initializes a new instance of the EmbossCommand specifying the angle, elevation, depth, and texture.</summary>
            <param name="angle">Angle of the light source in degrees.</param>
            <param name="elevation">Height of the light source in degrees.</param>
            <param name="depth">Controls the depth of the emboss.</param>
            <param name="textureMap">An AtalaImage that is used as a texture map.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Initializes a new instance of the EmbossCommand specifying the angle, elevation, depth, and texture.</summary>
            <param name="angle">Angle of the light source in degrees.</param>
            <param name="elevation">Height of the light source in degrees.</param>
            <param name="depth">Controls the depth of the emboss.</param>
            <param name="selfTexture">Indicates if the source image should be used as the texture.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of EmbossCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary>Apply the command to the given image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Angle">
            <summary>    Gets or sets the angle of the light source in     degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Depth">
            <summary>Gets or sets a value controlling the depth of the emboss.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.Elevation">
            <summary>    Gets or sets the Height of the light source in     degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SelfTexture">
            <summary>Gets or sets a value indicating if the source image should be used as the texture.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureEnhancement">
            <summary>Gets or sets a value indicating whether the emboss is enhanced when applying a texture.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.EmbossCommand.TextureMap">
            <summary>Gets or sets an AtalaImage that is used as a texture map.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand">
            <summary>Removes Low Frequency signals from an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor">
            <summary>Initializes a new instance of the HighPassCommand. Creates a new instance of HighPassCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor">
            <summary>Creates a new instance of HighPassCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Double)">
            <summary>Initializes a new instance of the HighPassCommand specifying the sigma value.</summary>
            <param name="sigma">A value indicating the amount of effect to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Double,System.Double)">
            <summary>Initializes a new instance of the HighPassCommand specifying the sigma and mix value.</summary>
            <param name="sigma">A value indicating the amount of effect to apply.</param>
            <param name="mix">The percentage of the filter to mix into the original image. (0 to 100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of HighPassCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Apply(Atalasoft.Imaging.AtalaImage)">
            <summary>Apply the command to the given image.</summary>
            <param name="image">The image which will by processed by the command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Mix">
            <summary>Gets or sets the percentage of the filter to mix into the original image.</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.Sigma">
            <summary>Gets or sets a value indicating the amount of effect to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.HighPassCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix">
            <summary>This object composes of a matrix of integers that is used in various morphological and related filters.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.#ctor">
            <summary>Initializes a new instance of IntegerMatrix.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of IntegerMatrix.</summary>
            <param name="rows">The number of rows for the matrix.</param>
            <param name="columns">The number of columns for the matrix.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of IntegerMatrix from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this object.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetArray">
            <summary>Return a one-dimentional array that composes of the matrix elements.</summary>
            <returns>A one-dimentional array that composes of the matrix elements.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetItem(System.Int32,System.Int32)">
            <summary>Gets a value in the specified location of the matrix.</summary>
            <returns>A value in the specified location of the matrix.</returns>
            <param name="row">The row containing the element to get. (zero based)</param>
            <param name="column">The column containing the element to get. (zero based)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this object.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this object.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.GetRow(System.Int32)">
            <summary>Returns a one-dimensional array containing an entire row of the matrix.</summary>
            <returns>A one-dimensional array containing an entire row of the matrix.</returns>
            <param name="rowIndex">The zero based row to retreive.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetItem(System.Int32,System.Int32,System.Int32)">
            <summary>Set the value of an element in the array.</summary>
            <param name="row">The row containing the element to set. (zero based)</param>
            <param name="column">The column containing the element to set. (zero based)</param>
            <param name="itemValue">The value to set.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.SetRow(System.Int32,System.Int32[])">
            <summary>Set the entire row of the matrix to a parameter list of values.</summary>
            <param name="rowIndex">The zero based row index to set.</param>
            <param name="rowList">A parameter array of integers that are set to the matrix row.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Columns">
            <summary>Gets the number of columns in the matrix.</summary>
            <remarks>Most methods require an odd and equal number of columns and rows.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix.Rows">
            <summary>Gets the number of rows in the matrix.</summary>
            <remarks>Most methods require an odd and equal number of columns and rows.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand">
            <summary>Increases the color intensity as if a flash of light from a camera hit it.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor">
            <summary>Initializes a new instance of the IntensifyCommand. Creates a new instance of IntensifyCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor">
            <summary>Creates a new instance of IntensifyCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor(System.Double)">
            <summary>Creates a new instance of IntensifyCommand specifying the intensity.</summary>
            <param name="intensity">The new intensity value.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of IntensifyCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.Intensity">
            <summary>    Gets or sets a value increasing the color     intensity.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.IntensifyCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand">
            <summary>    Sets each color value to the maximum value under the     filter.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor">
            <summary>Initializes a new instance of the MaximumCommand. Creates a new instance of MaximumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor">
            <summary>Creates a new instance of MaximumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of MaximumCommand specifying the filter size.</summary>
            <param name="filterSize">Size of the filter. Should be an odd value greater than or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MaximumCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
            <remarks>Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of speed. An even value will be incremented by 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MaximumCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand">
            <summary>    Applies an Arithmetic, Harmonic, Geometric, or Yp mean     filter to an image.</summary>
            <remarks>Mean filtering is a simple method of smoothing images (reducing the amount of intensity variation between one pixel and the next) and often used to reduce noise.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor">
            <summary>Initializes a new instance of the MeanCommand. Creates a new instance of MeanCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor">
            <summary>Creates a new instance of MeanCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType)">
            <summary>Initializes a new instance of the MeanCommand specifying the type.</summary>
            <param name="meanType">The type of mean filter to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32)">
            <summary>Initializes a new instance of the MeanCommand specifying the type, filter size.</summary>
            <param name="meanType">The type of mean filter to apply.</param>
            <param name="filterSize">The size of the filter. Should be an odd value greater than or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MeanFilterType,System.Int32,System.Int32)">
            <summary>Initializes a new instance of the MeanCommand specifying the type, size, and power.</summary>
            <param name="meanType">The type of mean filter to apply.</param>
            <param name="filterSize">The size of the filter. Should be an odd value greater than or equal to 3.</param>
            <param name="power">A non-zero integer that controls power for the Yp mean filter.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MeanCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
            <remarks>Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of speed. An even value will be incremented by 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.MeanType">
            <summary>Gets or sets the type of mean filter to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.Power">
            <summary>Gets or sets the a non-zero integer that controls power for the Yp mean filter.</summary>
            <remarks>Ignored if meanType is not MeanFilterType.Yp. power &lt; 0, removes positive outliers power &gt; 0, removes negative outliers</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MeanCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand">
            <summary>    Reduces noise in an image, similarly to the mean filter,     however doing a better job preserving useful detail in the     image.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image. For document images, please see  DocumentMedianCommand instead.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor">
            <summary>Initializes a new instance of the MedianCommand. Initializes a new instance of the MedianCommand. Initializes a new instance of the MedianCommand specifying the size of the filter. Creates a new instance of MedianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor">
            <summary>Creates a new instance of MedianCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Int32)">
            <summary>Creates a new instance of MedianCommand specifying the filter size.</summary>
            <param name="filterSize">The size of the matrix used for processing this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MedianCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.FilterSize">
            <summary>Gets or sets the size of the matrix.</summary>
            <remarks>The filter size should be an odd value. The larger the value, the greater the effect at the expense of speed. An even value will be incremented by 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MedianCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand">
            <summary>    Find the average of minimum and maximum values under the     filter.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor">
            <summary>Initializes a new instance of the MidpointCommand. Initializes a new instance of the MidpointCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor">
            <summary>Creates a new instance of MidpointCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Int32)">
            <summary>Initializes a new instance of the MidpointCommand specifying the filter size.</summary>
            <param name="filterSize">The size of the filter. Should be an odd value greater than or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MidpointCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.ChannelsToProcess">
            <summary>Gets or sets the  ChannelFlags specifying which channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MidpointCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand">
            <summary>Find the minimum values under the filter.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor">
            <summary>Initializes a new instance of the MinimumCommand. Initializes a new instance of the MinimumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor">
            <summary>Creates a new instance of MinimumCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Int32)">
            <summary>Initializes a new instance of the MinimumCommand specifying the filter size.</summary>
            <param name="filterSize">The size of the filter. Should be an odd value greater than or equal to 3.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MinimumCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.ChannelsToProcess">
            <summary>Gets or sets a bit flag indicating the channels to process.</summary>
            <remarks>A value of 0 or AllChannels will process each channel in the image.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.FilterSize">
            <summary>Gets or sets the size of the filter.</summary>
            <remarks>Should be an odd value (3, 5, 7, 9, etc.). The larger the value, the greater the effect at the expense of speed. An even value will be incremented by 1.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MinimumCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand">
            <summary>Applies a morphological Erosion, Dilation, Open, Close, or TopHat to a grayscale image.</summary>
            <remarks>    Morphology is the study of form and structure. In image     processing, it encompasses a set of techniques that merge     traditional image processing with set theory from     mathematics.     See Morphological Filters for more information about     morphology.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor">
            <summary>Initializes a new instance of the MorphoGrayCommand. Creates a new instance of MorphoGrayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor">
            <summary>Creates a new instance of MorphoGrayCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode)">
            <summary>Initializes a new instance of the MorphoGrayCommand specifying the filter mode.</summary>
            <param name="mode">The type of morphological to apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayMode,Atalasoft.Imaging.ImageProcessing.Filters.IntegerMatrix)">
            <summary>Initializes a new instance of the MorphoGrayCommand specifying the filter mode and a structuring element.</summary>
            <param name="mode">The type of morphological to apply.</param>
            <param name="mask">The structuring element to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MorphoGrayCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mask">
            <summary>Gets or sets a structuring element to use with the morphological filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.Mode">
            <summary>Gets or sets the type of morphological filter to apply.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.MorphoGrayCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand">
            <summary>    Applies a traditional sharpening filter to the     image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor">
            <summary>Creates a new instance of SharpenCommand. Creates a new instance of SharpenCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor">
            <summary>Creates a new instance of SharpenCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Double)">
            <summary>Creates a new instance of SharpenCommand specifying intensity.</summary>
            <param name="intensity">Filter intensity. (0-100)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Double,System.Int32)">
            <summary>Creates a new instance of SharpenCommand specifying intensity, and matrixSize.</summary>
            <param name="intensity">Filter intensity. (0-100)</param>
            <param name="matrixSize">The larger the matrixSize, the stronger the effect</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SharpenCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.ChannelsToProcess">
            <summary>Gets or sets the  ChannelFlags specifying which channels to process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.Intensity">
            <summary>Gets or sets the value of intensity</summary>
            <remarks>Valid values are from 0 to 100.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.MatrixSize">
            <summary>Gets or sets the size of the filter.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.SharpenCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand">
            <summary>Set pixel components above a high threshold value to 255 and below a low threshold value to 0.</summary>
            <remarks>This is not the same as the thresholding commands in the Document namespace. See  GlobalThresholdCommand and  AdaptiveThresholdCommand for binarizing color or grayscale images into binary images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor">
            <summary>Creates a new instance of ThresholdCommand specifying minValue and maxValue. Creates a new instance of ThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor">
            <summary>Creates a new instance of ThresholdCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of  ThresholdCommand specifying minValue, and maxValue.</summary>
            <param name="minValue">Pixels below this level are set to 0. Valid values (0 - 255).</param>
            <param name="maxValue">Pixels above this level are set to 255. (0 - 255)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Int32,System.Int32,Atalasoft.Imaging.ImageProcessing.ChannelFlags)">
            <summary>Creates a new instance of ThresholdCommand specifying minValue, maxValue and channelsToProcess.</summary>
            <param name="minValue">Pixels below this level are set to 0. Valid values (0 - 255).</param>
            <param name="maxValue">Pixels above this level are set to 255. (0 - 255)</param>
            <param name="channelsToProcess">The  ChannelFlags specifying which channels to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ThresholdCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.AdjustBands(System.Drawing.Rectangle,System.Drawing.Rectangle[])">
            <summary>    Sets the image area which will be processed and also     defines the bands or chunks of the image of which each will be     sent to a separate thread.</summary>
            <returns>An array of Rectangles which represent the bands that will actually be used.</returns>
            <remarks>    Each band defines an area on which the IThreadableCommand     will operate in an independent thread.</remarks>
            <param name="bounds">The area of the image which will be processed.</param>
            <param name="bands">    An array of Rectangles which represent the desired     bands.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.Clone">
            <summary>Returns a copy of this command.</summary>
            <returns>A copy of the ThresholdCommand.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.PerformSectionCommand(Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle)">
            <summary>    Performs the command on a specified section of the     image.</summary>
            <remarks>This is used internally by each thread to perform its portion of the work for the particular IThreadableCommand.</remarks>
            <param name="source">The source image.</param>
            <param name="sourceBounds">The source rectangular boundary.</param>
            <param name="dest">The destination image.</param>
            <param name="destBounds">The destination image boundary.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.AutoThread">
            <summary>    If set to true the IThreadableCommand will automatically     parallelize image processing.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.ChannelsToProcess">
            <summary>Gets or sets the  ChannelFlags specifying which channels to process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MaxValue">
            <summary>Gets or sets a value indicating that pixels above this value are set to 255.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.MinValue">
            <summary>Gets or sets a value indicating that pixels below this value are set to 0.</summary>
            <remarks>Valid values are from 0 to 255.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.ThresholdCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand">
            <summary>The unsharp mask is a sharpening filter which derives its name from the fact that it enhances edges and other high frequency components in an image via a procedure which subtracts an unsharp, or gaussian blurred, version of an image from the original image. The unsharp mask filter is commonly used in the photographic and printing industries for crispening edges.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor">
            <summary>Creates a new instance of  UnsharpMaskCommand specifying threshold, amount, and sigma. Creates a new instance of UnsharpMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor">
            <summary>Creates a new instance of UnsharpMaskCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor(System.Int32,System.Double,System.Double)">
            <summary>Creates a new instance of UnsharpMaskCommand specifying the threshold, amount of effect and deviation.</summary>
            <param name="threshold">Controls the depth of the effect; the lower the value, the greater the effect. Any value between 0 and 255 is valid.</param>
            <param name="amount">Controls the intensity of the effect. Values should be between 0.0 (no effect) and 1.0 (full effect). Higher values will give unpredictable results.</param>
            <param name="sigma">The standard deviation (sigma) of the gaussian kernal, controlling the amount of blur. Good values to start with are between 0.6 and 2.4. The higher the value the greater the blur depth and longer the processing time.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of UnsharpMaskCommand from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Amount">
            <summary>Gets or sets the value of amount</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.ChannelsToProcess">
            <summary>Gets or sets the  ChannelFlags specifying which channels to process.</summary>
            <remarks>The default value is AllChannels.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Sigma">
            <summary>Gets or sets the value of sigma</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Filters.UnsharpMaskCommand.Threshold">
            <summary>Gets or sets the value of threshold</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageProcessing.Transforms">
            <summary>Contains classes that transform pixel data from one location to another.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode">
            <summary>Enumeration used by  EllipticalTransform and  PolygonTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Horizontal">
            <summary>Only the horizontal sides will be compressed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Vertical">
            <summary>Only the vertical sides will be compressed.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode.Both">
            <summary>Both horizontal and vertical sides will be compressed.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode">
            <summary>Enumeration used by  OffsetTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.DontWrapEdges">
            <summary>Don't wrap the image at the edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapBothEdges">
            <summary>Wrap both X and Y edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyX">
            <summary>Wrap only the X edges.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode.WrapOnlyY">
            <summary>Wrap only the Y edges.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode">
            <summary>Enumeration used by  RippleTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Full">
            <summary>Waves remain at full intensity.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Linear">
            <summary>Waves diminish linearly with their distance from center.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Square">
            <summary>Waves diminish with the square of their distance.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Sine">
            <summary>Waves diminish with the sine of their distance (inverse!).</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode.Cosine">
            <summary>Waves diminish with the cosine of their distance.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection">
            <summary>Enumeration used by  SkewCommand.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Horizontal">
            <summary>Makes the image skew on the top or bottom.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection.Vertical">
            <summary>Makes the image skew on the left or right.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode">
            <summary>Enumeration used by  WaveTransform.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightSine">
            <summary>The wave moves from left to right as a sine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomSine">
            <summary>The wave moves from top to bottom as a sine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.LeftToRightCosine">
            <summary>The wave moves from left to right as a cosine wave.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode.TopToBottomCosine">
            <summary>The wave moves from top to bottom as a cosine wave.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform">
            <summary>    This transform applies a bump map texture to an     image.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor">
            <summary>Initializes a new instance of BumpMapTransform.Creates a new instance of BumpMapTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor">
            <summary>Creates a new instance of BumpMapTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Double,Atalasoft.Imaging.AtalaImage)">
            <summary>Creates a new instance of  BumpMapTransform specifying smoothness, and bumpMapImage.</summary>
            <param name="smoothness">Controls smoothness of the effect (try between .5 and 1.5 to start).</param>
            <param name="bumpMapImage">An 8-bit grayscale image to use as the bump map.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Double,Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of the BumpMapTransform effect.</summary>
            <param name="smoothness">Controls smoothness of the effect (try between .5 and 1.5 to start).</param>
            <param name="bumpMapImage">An 8-bit grayscale image to use as the bump map.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of BumpMapTransform from serialization information.</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to which this transform will be applied.</param>
            <param name="height">The height of the image to which this transform will be applied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.BumpMapImage">
            <summary>Gets or sets the bump map image used in this transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.Smoothness">
            <summary>Gets or sets the smoothness value which controls the smoothness of the effect (try between .5 and 1.5 to start).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.BumpMapTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode used for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform">
            <summary>Rounds the image into an ellipse or sphere.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor">
            <summary>Creates a new instance of the EllipticalTransform object.Creates a new instance of EllipticalTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor">
            <summary>Creates a new instance of EllipticalTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of EllipticalTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary>Creates a new instance of EllipticalTransform specifying radius, offset and mode.</summary>
            <param name="radius">The width and height of the ellipse.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The type of  CompressTransformMode used in this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of EllipticalTransform specifying radius, offset, mode and transformMode.</summary>
            <param name="radius">The width and height of the ellipse.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The type of  CompressTransformMode used in this transform.</param>
            <param name="transformMode">The  InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.#ctor(System.Drawing.Size,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of EllipticalTransform specifying radius, offset, mode, transformMode and backColor.</summary>
            <param name="radius">The width and height of the ellipse.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The type of  CompressTransformMode used in this transform.</param>
            <param name="transformMode">The  InterpolationMode used for this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to be used with this transform.</param>
            <param name="height">The height of the image to be used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Mode">
            <summary>Gets or sets the type of  CompressTransformMode used in this transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Offset">
            <summary>Gets or set the offset position from the center of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.Radius">
            <summary>Gets or set the width and height of the ellipse.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.EllipticalTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand">
            <summary>Flips an image horizontally or vertically.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor">
            <summary>Creates a new instance of the FlipCommand object.Creates a new instance of FlipCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor">
            <summary>Creates a new instance of FlipCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor(Atalasoft.Imaging.FlipDirection)">
            <summary>Creates a new instance of FlipCommand specifying the type of flip to perform.</summary>
            <param name="direction">Specifies which direction, horizontal or vertical, to flip the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of FlipCommand from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.Direction">
            <summary>Gets or sets the type of flip to perform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.InPlaceProcessing">
            <summary>    Gets a value indicating if the source image data is     processed in-place as opposed to returning a new image.</summary>
            <remarks>By default, this value is false. Implementing classes should override this and set it to true when processing the source image directly. When this value is true, the ImageResults.Image object returned by Apply will be the same image as the source image. In addition, the ImageResults.IsImageSourceImage will be set to true.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.FlipCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform">
            <summary>Used to create a zoomed camera lens effect.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor">
            <summary>Creates a new instance of the LensTransform object.Creates a new instance of LensTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor">
            <summary>Creates a new instance of LensTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Double,System.Drawing.Point)">
            <summary>    Creates a new instance of LensTransform     specifying radius and offset.</summary>
            <param name="radius">Maximum distance from the center for this effect.</param>
            <param name="offset">The offset position from the center of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of LensTransform specifying radius, offset and transformMode.</summary>
            <param name="radius">Maximum distance from the center for this effect.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The  InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of LensTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to be process.</param>
            <param name="height">The height of the image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Offset">
            <summary>Gets or set the offset position from the center of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.Radius">
            <summary>Gets or sets the maximum distance from the center for this effect.</summary>
            <remarks>Pixels past this distance will not be affected.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LensTransform.TransformMode">
            <summary>The  InterpolationMode used with this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform">
            <summary>    This transform produces a center-shift transform which     runs from one side of the image to the other, in a straight     line.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor">
            <summary>Creates an instance of the LineSliceTransform object.Creates a new instance of LineSliceTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor">
            <summary>Creates a new instance of LineSliceTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Int32,System.Int32,System.Boolean)">
            <summary>Creates a new instance of  LineSliceTransform object.</summary>
            <param name="endPoint1">Left or top edge of the transform.</param>
            <param name="endPoint2">Right or bottom edge of the transform.</param>
            <param name="horizontalTransform">Specifies if the transform will be horizontal or vertical.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Int32,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of  LineSliceTransform object.</summary>
            <param name="endPoint1">Left or top edge of the transform.</param>
            <param name="endPoint2">Right or bottom edge of the transform.</param>
            <param name="horizontalTransform">Specifies if the transform will be horizontal or vertical.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of LineSliceTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint1">
            <summary>Gets or sets the left or top edge of the transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.EndPoint2">
            <summary>Gets or sets the right or bottom edge of the transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.HorizontalTransform">
            <summary>Gets or sets the value specifying if the transform will be horizontal or vertical.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.LineSliceTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode used for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform">
            <summary>This transform creates a marbled, wavy, glassy, rippled effect.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor">
            <summary>Creates a new instance of the MarbleTransform object.Creates a new instance of MarbleTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor">
            <summary>Creates a new instance of MarbleTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size)">
            <summary>Creates a new instance of MarbleTransform specifying smoothness and scale.</summary>
            <param name="smoothness">Controls smoothness of the effect. Try between 0.5 and 1.5 to start.</param>
            <param name="scale">The size of the perlin noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of MarbleTransform specifying smoothness, scale and transformMode.</summary>
            <param name="smoothness">Controls smoothness of the effect. Try between 0.5 and 1.5 to start.</param>
            <param name="scale">The size of the perlin noise.</param>
            <param name="transformMode">The  InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of MarbleTransform specifying smoothness, scale, transformMode and backColor.</summary>
            <param name="smoothness">Controls smoothness of the effect. Try between 0.5 and 1.5 to start.</param>
            <param name="scale">The size of the perlin noise.</param>
            <param name="transformMode">The  InterpolationMode used for this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of MarbleTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Scale">
            <summary>Gets or sets the size of the perlin noise.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.Smoothness">
            <summary>Gets or sets the smoothness of the transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.MarbleTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode used for this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform">
            <summary>Moves the image on the canvas by a specified number of pixels.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor">
            <summary>Creates a new instance of OffsetTransform.</summary>
            <remarks>Creates a new OffsetTransform object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor">
            <summary>Creates a new instance of OffsetTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode)">
            <summary>Creates a new instance of OffsetTransform specifying offset and offsetMode.</summary>
            <param name="offset">The new left, top position for the image.</param>
            <param name="offsetMode">Style of  OffsetTransformMode to perform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of OffsetTransform specifying offset, offsetMode and transformMode.</summary>
            <param name="offset">The new left, top position for the image.</param>
            <param name="offsetMode">Style of  OffsetTransformMode to perform.</param>
            <param name="transformMode">    The      InterpolationMode used for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of OffsetTransform specifying offset, offsetMode, transformMode and backColor.</summary>
            <param name="offset">The new left, top position for the image.</param>
            <param name="offsetMode">Style of  OffsetTransformMode to perform.</param>
            <param name="transformMode">    The      InterpolationMode used for this transform.</param>
            <param name="backColor">The background color to use on newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of OffsetTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <returns>Null</returns>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.BackColor">
            <summary>Gets or sets the background color to use on newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.Offset">
            <summary>Gets or set the new left, top position for the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.OffsetMode">
            <summary>Gets or sets the style of  OffsetTransformMode to perform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.OffsetTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform">
            <summary>    This effect is similar to the marble transform, but the     image tends to break up less.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor">
            <summary>Creates a new instance of the PerlinTransform object.Creates a new instance of PerlinTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor">
            <summary>Creates a new instance of PerlinTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Double,System.Drawing.Size)">
            <summary>Creates a new instance of PerlinTransform specifying the smoothness and scale.</summary>
            <param name="smoothness">The smoothness of this effect.</param>
            <param name="scale">The size of the perlin noise.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Double,System.Drawing.Size,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of PerlinTransform specifying smoothness, scale and transform mode.</summary>
            <param name="smoothness">The smoothness of this effect.</param>
            <param name="scale">The size of the perlin noise.</param>
            <param name="transformMode">The InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of PerlinTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Scale">
            <summary>Gets or sets the size of the perlin noise.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.Smoothness">
            <summary>Gets or sets the smoothness of this effect.</summary>
            <remarks>Try values between 0.5 and 1.5 to start.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PerlinTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform">
            <summary>    This transform attracts pixels towards the center of the     image.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor">
            <summary>Creates a new instance of the PinchTransform object.Creates a new instance of PinchTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor">
            <summary>Creates a new instance of PinchTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point)">
            <summary>Creates a new instance of PinchTransform specifying maxRadius, amount and offset.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="amount">The number of pixels to pinch.</param>
            <param name="offset">The offset position from the center of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of PinchTransform specifying maxRadius, amount, offset and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="amount">The number of pixels to pinch.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The  InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of PinchTransform specifying maxRadius, amount, offset, transformMode and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="amount">The number of pixels to pinch.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The  InterpolationMode of this transform.</param>
            <param name="backColor">The background color used for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of PinchTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Amount">
            <summary>Gets or sets the number of pixels to pinch.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.BackColor">
            <summary>Gets or sets the background color used for newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.Offset">
            <summary>Gets or set the offset position from the center of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PinchTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform">
            <summary>    This transform resizes image rows (or columns) to fit     inside the specified polygon. This polygon must be convex. If     it is concave, the largest convex polygon that can be formed     from the points will be used.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor">
            <summary>Creates a new PolygonTransform object.Creates a new instance of PolygonTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor">
            <summary>Creates a new instance of PolygonTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode)">
            <summary>Creates a new instance of  PolygonTransform specifying points, and mode.</summary>
            <param name="points">Array of points for the polygon.</param>
            <param name="mode">The compress method to use on this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of  PolygonTransform specifying points, mode and transformMode.</summary>
            <param name="points">Array of points for the polygon.</param>
            <param name="mode">The compress method to use on this transform.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Drawing.Point[],Atalasoft.Imaging.ImageProcessing.Transforms.CompressTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of  PolygonTransform specifying points, mode, transformMode and backColor.</summary>
            <param name="points">Array of points for the polygon.</param>
            <param name="mode">The compress method to use on this transform.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of PolygonTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.GetPoints">
            <summary>Gets the points used in the polygon.</summary>
            <returns>An array of Point.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.SetPoints(System.Drawing.Point[])">
            <summary>Sets the points used in the polygon.</summary>
            <param name="points">An array of Point to use for the polygon.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.Mode">
            <summary>Gets or sets the  CompressTransformMode to use on this transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PolygonTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand">
            <summary>Perform a point to point warp of an image, creating a smear effect.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor">
            <summary>Creates a new instance of PushCommand specifying fromPixel, and toPixel. Creates a new instance of PushCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor">
            <summary>Creates a new instance of PushCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor(System.Drawing.Point,System.Drawing.Point)">
            <summary>Creates a new instance of PushCommand specifying the from and to positions.</summary>
            <param name="fromPixel">The position on the image to push from.</param>
            <param name="toPixel">The position on the image to move the pixels to.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of PushCommand from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.FromPixel">
            <summary>Gets or sets the position on the image to push from.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.PushCommand.ToPixel">
            <summary>Gets or sets the position on the image to move the pixels to.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand">
            <summary>    Similar to the      PolygonTransform, this transform additionally lets you     specify a source polygon to allow further control over the     warping of the image.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will raise the ChangePixelFormat event and convert the image to a continuous tone format, which can be 8-bit grayscale, RGB, or RGBA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor">
            <summary>Creates a new instance of the QuarilateralWarpCommand object.Creates a new instance of QuadrilateralWarpCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor">
            <summary>Creates a new instance of QuadrilateralWarpCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of  QuadrilateralWarpCommand specifying destination points that will yield a perspective transform.</summary>
            <param name="destBottomLeft">The bottom left point of the destination image in pixels.</param>
            <param name="destTopLeft">The top left point of the destination image in pixels.</param>
            <param name="destTopRight">The top right point of the destination image in pixels.</param>
            <param name="destBottomRight">The bottom right point of the destination image in pixels.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="backgroundColor">The background color used for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of  QuadrilateralWarpCommand specifying sourceBottomLeft, sourceTopLeft, sourceTopRight, sourceBottomRight, destBottomLeft, destTopLeft, destTopRight, destBottomRight, and interpolation.</summary>
            <param name="sourceBottomLeft">The bottom left point of the source image in pixels.</param>
            <param name="sourceTopLeft">The top left point of the source image in pixels.</param>
            <param name="sourceTopRight">The top right point of the source image in pixels.</param>
            <param name="sourceBottomRight">The bottom right point of the source image in pixels.</param>
            <param name="destBottomLeft">The bottom left point of the destination image in pixels.</param>
            <param name="destTopLeft">The top left point of the destination image in pixels.</param>
            <param name="destTopRight">The top right point of the destination image in pixels.</param>
            <param name="destBottomRight">The bottom right point of the destination image in pixels.</param>
            <param name="interpolation">The interpolation method to use.</param>
            <param name="backgroundColor">The background color used for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of QuadrilateralWarpCommand from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.BackgroundColor">
            <summary>Gets or sets the value of backgroundColor</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomLeft">
            <summary>Gets or sets the bottom left point of the destination image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestBottomRight">
            <summary>Gets or sets the bottom right point of the destination image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopLeft">
            <summary>Gets or sets the top left point of the destination image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.DestTopRight">
            <summary>Gets or sets the top right point of the destination image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.Interpolation">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomLeft">
            <summary>Gets or sets the bottom left point of the source image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceBottomRight">
            <summary>Gets or sets the bottom right point of the source image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopLeft">
            <summary>Gets or sets the top left point of the source image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SourceTopRight">
            <summary>Gets or sets the top right point of the source image in pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.QuadrilateralWarpCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform">
            <summary>    This transform randomly modifies the pixels of an     image.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor">
            <summary>Creates a new instance of the RandomTransform object.Creates a new instance of RandomTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor">
            <summary>Creates a new instance of RandomTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Double)">
            <summary>Creates a new instance of  RandomTransform specifying amount.</summary>
            <param name="amount">Amount to offset the pixels.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of  RandomTransform specifying amount and transformMode.</summary>
            <param name="amount">Amount to offset the pixels.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of RandomTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.Amount">
            <summary>Gets or sets the amount of offset to apply to the pixels.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RandomTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand">
            <summary>Overlays the current image onto a specified position on a new image of the specified background color.</summary>
            <remarks>    This command can be used for adding a border to an     image.     This method requires a continuous tone image. If the     source image is not continuous, it will raise the     ChangePixelFormat event and convert the image     to a continuous tone format, which can be 8-bit grayscale, RGB,     or RGBA.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor">
            <summary>Creates a new instance of the ResizeCanvasCommand object.Creates a new instance of ResizeCanvasCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor">
            <summary>Creates a new instance of ResizeCanvasCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ResizeCanvasCommand from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Drawing.Size,System.Drawing.Point,System.Drawing.Color)">
            <summary>Creates a new instance of  ResizeCanvasCommand specifying canvasSize, position, canvasColor, and canvasPaletteIndex.</summary>
            <param name="canvasSize">The size of the new canvas.</param>
            <param name="position">The position of the image on the new canvas.</param>
            <param name="canvasColor">The background color of the canvas</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.#ctor(System.Drawing.Size,System.Drawing.Point,System.Int32)">
            <summary>Creates a new instance of  ResizeCanvasCommand specifying canvasSize, position, canvasColor, and canvasPaletteIndex.</summary>
            <param name="canvasSize">The size of the new canvas.</param>
            <param name="position">The position of the image on the new canvas.</param>
            <param name="canvasPaletteIndex">The palette index of the canvas</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasColor">
            <summary>Gets or sets the background color of the canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasPaletteIndex">
            <summary>Gets or sets the palette index of the canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.CanvasSize">
            <summary>Gets or sets the size of the new canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.Position">
            <summary>Gets or sets the position of the image on the new canvas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ResizeCanvasCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform">
            <summary>Creates a water ripple effect on the image.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor">
            <summary>Creates a new instance of the RippleTransform object.Creates a new instance of RippleTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor">
            <summary>Creates a new instance of RippleTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode)">
            <summary>Creates a new instance of RippleTransform specifying maxRadius, intensity, periods, offset and mode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="intensity">Amount of intensity. (1 = no effect)</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The  RippleTransformMode to use.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of RippleTransform specifying maxRadius, intensity, periods, offset, mode and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="intensity">Amount of intensity. (1 = no effect)</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="mode">The  RippleTransformMode to use.</param>
            <param name="transformMode">The  InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of RippleTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Intensity">
            <summary>Gets or sets the amount of intensity.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Mode">
            <summary>Gets or sets the  RippleTransformMode to use.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Offset">
            <summary>Gets or set the offset position from the center of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.Periods">
            <summary>Gets or sets the number of periods in the distance wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RippleTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand">
            <summary>    This will rotate an image clockwise by the specified     number of degrees.</summary>
            <remarks>    This command will work with all pixel     formats except Pixel4bppIndexed. If a     Pixel4bppIndexed image is passed to this command, it will     attempt to convert the image to     Pixel8bppIndexed image before rotating     it.     Rotating images in 90 degree increments uses a very fast     rotate algorithm.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor">
            <summary>Creates a new instance of RotateCommand.</summary>
            <remarks>Creates a new instance of the RotateCommand object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor">
            <summary>Creates a new instance of RotateCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double)">
            <summary>Creates a new instance of  RotateCommand specifying the angle.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,System.Drawing.Color)">
            <summary>Creates a new instance of  RotateCommand specifying angle and backgroundColor.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="backgroundColor">The color of the background when angle is not a multiple of 90 degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of  RotateCommand specifying angle, and interpolation.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="interpolation">The interpolation used for rotation.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Double,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of  RotateCommand specifying angle, interpolation, and backgroundColor.</summary>
            <param name="angle">The angle of rotation in degrees.</param>
            <param name="interpolation">The interpolation used for rotation.</param>
            <param name="backgroundColor">The color of the background when angle is not a multiple of 90 degrees.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of RotateCommand from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Angle">
            <summary>Gets or sets the angle of rotation in degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.BackgroundColor">
            <summary>Gets or sets the color of the background when angle is not a multiple of 90 degrees.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.Interpolation">
            <summary>Gets or sets the  InterpolationMode of this command.</summary>
            <remarks>    1-bit images accept a value of None for fast rotation,     and BiLinear or BiCubic for good but slower rotation.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.RotateCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand">
            <summary>    Using this command you can shift the top, bottom, left or     right side of an image independently.</summary>
            <remarks>This command does not work with Pixel1bppIndexed or Pixel4bppIndexed pixel formats. If an image with one of these formats is passed into this command, it will attempt to convert it to Pixel8bppGrayscale or Pixel8bppIndexed respectively.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor">
            <summary>Creates a new instance of the SkewCommand object.Creates a new instance of SkewCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor">
            <summary>Creates a new instance of SkewCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SkewCommand from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32)">
            <summary>Creates a new instance of  SkewCommand specifying direction and offset.</summary>
            <param name="direction">Determines whether the skew is horizontal or vertical.</param>
            <param name="offset">The number of pixels to skew.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color)">
            <summary>Creates a new instance of  SkewCommand specifying direction, offset and backColor.</summary>
            <param name="direction">Determines whether the skew is horizontal or vertical.</param>
            <param name="offset">The number of pixels to skew.</param>
            <param name="backColor">A color to used in newly exposed areas.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.SkewDirection,System.Int32,System.Drawing.Color,System.Boolean)">
            <summary>Creates a new instance of  SkewCommand specifying direction, offset, backColor, and fastSkew.</summary>
            <param name="direction">Determines whether the skew is horizontal or vertical.</param>
            <param name="offset">The number of pixels to skew.</param>
            <param name="backColor">A color to used in newly exposed areas.</param>
            <param name="fastSkew">Provides a faster but less accurate skew.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.ConstructFinalImage(Atalasoft.Imaging.AtalaImage)">
            <summary>    Called by the default implementation of Apply,     ConstructFinalImage constructs the image that will be used as     the destination image for the command.</summary>
            <returns>A new image for the result of the command, or null if it is not possible or necessary to make a destination image.</returns>
            <remarks>    The default implementation returns a new image in the     same pixel format as the source image.     The returned image must be the same size as the image     passed in.     If it is not possible to allocate the image (for example,     the pixel format is not know at this point), it is acceptable     to return null. Returning null implies that the command will     return a non-null image in PerformActualCommand.     If an error occurs, this method should throw an     exception.</remarks>
            <param name="image">    The source image being processed. This may be different     from the source image passed into Apply.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.BackColor">
            <summary>Gets or sets a color to used in newly exposed areas.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Direction">
            <summary>Gets or sets a value to determine whether the skew is horizontal or vertical.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.FastSkew">
            <summary>Gets or sets a value indicating if speed is more important then quality.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.Offset">
            <summary>Gets or sets the number of pixels to skew.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SkewCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform">
            <summary>    This transform will rotate the image about the center     with a constant angular distance.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor">
            <summary>Creates a new instance of the SpinTransform object.Creates a new instance of SpinTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor">
            <summary>Creates a new instance of SpinTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color)">
            <summary>Creates a new instance of SpinTransform specifying maxRadius, maxAngleOffset, offset and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels. (degrees)</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Double,System.Double,System.Drawing.Point,System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of SpinTransform specifying maxRadius, maxAngleOffset, offset, backColor and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels. (degrees)</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the image.</param>
            <param name="transformMode">The  InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SpinTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.BackColor">
            <summary>Gets or sets the background color to use for newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxAngleOffset">
            <summary>Gets or sets the angular distance to spin pixels. (degrees)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this effect.</summary>
            <remarks>Pixels outside of this radius will not be affected.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.Offset">
            <summary>Gets or set the offset position from the center of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform">
            <summary>    A SpinWaveTransform rotates the image about the center     with a variable angular distance. The distance varies in a sine     wave pattern.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor">
            <summary>Creates a new instance of SpinWaveTransform.</summary>
            <remarks>Creates a new instance of the SpinWaveTransform object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor">
            <summary>Creates a new instance of SpinWaveTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point)">
            <summary>Creates a new instance of SpinWaveTransform specifying maxRadius, maxAngleOffset, periods and offset.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees).</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of SpinWaveTransform specifying maxRadius, maxAngleOffset, periods, offset and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees).</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The  InterpolationMode of this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Double,System.Double,System.Double,System.Drawing.Point,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of SpinWaveTransform specifying maxRadius, maxAngleOffset, periods, offset, transformMode and backColor.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="maxAngleOffset">Angular distance to spin pixels (degrees).</param>
            <param name="periods">Number of periods in the distance wave.</param>
            <param name="offset">The offset position from the center of the image.</param>
            <param name="transformMode">The  InterpolationMode of this transform.</param>
            <param name="backColor">The background color of newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of SpinWaveTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.AddToChain(System.Int32,System.Int32)">
            <param name="width">The width of the image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.AddToChain(System.Int32,System.Int32)">
            <param name="height">The height of the image to be processed.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.BackColor">
            <summary>Gets or sets the background color of newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxAngleOffset">
            <summary>Gets or sets the angular distance to spin pixels (degrees).</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Offset">
            <summary>Gets or set the offset position from the center of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.Periods">
            <summary>Gets or sets the number of periods in the distance wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.SpinWaveTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.Transform">
            <summary>A base class that is used for transforms.</summary>
            <remarks>A transform uses an algorithm to translate pixels from one position to another. Transforms can be chained together such that they can all be applied at once to the same image in one pass.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SelectCompatibleBackgroundColor(Atalasoft.Imaging.AtalaImage,System.Drawing.Color)">
            <summary>Returns a color value compatible with the image.</summary>
            <returns>A color compatible with the image provided.</returns>
            <remarks>This method will return a grayscale color if the image is grayscale or a CMYK color if the image format is CMYK.</remarks>
            <param name="image">The image to get a color for.</param>
            <param name="sourceColor">The requested color.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.Transform.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand">
            <summary>    This command allows you to combine multiple transforms     into a single command call.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor">
            <summary>Creates a new instance of the TransformChainCommand object.Create a new instance of the TransformChainCommand.</summary>
            <remarks>You must add a least one transform to the collection before using this command.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor">
            <summary>Creates a new instance of TransformChainCommand.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color)">
            <summary>Creates a new instance of TransformChainCommand specifying the background color of the resulting image.</summary>
            <remarks>Creates a new instance of TransformChainCommand specifying the backColor.</remarks>
            <param name="backColor">The background color to used for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of TransformChainCommand specifying the background color and transform mode.</summary>
            <remarks>Creates a new instance of the TransformChainCommand specifying backColor and transformMode.</remarks>
            <param name="backColor">The background color to used for newly uncovered areas of the image.</param>
            <param name="transformMode">The interpolation mode to use for this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Drawing.Color,Atalasoft.Imaging.ImageProcessing.InterpolationMode,Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <summary>Creates a new instance of TransformChainCommand specifying the background color, transform mode and a collection of transforms to apply.</summary>
            <remarks>Creates a new instance of the TransformChainCommand specifying backColor, transformMode and transforms.</remarks>
            <param name="backColor">The background color to used for newly uncovered areas of the image.</param>
            <param name="transformMode">The interpolation mode to use for this transform.</param>
            <param name="transforms">The transforms to add to this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of TransformChainCommand from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[])">
            <summary>Creates a new instance of TransformChainCommand specifying the transforms.</summary>
            <param name="transforms">The transforms to add to this command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Add(Atalasoft.Imaging.ImageProcessing.Transforms.Transform)">
            <summary>Adds a transform to the collection.</summary>
            <param name="transform">The transform to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Clear">
            <summary>Removes all of the transforms from the collection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo">
            <summary>Copies transfoms from the internal collection to an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(Atalasoft.Imaging.ImageProcessing.Transforms.Transform[],System.Int32)">
            <summary>Copies transforms from the internal collection to an array.</summary>
            <param name="array">An array to copy the transforms into.</param>
            <param name="arrayIndex">The index to start copying transforms into.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.CopyTo(System.Array,System.Int32)">
            <summary>Copies transforms from the internal collection to an array.</summary>
            <param name="array">An array to copy the transforms into.</param>
            <param name="arrayIndex">The index to start copying transforms into.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetEnumerator">
            <summary>This allows the use of foreach statements on the transforms collection.</summary>
            <returns>An IEnumerator for the transform collection.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SelectPreferredPixelFormat(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.PixelFormat,Atalasoft.Imaging.PixelFormat[])">
            <summary>    Chooses a pixel format that is preferred for this     command.</summary>
            <returns>A new pixel format to use for this command.</returns>
            <remarks>    The default implementation returns the sourceFormat     value.     In theory, a command should only ever return pixel format     that it has direct support for. Unfortunately, many older     commands advertised that they supported pixel formats that were     not native to the command. To maintain compatibility with older     versions of dotImage, this method allows a command to select a     new pixel format for itself, without being bound to the     ApplyToAnyPixelFormat property.</remarks>
            <param name="sourceImage">The original source image.</param>
            <param name="sourceFormat">The original image's pixel format.</param>
            <param name="formats">    An array of pixel formats supported by this     command.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.VerifyProperties(Atalasoft.Imaging.AtalaImage)">
            <summary>    Verify the integrity of properties in the command before     processing an image.</summary>
            <remarks>    This method does not check the integrity of the source     image itself. That is already done by the time VerifyProperties     is called.     Errors should be indicated by throwing an appropriate     exception.</remarks>
            <param name="image">The image to be processed.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.BackColor">
            <summary>Gets or sets the background color to use on newly uncovered areas of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.Count">
            <summary>Returns the number of transforms in the collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.IsSynchronized">
            <summary>Gets a value indicating whether access to the transforms collection is synchronized.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SupportedPixelFormats">
            <summary>Returns an array of PixelFormats supported by this command.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.SyncRoot">
            <summary>Gets an object that can be used to synchronize access to the transforms collection.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.TransformChainCommand.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform">
            <summary>    This allows you to write your own transform methods and     add them to the transform chain, just like the built-in     transforms. To do this, you must supply a      UserTransformCallback.</summary>
            <remarks>    This method will be called once for     each pixel in the output image. You need to set the     FromPixel parameter to the pixels (may be     fractional) that the input X and Y values will be pulled from.     Again, you tell the transform processor where to pull the     source pixel from.     Your callback method should be able     to handle any kind of input range; inputs may be outside the     image rectangle, if you are chaining transforms. Likewise, your     function can output values that are outside the image     rectangle. If your function is the last in the chain, values     outside the image rect will be set to the background     color.     This method requires a continuous tone image. If the     source image is not continuous, it will attempt to convert the     image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor">
            <summary>Creates a new instance of the UserTransform object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor">
            <summary>Creates a new instance of UserTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback)">
            <summary>Creates a new instance of the UserTransform class specifying the use transform callback.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the output image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of the UserTransform class specifying the use transform callback and interpolation mode.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the output image.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.#ctor(Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback,Atalasoft.Imaging.ImageProcessing.InterpolationMode,System.Drawing.Color)">
            <summary>Creates a new instance of the UserTransform class specifying the use transform callback, interpolation mode, and background color.</summary>
            <param name="callback">Delegate which will be called for each pixel processed in the output image.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
            <param name="backColor">The background color to use for newly uncovered areas of the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.BackColor">
            <summary>Gets or sets the background color used when a transform uncovers part of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.Callback">
            <summary>Gets or sets the  UserTransformCallback delegate which will be called for each pixel processed in the output image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData">
            <summary>This class is used in the UserTransformCallback to indicate the pixel locations of the transform.</summary>
            <remarks>See UserTransform.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.#ctor">
            <summary>Initializes a new instance of UserTransformData. Initializes a new instance of UserTransformData.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.#ctor">
            <summary>Creates a new instance of UserTransformData.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.#ctor(System.Drawing.PointF,System.Drawing.PointF)">
            <summary>Initializes a new instance of UserTransformData specifying the to and from points.</summary>
            <param name="currentPixel">The current pixel to transform.</param>
            <param name="fromPixel">The value which the pixel which should move to the current pixel.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.CurrentPixel">
            <summary>Gets the current pixel to transform.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformData.FromPixel">
            <summary>Gets or sets the value which the pixel which should move to the current pixel.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform">
            <summary>    This transform moves across the image with a sine wave     pattern.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor">
            <summary>Creates a new instance of WaveTransform.</summary>
            <remarks>Creates a new instance of the WaveTransform object.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor">
            <summary>Creates a new instance of WaveTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode)">
            <summary>Creates a new instance of  WaveTransform specifying maxOffsetPercent, periods and mode.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="mode">The style of wave transform to create.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Double,System.Double,Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransformMode,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of  WaveTransform specifying maxOffsetPercent, periods, mode and transformMode.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="mode">The style of wave transform to create.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of WaveTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.MaxOffsetPercent">
            <summary>Gets or sets the maximum offset percent for the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Mode">
            <summary>Gets or sets the style of wave transform to create.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.Periods">
            <summary>Gets or sets the number of periods in the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WaveTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform">
            <summary>    This transform creates an effect which is a bit like     looking at the image though a clear sphere. If you set      BigWow to true, the result looks as if you're inside the     sphere.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor">
            <summary>Creates a new instance of the WowTransform object.Creates a new instance of WowTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor">
            <summary>Creates a new instance of WowTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Double,System.Boolean)">
            <summary>Creates a new instance of  WowTransform specifying maxRadius, and bigWow.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="bigWow">Makes it appear as if you are inside a clear sphere.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Double,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of  WowTransform specifying maxRadius, bigWow and transformMode.</summary>
            <param name="maxRadius">Maximum distance from the center for this effect.</param>
            <param name="bigWow">Makes it appear as if you are inside a clear sphere.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of WowTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.BigWow">
            <summary>Gets or sets a valid indicating if you the effect to appear inside the sphere.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.MaxRadius">
            <summary>Gets or sets the maximum distance from the center for this effect.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.WowTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform">
            <summary>    This transform moves across the images in a triangle wave     pattern.</summary>
            <remarks>This method requires a continuous tone image. If the source image is not continuous, it will attempt to convert the image into one.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor">
            <summary>Creates a new instance of the ZigZagTransform.Creates a new instance of ZigZagTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor">
            <summary>Creates a new instance of ZigZagTransform.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Double,System.Int32,System.Boolean)">
            <summary>Creates a new instance of  ZigZagTransform specifying maxOffsetPercent, periods, and topToBottom.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="topToBottom">The wave moves from top to bottom instead of left to right.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Double,System.Int32,System.Boolean,Atalasoft.Imaging.ImageProcessing.InterpolationMode)">
            <summary>Creates a new instance of  ZigZagTransform specifying maxOffsetPercent, periods, topToBottom and transformMode.</summary>
            <param name="maxOffsetPercent">Maximum offset percent for the wave.</param>
            <param name="periods">Number of periods in the wave.</param>
            <param name="topToBottom">The wave moves from top to bottom instead of left to right.</param>
            <param name="transformMode">Specifies the interpolation used with this transform.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Creates a new instance of ZigZagTransform from serialization information</summary>
            <param name="info">A SerializationInfo object containing information for this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.AddToChain(System.Int32,System.Int32)">
            <summary>Adds this transform to the transforms chain.</summary>
            <param name="width">The width of the image to process.</param>
            <param name="height">The height of the image to process.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Fills a SerializationInfo object with information about this command.</summary>
            <param name="info">A SerializationInfo object that will be filled with information about this command.</param>
            <param name="context">A StreamingContext for this information.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.PerformActualCommand(Atalasoft.Imaging.AtalaImage,Atalasoft.Imaging.AtalaImage,System.Drawing.Rectangle,Atalasoft.Imaging.ImageProcessing.ImageResults@)">
            <summary>    PerformActualCommand does the actual work of the image     processing command.</summary>
            <returns>In most cases, PerformActualCommand should return null. When PerformActualCommand returns a non-null image, it is indicating that it has allocated a new image to use for the final image. This must be true if ConstructFinalImage returned null.</returns>
            <param name="source">    The source image for processing. This may be different     from the original image.</param>
            <param name="dest">    The destination image. Dest will be null when     InPlaceProcessing is true or when ConstructFinalImage returns     null.</param>
            <param name="imageArea">    An area of the source image to process. When the     destination image is non-null, it will always be the same size     as imageArea. ImageArea only differs in size from the source     image when the command is a subclass of ImageRegionCommand and     when there is a region of interest.</param>
            <param name="results">    The results object that will be used for this     command.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.MaxOffsetPercent">
            <summary>Gets or sets the maximum offset percent for the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.Periods">
            <summary>Gets or sets the number of periods in the wave.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TopToBottom">
            <summary>Gets or sets a value indicating if the wave moves from top to bottom instead of left to right.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageProcessing.Transforms.ZigZagTransform.TransformMode">
            <summary>Gets or sets the  InterpolationMode of this transform.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageProcessing.Transforms.UserTransformCallback">
            <summary>Callback method for the UserTransform object.</summary>
            <param name="callbackData">Contains the information used in the transform.</param>
        </member>
        <member name="N:Atalasoft.Imaging.ImageSources">
            <summary>Contains classes that get images from a Database</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.IDbImageAccessor">
            <summary>An interface containing methods necessary for getting to the underlying data store</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.ExtractImageStream(System.Int32)">
            <summary>Returns a stream containing the image at the desired index. You are guaranteed that imageStreamIndex is within the range: 0 &lt; imageStreamIndex &lt;= GetImageStreamCount()</summary>
            <returns>    A       Stream  containing the image, or throw. Do not return null.</returns>
            <param name="imageStreamIndex">The row index of the desired image. The index represents the image stream which could contain multiple frames.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.GetFrameCountInImage(System.Int32,Atalasoft.Imaging.ImageSources.DbImageSource+FrameCounter)">
            <summary>Returns the number of frames in the image stream at index</summary>
            <returns/>
            <param name="imageStreamIndex">The index of the stream.</param>
            <param name="frameCounterFn">A delegate that can count the number of frames in a stream, which you can use if you haven't stored the framecount elsewhere. To speed performance, it might be better to store the frame count in the data store and not use this delegate.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.GetImageStreamCount">
            <summary>Get the number of streams to source in the image source. Each image stream can have multiple frames</summary>
            <returns>The number of streams to source.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IDbImageAccessor.Reset">
            <summary>Reset all caches of information if you are storing anything that is a cached from the database, release it.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.IImageStreamSource">
            <summary>Implement this interface in any ImageSource implementations if you can provide a stream with the image instead of the image itself. This is useful if the caller needs information about the image (e.g. height and width) or wants to make a thumbnail or a tile from it and doesn't need all of the image data to do it.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.IImageStreamSource.GetImageStream(System.Int32)">
            <summary>Returns an object that contains information about the stream that contains the requested image. When you call this, the ImageStream member of the returned object will be open and the caller is responsible for closing it.</summary>
            <returns>An object that contains the stream and information for finding the requested image within it.</returns>
            <param name="index">The index of the image within the ImageSource.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource">
            <summary>A DbImageSource is a sub-class of ImageSource that allows you read-only access to images stored in a database.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor">
            <summary>Constructors for DbImageSource</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(Atalasoft.Imaging.ImageSources.IDbImageAccessor)">
            <summary>Creates a DbImageSource from a IDbImageAccessor implementor.</summary>
            <param name="dbAccessor">An object that implements IDbImageAccessor and will access the underlying data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(Atalasoft.Imaging.ImageSources.IDbImageAccessor,System.Boolean)">
            <summary>Creates a DbImageSource from a IDbImageAccessor implementor.</summary>
            <param name="dbAccessor">An object that implements IDbImageAccessor and will access the underlying data.</param>
            <param name="doAllFrames">True means that the source should source all frames of the image. If all of the images are known to be single framed, passing false will increase performance of this class.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Deserialize this object from the info and context.</summary>
            <param name="info">The serialization info to use for this object.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.CalculateNumPagesPerImage">
            <summary>Calculates and caches the number of frames per image and the image count.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetFrameCountInImage(System.Int32)">
            <summary>    Returns the number of frames in the image that will be served     by this image source. If       DoAllFrames  is false, this function always returns 1.</summary>
            <returns>The number of frames in the image</returns>
            <param name="index">The index of the image</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetImageNumAndFrame(System.Int32,System.Int32@,System.Int32@)">
            <summary>Caclulates the image number and frame number given an image source index.</summary>
            <param name="index">The index of the image in the image source.</param>
            <param name="imageNum">The image index in the source that contains this image.</param>
            <param name="frame">The frame number within the image that contains the image data for the given image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetImageStream(System.Int32)">
            <summary>Gets the stream and the frame within that stream that corresponds to the passed in index. The caller is responsible for closing the returned stream.</summary>
            <param name="index">The index of the requested image</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Get the data to serialize for this object.</summary>
            <param name="info">The information for this object to serialize</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelAcquire(System.Int32)">
            <summary>Acquires the image at the given image source index.</summary>
            <returns>The image at the index wrapped with a reloader, or null if there is no image at that index.</returns>
            <param name="index">The index within the image source</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelAcquireNextImage">
            <summary>Acquire the next image in the source.</summary>
            <returns>The next image in the source wrapped with a reloader.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelDispose">
            <summary>Disposes any non-GC objects used by this class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelFlushOnReset">
            <summary>Returns true to indicate that a Reset() should flush all images</summary>
            <returns>true always</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelHasMoreImages">
            <summary>Returns true if AcquireNext would return an image</summary>
            <returns>true if AcquireNext would return an image</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelReplaceImage(Atalasoft.Imaging.ImageSourceNode,Atalasoft.Imaging.AtalaImage)">
            <summary>Not implemented for this image source. Will throw NotImplementedException.</summary>
            <param name="node">ignored</param>
            <param name="newImage">ignored</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelReset">
            <summary>Empties any cached data about the images</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelSkipNextImage">
            <summary>Increments the internal index so that AcquireNext would skip an image</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.DbImageSource.LowLevelTotalImages">
            <summary>The total number of images in the image source</summary>
            <returns>The total number of images in the image source</returns>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.DbImageSource.DbAccessor">
            <summary>The accessor used to get to the database. This class supports changing the accessor, but if you change anything about the connected accessor, you are responsible for calling Reset() on the image source.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.DbImageSource.DoAllFrames">
            <summary>Whether to include all of the frames as individual images in the source.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo">
            <summary>Objects of this type are returned by IImageStreamSource.GetImageStream(int index). They contain a stream that has the requested image and the frame within that stream that maps to the image index that was requested.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.#ctor(System.IO.Stream,System.Int32)">
            <summary>Creates the object from a stream and frame. The stream contains the requested image and the frame maps the requested index to the frame within this stream.</summary>
            <param name="imageStream">The stream that contains the requested image</param>
            <param name="frame">The frame within this stream that maps to the image index that was requested from the ImageSource</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.Frame">
            <summary>The frame within the ImageStream that maps to the image index originally requested</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.ImageSourceStreamInfo.ImageStream">
            <summary>The stream that contains the requested image</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.MergedImageSource">
            <summary>MergedImageSource is a variety of RandomAccessImageSource that can combine any number of other RandomAccessImageSource objects.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.MergedImageSource.#ctor(Atalasoft.Imaging.RandomAccessImageSource[])">
            <summary>Constructs a new MergedImageSource object from zero or more supplied RandomAccessImageSource objects</summary>
            <remarks>Each RandomAccessImageSource provided must be unique. Passing in the same RandomAccessImageSource twice is an error.</remarks>
            <param name="imageSources">A collection of RandomAccessImageSources to be combined.</param>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource+Decryptor">
            <summary>A delegate to decrypt data back into a string (for use with connection string serialization)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource+Encryptor">
            <summary>A delegate to encrypt a string (for use with connection string serialization)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.DbImageSource+FrameCounter">
            <summary>A delegate to help count frames in a Stream</summary>
        </member>
        <member name="N:Atalasoft.Imaging.ImageSources.Data">
            <summary>Contains classes that help DbImageSource get images from a Database</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor">
            <summary>A class that can get images by using IDbCommands. You can either sub-class this class and implement the abstract methods to provide the various commands, or DbSqlImageAccessor, which builds up commands from SQL, or DbStoredProcImageAccessor, which builds up commands from Stored Procedures.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.AddExtraParameters(System.Data.IDbCommand)">
            <summary>Adds any extra parameters supplied by the user that are needed to run the command.</summary>
            <param name="cmd">A command that will be used to call a stored procedure.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
            <summary>A command that returns the frame count for an image. If this method returns null, the frame count will be determined by decoding the image stream. If not null, this command should result in a single row dataset with the frame count in the first column. If the frame count is stored separately from the image stream, implementing this method can greatly increase performance (especially first access). This command should not be associated with any connection.</summary>
            <returns>A command that returns the frame count for an image.</returns>
            <param name="conn">A connection to the database.</param>
            <param name="imageStreamIndex">The index of the image stream in the source.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
            <summary>A method that can return a command that gets a single row dataset with the image stream information at the given index. The field can either be a varbinary, binary or image type (in which case the image stream is the value of the field) or it can be a string which will be interpreted as a filename that contains the image. The command should not be associated with a connection.</summary>
            <returns>A command that will a single row with the image stream information.</returns>
            <param name="conn">A connection to the database.</param>
            <param name="imageStreamIndex">The index of the image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
            <summary>A command that can get the number of image streams in the source (each of which can contain multiple frames). This command should just return the number of streams (not the total frame count). The command should result in a single row dataset with the count in the first column. The command should not be associated with a connection.</summary>
            <returns>A command that can get the number of image streams in the source.</returns>
            <param name="conn">A connection to the database.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.CreateStreamFromDatabaseObject(System.Object)">
            <summary>Creates a stream from the object obtained from the database. If the object is a byte array, it is attached to a MemoryStream. If the object is a string, it is interpreted as a filename and an open FileStream to the file is returned. If the object is null or not able to be interpreted as a stream, this method will throw.</summary>
            <returns>An open stream that contains an image.</returns>
            <param name="o">An object that represents an image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.DecryptIfRequested(System.Byte[])">
            <summary>Decrypt a string if EncryptSerializedState is true.</summary>
            <returns>The decryted string.</returns>
            <param name="data">The encrypted string.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EncryptIfRequested(System.String)">
            <summary>Encrypt a string if EncryptSerializedState is true.</summary>
            <returns>The encrypted string.</returns>
            <param name="s">The string to encrypt</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ExtractImageStream(System.Int32)">
            <summary>    Extracts a stream from a row of the database. The field can     either be a blob, image or string. If it is a string, it is     interpreted as a filename and the filestream is opened. In     order to get a connection to the database, the getConnection     callback will be called -- the connection returned doesn't have     to be opened (it will be opened when necessary), but this     function will definitely close it before it returns. This     method will use the property       ImageFieldName  to determine the column name of the image stream information. If that method returns null, it will assume that the information is in the first column.</summary>
            <returns>A stream representing the contents of the image</returns>
            <remarks>This function is implemented for DbImageSource to use.</remarks>
            <param name="imageStreamIndex">The index of the stream in the source</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject">
            <summary>    Gets the database object from the first row of the data set     returned by the command at the field named       field  .</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,System.String)">
            <summary>    Gets the database object from the first row of the data set     returned by the command at the field named       field  .</summary>
            <returns>The value of the given field in the first row of the dataset returned by the command.</returns>
            <param name="cmd">The command to use to get the data set.</param>
            <param name="field">The name of the field to return.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,System.Int32)">
            <summary>    Gets the database object from the first row of the data set     returned by the command from the field at       index  .</summary>
            <returns>    The value of the field at       index  in the first row of the dataset returned by the command.</returns>
            <param name="cmd">The command to use to get the data set.</param>
            <param name="index">The index of the field to return.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDatabaseObject(System.Data.IDbCommand,Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor+FieldGetter,System.Object)">
            <summary>    Gets the database object from the first row of the data set     returned by the command from the field at       index  which can be either a field name or an integer index.</summary>
            <returns>The value of the field refered to by index.</returns>
            <param name="cmd">The command to use to get the data set.</param>
            <param name="fieldGetter">    A delegate that can get the field using the       index  .</param>
            <param name="index">An object that can be used to determine which field to get (by passing it to fieldGetter).</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetDecryptedValue(System.String,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Gets the value from the serialized data and decrypts it if requested.</summary>
            <returns>The decrypted data.</returns>
            <param name="key">The key of the data value.</param>
            <param name="info">The serialized data.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFieldByInt(System.Data.IDataReader,System.Object)">
            <summary>Gets a field from the datareader by passing in the index of a field.</summary>
            <returns>    The value of the field at index       intIndex  .</returns>
            <param name="dr">A datareader set to a row.</param>
            <param name="intIndex">The index of the column in the row to return.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFieldByString(System.Data.IDataReader,System.Object)">
            <summary>Gets a field from the datareader by passing in the name of the field.</summary>
            <returns>    The value of the field named       fieldName  </returns>
            <param name="dr">A datareader set to a row.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetFrameCountInImage(System.Int32,Atalasoft.Imaging.ImageSources.DbImageSource+FrameCounter)">
            <summary>The number of frames in the stream indicated by the imageStreamIndex</summary>
            <returns>The number of frames in the stream indicated by the imageStreamIndex</returns>
            <remarks>This function is implemented for DbImageSource to use.</remarks>
            <param name="imageStreamIndex">The index of the stream in the source. This is guaranteed to be in the range of: 0 &lt; imageStreamIndex &lt;= GetImageStreamCount()</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetImageStreamCount">
            <summary>Gets the number of image streams in this database. Each stream can contain more than one frame.</summary>
            <returns>The number of image stream in this database.</returns>
            <remarks>This function is implemented for DbImageSource to use.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Get the data to serialize for this object</summary>
            <param name="info">The information for this object to serialize</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Open(System.Data.IDbConnection)">
            <summary>Opens a non-open connection</summary>
            <returns>An open connection</returns>
            <param name="conn">A connection</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Reset">
            <summary>Reset all caches of information. If you are storing anything that is a cached from the database, release it.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.StoreEncryptedValue(System.String,System.String,System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Stores the value into the serialization info and encrypts it if requested.</summary>
            <param name="key">The key of the data value.</param>
            <param name="theValue">The value to store.</param>
            <param name="info">The object that contains the serialized data.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Decryptor">
            <summary>A delegate that can decrypt a string.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.Encryptor">
            <summary>A delegate that can encrypt a string.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.EncryptSerializedState">
            <summary>Whether or not the serialized state is encrypted. Please see documentation of sub-classes to see which members are encrypted.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ExtraParameters">
            <summary>A copy of the extra parameters dictionary. This class does not support changing the parameters after the object has been constructed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.GetConnection">
            <summary>A delegate that can return a connection to the database.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbCommandImageAccessor.ImageFieldName">
            <summary>    The name of the image field in the dataset returned by       CreateGetImageRowCommand  . If this method returns null, it is assumed to be in the first column.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor">
            <summary>This class can access images for DbImageSource from clauses of SQL statements that are provided.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor">
            <summary>Constructors for DbSqlImageAccessor</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String)">
            <summary>Creates an object that can be used with DbImageSouce to access images stored in a database. The image streams are access by combining clauses of SQL Statements provided.</summary>
            <param name="getConnection">A delegate that can return connections to the database. This accessor must be able to be serialized, so make the delegate to a static method. If this accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized. This class creates SQL statements that use CTE from SQL Server, so the connection needs to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted. Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">    The name of the image field in the data source (given by the       fromClause  ). Can be an expression, but then an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">    A comma separated list of the primary keys of the data source     (given by the       fromClause  ).</param>
            <param name="fromClause">The source of the data rows. This would normally be a table name, but it can be anything that can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String)">
            <summary>Creates an object that can be used with DbImageSouce to access images stored in a database. The image streams are access by combining clauses of SQL Statements provided.</summary>
            <param name="getConnection">A delegate that can return connections to the database. This accessor must be able to be serialized, so make the delegate to a static method. If this accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized. This class creates SQL statements that use CTE from SQL Server, so the connection needs to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted. Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">    The name of the image field in the data source (given by the       fromClause  ). Can be an expression, but then an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">    A comma separated list of the primary keys of the data source     (given by the       fromClause  ).</param>
            <param name="fromClause">The source of the data rows. This would normally be a table name, but it can be anything that can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement. It can be null, which means that you want all rows to be returned. It should not contain "where" at the beginning.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates an object that can be used with DbImageSouce to access images stored in a database. The image streams are access by combining clauses of SQL Statements provided.</summary>
            <param name="getConnection">A delegate that can return connections to the database. This accessor must be able to be serialized, so make the delegate to a static method. If this accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized. This class creates SQL statements that use CTE from SQL Server, so the connection needs to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted. Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">    The name of the image field in the data source (given by the       fromClause  ). Can be an expression, but then an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">    A comma separated list of the primary keys of the data source     (given by the       fromClause  ).</param>
            <param name="fromClause">The source of the data rows. This would normally be a table name, but it can be anything that can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement. It can be null, which means that you want all rows to be returned. It should not contain "where" at the beginning.</param>
            <param name="orderByClause">A clause that can be used in an order by clause. If it is null, the data set is ordered by the primary keys. The dataset must have a defined order. It should not contain "order by" at the beginning.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>Creates an object that can be used with DbImageSouce to access images stored in a database. The image streams are access by combining clauses of SQL Statements provided.</summary>
            <param name="getConnection">A delegate that can return connections to the database. This accessor must be able to be serialized, so make the delegate to a static method. If this accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized. This class creates SQL statements that use CTE from SQL Server, so the connection needs to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted. Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">    The name of the image field in the data source (given by the       fromClause  ). Can be an expression, but then an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">    A comma separated list of the primary keys of the data source     (given by the       fromClause  ).</param>
            <param name="fromClause">The source of the data rows. This would normally be a table name, but it can be anything that can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement. It can be null, which means that you want all rows to be returned. It should not contain "where" at the beginning.</param>
            <param name="orderByClause">A clause that can be used in an order by clause. If it is null, the data set is ordered by the primary keys. The dataset must have a defined order. It should not contain "order by" at the beginning.</param>
            <param name="frameCountField">    The name of the frameCount field in the data source (given by     the       fromClause  . If it is null, the frame count will be determined by decoding the image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>Creates an object that can be used with DbImageSouce to access images stored in a database. The image streams are access by combining clauses of SQL Statements provided.</summary>
            <param name="getConnection">A delegate that can return connections to the database. This accessor must be able to be serialized, so make the delegate to a static method. If this accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized. This class creates SQL statements that use CTE from SQL Server, so the connection needs to be to a database that supports them.</param>
            <param name="encryptSerializedState">True if the serialized state of the object will be encrypted. Please see documentation of sub-classes to see which members are encrypted.</param>
            <param name="imageField">    The name of the image field in the data source (given by the       fromClause  ). Can be an expression, but then an "as" with a field name must appear at the end of it.</param>
            <param name="primaryKeyFields">    A comma separated list of the primary keys of the data source     (given by the       fromClause  ).</param>
            <param name="fromClause">The source of the data rows. This would normally be a table name, but it can be anything that can appear in the from clause of a SQL Select statement. It should not contain "from" at the beginning.</param>
            <param name="whereClause">A clause that can be used in a where clause of a SQL Select statement. It can be null, which means that you want all rows to be returned. It should not contain "where" at the beginning.</param>
            <param name="orderByClause">A clause that can be used in an order by clause. If it is null, the data set is ordered by the primary keys. The dataset must have a defined order. It should not contain "order by" at the beginning.</param>
            <param name="frameCountField">    The name of the frameCount field in the data source (given by     the       fromClause  . If it is null, the frame count will be determined by decoding the image stream.</param>
            <param name="extraParameters">    The parameters that are passed to all of your stored     procedures. For SqlCommands, the keys should be strings which     are the names of the parameters and start with an @. For     OleDbCommands, you must use a IDictionary with sorted keys     (e.g. SortedList) and use index numbers (starting at 0) as     keys. The parameters are added in the sort order of the keys.     The values can be any object that can be automatically     converted by the IDbDataParameter for your connection. The       extraParameters  are not encrypted when this object is serialized. A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>From ISerializable. All properties are encrypted if encryptSerializedState was set to true in the constructor. They are encrypted using the encryptor</summary>
            <param name="info">The information to deserialize.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetFieldCommand(System.Data.IDbConnection,System.Int32,System.String)">
            <summary>    Creates a command that can get the given field from the row     indexed by       imageStreamIndex  from the datasource.</summary>
            <returns>    A command that get the given field from row at index       imageStreamIndex  from the datasource.</returns>
            <param name="conn">A connection to the database</param>
            <param name="imageStreamIndex">The index of the image stream in the datasource.</param>
            <param name="field">The name of the column in the data source that the command should try to get.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
            <summary>A command that returns the frame count for an image. If this method returns null, the frame count will be determined by decoding the image stream. If not null, this command should result in a single row dataset with the frame count in the first column. If the frame count is stored separately from the image stream, implementing this method can greatly increase performance (especially first access). This command should not be associated with any connection.</summary>
            <returns>A command that returns the frame count for an image.</returns>
            <param name="conn">A connection to the database.</param>
            <param name="imageStreamIndex">The index of the image stream in the source.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
            <summary>A method that can return a command that gets a single row dataset with the image stream information at the given index. The field can either be a varbinary, binary or image type (in which case the image stream is the value of the field) or it can be a string which will be interpreted as a filename that contains the image. The command should not be associated with a connection.</summary>
            <returns>A command that will a single row with the image stream information.</returns>
            <param name="conn">A connection to the database.</param>
            <param name="imageStreamIndex">The index of the image stream.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
            <summary>A command that can get the number of image streams in the source (each of which can contain multiple frames). This command should just return the number of streams (not the total frame count). The command should result in a single row dataset with the count in the first column. The command should not be associated with a connection.</summary>
            <returns>A command that can get the number of image streams in the source.</returns>
            <param name="conn">A connection to the database.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateGetImageStreamCountQuery">
            <summary>Creates a SQL statement that can count the number of image streams. The count should be in the first column of the first row of the returned rows.</summary>
            <returns>A SQL statement that counts the number of image streams.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.CreateSelectFieldByRowQuery(System.String,System.String)">
            <summary>Creates a SQL Query using Common Table Expressions that can get a specific row by index from a data source.</summary>
            <returns>    A SQL statement that will take a parameter named       imageStreamIndexParamName  and will contain a field named       field  .</returns>
            <param name="imageStreamIndexParamName">The name of the parameter to use to contain the requested index (so that it can be provided later by a Parameter)</param>
            <param name="field">The field that is being requested from the datasouce (must appear in the result of the query)</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.GetFieldNameFromExpression(System.String)">
            <summary>Takes SQL field clause and returns the name of the column.</summary>
            <returns/>
            <param name="expr">The SQL field clause</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Get the data to serialize for this object</summary>
            <param name="info">The information for this object to serialize</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FrameCountField">
            <summary>The name of the frame count field in the data source</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.FromClause">
            <summary>The table that contains the images (or any valid from clause)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.ImageField">
            <summary>The name of the image field in the data source</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.ImageFieldName">
            <summary>Returns the name of the field that contains the image stream information. If the field is an expression it must contain an as clause that names the field.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.NonBlankOrderByClause">
            <summary>Returns either the given order by clause or the primary keys if that is blank</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.NonBlankWhereClause">
            <summary>Returns either the given where clause or a clause that is always true, if that is blank</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.OrderByClause">
            <summary>A valid SQL order by clause or null if the dataset should be ordered by the primary keys</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.PrimaryKeyFields">
            <summary>The commas separated list of fields that make up the primary key of the data source</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbSqlImageAccessor.WhereClause">
            <summary>A valid SQL where clause or null if all rows are to be used.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor">
            <summary>This class can be used with IDbImageSource to get images from a database through Stored Procedures. The Stored Procedures to call can be specified in the constructor and the only requirement is that they meet certain specifications as described in the constructor parameter documentation.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor">
            <summary>Constructors for DbStoredProcImageAccessor</summary>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.Collections.IDictionary)">
            <summary>Construct an accessor that can access images in a database via stored procedures</summary>
            <remarks>    Here are some sample stored procedures that would work to get     images from an table called images, where the data was stored     in an field called imageData. Here is a stored procedure that     would meet the specification for the getImageByIndexProc.     @startId and @endId are extra parameters that would need to be     passed in to the constructor.       create PROCEDURE GetImageByIndex         @index int, @startId int, @endId int as         set nocount on;         with istr as (                 select id, imagedata, row_number() over (order by id) as rn                  from images where id between @startid and @endid         ) select imageData from istr where rn=(@index+1)  Here is a stored procedure that would meet the specification for the getImageStreamCountProc. @startId and @endId are extra parameters that would need to be passed in to the constructor.       create PROCEDURE GetImageStreamCount         @startid int, @endid int as         set nocount on;         select count(*) from images where id between @startid and @endid  Note: the extra parameters must be the same for all stored procedures.</remarks>
            <param name="getConnection">A delegate that can return connections to the database. This accessor must be able to be serialized, so make the delegate to a static method. If this accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.</param>
            <param name="encryptSerializedState">    Set to true if you want the serialized state of this accessor     to be encrypted. You must set the Encryptor and Decryptor     properties to handle the decryption and encryption. The       extraParameters  are not encrypted when serialized.</param>
            <param name="getImageByIndexProc">    The name of a stored procedure that can get an image by index.     It should take an int parameter called "@index" and any other     parameters you need, and return the image stream at that index.     index is not a primary key into your table, but instead is a     number in range of 0 to count-1, where count is gotten by     calling the stored procedure named in the       getImageStreamCountProc  argument. If you take any extra parameters (aside from the index), you should specify their values by using the       extraParameters  argument. The stored procedure should result in a single row dataset where the first column is the image. It can either be an encoded image in a varbinary or image field or a string. If it is a string it is interpreted as a filename, which will be opened to get to the images.</param>
            <param name="getImageStreamCountProc">    The name of a stored procedure that can get the number of image     streams. There are no required parameters. The stored procedure     should result in single row dataset with the count in the first     column. If you need any extra parameters, you should specify     their values by using the       extraParameters  argument.</param>
            <param name="extraParameters">    The parameters that are passed to all of your stored     procedures. For SqlCommands, the keys should be strings which     are the names of the parameters and start with an @. For     OleDbCommands, you must use a IDictionary with sorted keys     (e.g. SortedList) and use index numbers (starting at 0) as     keys. The parameters are added in the sort order of the keys.     The values can be any object that can be automatically     converted by the IDbDataParameter for your connection. The       extraParameters  are not encrypted when this object is serialized. A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback,System.Boolean,System.String,System.String,System.String,System.Collections.IDictionary)">
            <summary>Construct an accessor that can access images in a database via stored procedures</summary>
            <remarks>    Here are some sample stored procedures that would work to get     images from an table called images, where the data was stored     in an field called       imageData  and the frame count was stored in field called       frameCount  . Here is a stored procedure that would meet the specification for the       getImageByIndexProc  .       @startId  and       @endId  are extra parameters that would need to be passed in to the constructor.       create PROCEDURE GetImageByIndex         @index int, @startId int, @endId int as         set nocount on;         with istr as (                 select id, imagedata, row_number() over (order by id) as rn                  from images where id between @startid and @endid         ) select imageData from istr where rn=(@index+1)  Here is a stored procedure that would meet the specification for the       getImageStreamCountProc  .       @startId  and       @endId  are extra parameters that would need to be passed in to the constructor.       create PROCEDURE GetImageStreamCount         @startid int, @endid int as         set nocount on;         select count(*) from images where id between @startid and @endid  Here is a stored procedure that would meet the specification for the getImageByIndexProc. @startId and @endId are extra parameters that would need to be passed in to the constructor.       create PROCEDURE GetFrameCountByIndex         @index int, @startId int, @endId int as         set nocount on;         with istr as (                 select id, frameCount, row_number() over (order by id) as rn                  from images where id between @startid and @endid         ) select frameCount from istr where rn=(@index+1)  Note: the extra parameters must be the same for all stored procedures.</remarks>
            <param name="getConnection">A delegate that can return connections to the database. This accessor must be able to be serialized, so make the delegate to a static method. If this accessor is used in an imagesoruce that is used in ASP.NET controls, then it will be serialized.</param>
            <param name="encryptSerializedState">    Set to true if you want the serialized state of this accessor     to be encrypted. You must set the Encryptor and Decryptor     properties to handle the decryption and encryption. The       extraParameters  are not encrypted when serialized.</param>
            <param name="getImageByIndexProc">    The name of a stored procedure that can get an image by index.     It should take an int parameter called "@index" and any other     parameters you need, and return the image stream at that index.     @index is not a primary key into your table, but instead is a     number in range of 0 to count-1, where count is gotten by     calling the stored procedure named in the       getImageStreamCountProc  argument. If you take any extra parameters (aside from the index), you should specify their values by using the       extraParameters  argument. The stored procedure should result in a single row dataset where the first column is the image. It can either be an encoded image in a varbinary or image field or a string. If it is a string it is interpreted as a filename, which will be opened to get to the images.</param>
            <param name="getImageStreamCountProc">    The name of a stored procedure that can get the number of image     streams. There are no required parameters. The stored procedure     should result in single row dataset with the count in the first     column. If you need any extra parameters, you should specify     their values by using the       extraParameters  argument.</param>
            <param name="getFrameCountByIndexProc">    The name of a stored procedure that can get the frame count of     an image stream by index. It should take an int parameter     called "@index" and any other parameters you need, and return     the frame count at that index. @index is not a primary key into     your table, but instead is a number in range of 0 to count-1,     where count is gotten by calling the stored procedure named in     the       getImageStreamCountProc  argument. If you take any extra parameters (aside from the index), you should specify their values by using the       extraParameters  argument. The stored procedure should result in a single row dataset where the first column is the frame count. If you cannot provide this argument, you can pass null, and the frame count will be determined by decoding the image stream gotten with the       getImageByIndexProc  . Providing this argument can substantially speed up viewing of multi-framed images because viewers can know which images are visible without accessing the stream. A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
            <param name="extraParameters">    The parameters that are passed to all of your stored     procedures. For SqlCommands, the keys should be strings which     are the names of the parameters and start with an @. For     OleDbCommands, you must use a IDictionary with sorted keys     (e.g. SortedList) and use index numbers (starting at 0) as     keys. The parameters are added in the sort order of the keys.     The values can be any object that can be automatically     converted by the IDbDataParameter for your connection. The       extraParameters  are not encrypted when this object is serialized. A copy of the the dictionary will be made upon construction, so that changes to it will not affect this object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>From ISerializable. All properties are encrypted if encryptSerializedState was set to true in the constructor. They are encrypted using the encryptor</summary>
            <param name="info">The serialization info which contains the serialized data.</param>
            <param name="context">The serialization context.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetFrameCountCommand(System.Data.IDbConnection,System.Int32)">
            <summary>Creates a command that can get the frame count of an image stream.</summary>
            <returns>A command that will return a single row with the frame count of an image stream in the first column. If it returns null, the frame count will be determined by decoding the image.</returns>
            <param name="conn">A connection to the database.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetImageRowCommand(System.Data.IDbConnection,System.Int32)">
            <summary>    Creates a command that can get a single row dataset with the     image stream information as the first column. It will pass in a     parameter named       @index  with the value of       imageStreamIndex  .</summary>
            <returns>A command that will return a single row with the image stream information in the first column.</returns>
            <param name="conn">A connection to the database.</param>
            <param name="imageStreamIndex">    The index of the image stream (in the range of 0 to the count     of images). It will be passed into the stored procedure as a     parameter named       @index  .</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetImageStreamCountCommand(System.Data.IDbConnection)">
            <summary>Creates a command that can get the count of image streams.</summary>
            <returns>A command that will return a single row with the count of image streams in the first column.</returns>
            <param name="conn">A connection to the database.</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateGetObjectByIndexCommand(System.Data.IDbConnection,System.String,System.Int32)">
            <summary>Creates a command that can get an image related database object by calling the stored procedure, passing in the given imageStreamIndex.</summary>
            <returns>A command that can call the stored procedure and pass the index to it.</returns>
            <param name="conn">A connection to the database</param>
            <param name="procName">The name of the stored procedure that can get a dataset by index.</param>
            <param name="imageStreamIndex">    The index of the image stream (in the range of 0 to the count     of images). It will be passed into the stored procedure as the     first parameter and named       @index  .</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.CreateStoredProcCommand(System.Data.IDbConnection,System.String)">
            <summary>Creates a command that can call the given stored procedure.</summary>
            <returns>A command that will will the given stored procedure.</returns>
            <param name="conn">A connection to the database</param>
            <param name="procName">The name of the stored procedure</param>
        </member>
        <member name="M:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>Get the data to serialize for this object</summary>
            <param name="info">The information for this object to serialize</param>
            <param name="context">The serialization context</param>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetFrameCountByIndexProc">
            <summary>The name of the stored procedure that will be used to access the frame count of an image stream. It must take a parameter called index and return a single row dataset with the frame count as the first column. It may also take extra parameters. DbStoredProcImageAccessor.DbStoredProcImageAccessor for an example of a valid stored procedure.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetImageByIndexProc">
            <summary>The name of the stored procedure that will be used to access image streams. It must take a parameter called index and return a single row dataset with the image stream as the first column. It may also take extra parameters. DbStoredProcImageAccessor.DbStoredProcImageAccessor for an example of a valid stored procedure.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.ImageSources.Data.DbStoredProcImageAccessor.GetImageStreamCountProc">
            <summary>The name of the stored procedure that will be used to access the count of image streams. It must take return a single row dataset with the image stream as the first column. It may also take extra parameters. DbStoredProcImageAccessor.DbStoredProcImageAccessor for an example of a valid stored procedure.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.DecryptHandler">
            <summary>A delegate to decrypt data back into a string (for use with serialization)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.EncryptHandler">
            <summary>A delegate to encrypt a string (for use with serialization)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.ImageSources.Data.GetConnectionCallback">
            <summary>A delegate that can return connections to a Database</summary>
        </member>
        <member name="N:Atalasoft.Imaging.Memory">
            <summary>This namespace contains classes dealing with pixel memory and image data.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.IDirectScanlineAccess">
            <summary>This interface is used for defining flavors of PixelMemory that allow direct access to scanlines.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.IDirectScanlineAccess.GetScanLinePtr(System.Int32)">
            <summary>Returns an IntPtr to the ith scanline in an image.</summary>
            <returns>An IntPtr which points to the first byte in the scanline.</returns>
            <param name="i">The index of the scanline.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.IDirectScanlineAccess.IsContiguous">
            <summary>Indicates whether or not the PixelMemory is contiguous in memory.</summary>
            <remarks>If a PixelMemory object implements IDirectScanlineAccess and IsContiguous is true, then it is safe to assume that any part of an image can be addressed by using a pointer to the 0th scanline and the images RowStride to calculate the address.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.BitmapPixelMemory">
            <summary>This is a concrete implementation of PixelMemory implemented using a Bitmap object as the owner of the memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.#ctor(System.Drawing.Bitmap)">
            <summary>Constructs a new BitmapPixelMemory object from the Bbitmap supplied.</summary>
            <remarks>After constructing a BitmapPixelMemory object, the Bitmap is controlled solely by BitmapPixelMemory. If the BitmapPixelMemory object is disposed or garbage-collected, then the Bitmap will also be disposed.</remarks>
            <param name="bm">A non-null Bitmap object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.DisposeManagedResources">
            <summary>Disposes any memory associated with this PixelMemory object, including the Bitmap.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.DisposeUnmanagedResources">
            <summary>Disposes any unmanaged resources associated with this object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.GetScanLinePtr(System.Int32)">
            <summary>Gets a pointer to a scanline for this object.</summary>
            <remarks>Will throw if the index is not within the boundary of the image.</remarks>
            <param name="i">An index to a scanline in the image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLClone">
            <summary>Subclasses implement this method to make a deep copy of this PixelAccessor.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetHeight">
            <summary>Returns the height of the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetPixelAccessor">
            <summary>Constructs a PixelAccessor appropriate for BitmapPixelMemory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.BitmapPixelMemory.LLGetRowStride">
            <summary>Returns the size of a row in bytes, rounded up to the next multiple of 4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.BitmapPixelMemory.IsContiguous">
            <summary>Returns true.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory">
            <summary>Represents a PixelMemory object with memory allocated by GlobalAlloc.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor">
            <summary>Constructs a new PixelMemory object with memory allocated by GlobalAlloc.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a new PixelMemory object with memory allocated by GlobalAlloc.</summary>
            <param name="height">The height of the image.</param>
            <param name="rowStride">The number of bytes in a scanline rounded up to the next multiple of 4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new PixelMemory object with memory allocated by GlobalAlloc.</summary>
            <param name="numBytes">The total number of bytes occupied by this image. Typically this will be height * rowstride, but it could be larger if there is space needed after the last scanline.</param>
            <param name="height">The height of the image.</param>
            <param name="rowStride">The number of bytes in a scanline rounded up to the next multiple of 4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Constructs a new PixelMemory object with memory allocated by GlobalAlloc.</summary>
            <param name="numBytes">The total number of bytes occupied by this image. Typically this will be height * rowstride, but it could be larger if there is space needed after the last scanline.</param>
            <param name="height">The height of the image.</param>
            <param name="rowStride">The number of bytes in a scanline rounded up to the next multiple of 4.</param>
            <param name="zeroMemory">Indicates whether allocated memory should be cleared or not.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Constructs a new PixelMemory object with memory allocated by GlobalAlloc.</summary>
            <param name="numBytes">The total number of bytes occupied by this image. Typically this will be height * rowstride, but it could be larger if there is space needed before or after the last scanline.</param>
            <param name="height">The height of the image.</param>
            <param name="rowStride">The number of bytes in a scanline rounded up to the next multiple of 4.</param>
            <param name="offsetToFirstScanline">An offset to the first scanline in the image. Typically, this is zero, but in some images, there is header information before the first scanline.</param>
            <param name="zeroMemory">Indicates whether allocated memory should be cleared or not.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new PixelMemory object with memory allocated by GlobalAlloc in the provided pointer.</summary>
            <remarks>This method will throw if memoryStart is not the start of a valid block or was not allocated by GlobalAlloc or was not allocated with specified size.</remarks>
            <param name="memoryStart">A pointer to the start at memory. MemoryStart must be allocated by GlobalAlloc.</param>
            <param name="numBytes">The total number of bytes occupied by this image. Typically this will be height * rowstride, but it could be larger if there is space needed before or after the last scanline.</param>
            <param name="height">The height of the image.</param>
            <param name="rowStride">The number of bytes in a scanline rounded up to the next multiple of 4.</param>
            <param name="offsetToFirstScanline">An offset to the first scanline in the image. Typically, this is zero, but in some images, there is header information before the first scanline</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLAllocateMemory">
            <summary>Allocates memory using GlobalAlloc.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLClone">
            <summary>Creates a deep copy of this object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.GlobalAllocPixelMemory.LLFreeMemory(System.IntPtr)">
            <summary>Frees the memory occupied by this object using GlobalFree.</summary>
            <param name="pointer">The pointer to free.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.ManagedPixelAccessor">
            <summary>This is an abstract object that is used to get direct access to the pixels of an image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.ManagedPixelMemory">
            <summary>Constructs a new PiixelMemory object using memory from the managed heap for the image.</summary>
            <remarks>Managed memory may move. This PixelMemory object needs to be locked before any direct memory access.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.#ctor">
            <summary>Constructs a new ManagedPixelMemory object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a new ManagedPixelMemory object.</summary>
            <param name="height">The height of the image in scan lines</param>
            <param name="rowStride">The length of a scan line in bytes. This should be a multiple of 4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.#ctor(System.Int64,System.Int32,System.Int32,System.Int32)">
            <summary>Constructs a new ManagedPixelMemory object.</summary>
            <param name="numBytes">The total number of bytes needed for the memory. This should be no less than height * rowStride + offsetToFirstScanline, but it can be more.</param>
            <param name="height">The height of the image in scan lines</param>
            <param name="rowStride">The length of a scan line in bytes. This should be a multiple of 4.</param>
            <param name="offsetToFirstScanline">The offset in bytes to the first scan line from the start of memory.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ManagedPixelMemory.GetScanLinePtr(System.Int32)">
            <summary>Returns a pointer to the specified scan line.</summary>
            <remarks>The PixelMemory must be locked before calling this method.</remarks>
            <param name="i">The index to the scan line. This value should be greater than or equal to 0 and less than the image height.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ManagedPixelMemory.IsContiguous">
            <summary>Indicates whether or not the memory is contiguous.</summary>
            <remarks>Presently, ManagedPixelMemory is contiguous, but this may change in the future.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.MemoryUseEventArgs">
            <summary>This class is used by all memory handling events.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.MemoryUseEventArgs.#ctor(System.Int64,System.Int64,System.Int64)">
            <summary>Constructs a new MemoryUseEventArgs object.</summary>
            <param name="memoryInUse">The current amount of memory in use.</param>
            <param name="highWatermark">The current high water mark for reporting high memory usage.</param>
            <param name="change">The last change in memory - this is positive for increases and negative for decreases.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.Change">
            <summary>The last change in memory - this is positive for increases and negative for decreases.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.HighWatermark">
            <summary>The current high water mark for reporting high memory usage.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.MemoryUseEventArgs.MemoryInUse">
            <summary>The current amount of memory in use.</summary>
            <remarks>This is the amount of memory in use when the event was fired. The total memory in use may be different by the time the event is handled.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelAccessor">
            <summary>This is an abstract object that is used to get direct access to the pixels of an image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquireNextScanline">
            <summary>Acquires the next scanline in sequence for this image.</summary>
            <returns>Returns an array of bytes or null if the next scanline would be outside the image's bounds.</returns>
            <remarks>For the sake of efficiency many implementations of PixelAccessor may return the same byte array, but with different contents. If you need to keep the data from a previously acquired scanline, you should use multiple PixelAccessor objects or explicitly copy the data in the array.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquirePreviousScanline">
            <summary>Acquires the previous scanline in the image.</summary>
            <remarks>For the sake of efficiency many implementations of PixelAccessor may return the same byte array, but with different contents. If you need to keep the data from a previously acquired scanline, you should use multiple PixelAccessor objects or explicitly copy the data in the array.</remarks>
            <returns>Returns an array of bytes or null if the previous scanline would be outside the image's bounds.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.AcquireScanline(System.Int32)">
            <summary>Aquires a scanline of data for accessing.</summary>
            <returns>An array of bytes representing the data in the scanline.</returns>
            <remarks>    This method will throw an exception if i is in within the     image boundary.     For the sake of efficiency many implementations of     PixelAccessor may return the same byte array, but with     different contents. If you need to keep the data from a     previously acquired scanline, you should use multiple     PixelAccessor objects or explicitly copy the data in the     array.</remarks>
            <param name="index">The index of the scanline.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Dispose">
            <summary>Disposes any resources needed by this PixelAccessor.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Dispose">
            <summary>Disposes this PixelAccessor and all its managed and unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Dispose(System.Boolean)">
            <summary>Disposes this PixelAccessor and all its managed and unmanaged resources.</summary>
            <param name="disposing">If disposing is true, PixelAccessor will dispose its managed resources and its unmanaged resources. If disposing is false, PixelMemory will dispose only its unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.DisposeManagedResources">
            <summary>Disposed any managed objects that implement IDisposable</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.DisposeUnmanagedResources">
            <summary>Disposes any unmanaged resources such as memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Finalize">
            <summary>Induces disposal of all unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanline">
            <summary>Gets the contents of a scanline in a manner that only requires reading the data.</summary>
            <remarks>AcquireScanline implies that data read will be written back to the image upon release. GetReadOnlyScanline does not require a release, thus the data will not ever be written back to the scanline.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanline(System.Int32,System.Byte[])">
            <summary>Copies the contents of a scanline into the supplied array</summary>
            <param name="index">The scanline to get.</param>
            <param name="data">An array of bytes to hold the scanline. This array must be at least as long the image's RowStride.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.GetReadOnlyScanline(System.Int32)">
            <summary>Gets the contents of a scanline, allocating memory for the data.</summary>
            <param name="index">The index of the scanline to get.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.LLAcquireScanline(System.Int32)">
            <summary>Subclasses of PixelAccessor implement this method to acquire a pointer to a scanline.</summary>
            <remarks>The index will always be in the correct range for this object.</remarks>
            <param name="index">The index of the scanline to access.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.LLReleaseScanline(System.Int32,System.IntPtr)">
            <summary>Subclasses of PixelAccessor implement this method to release a previously acquired scanline</summary>
            <remarks>The index will always be in a correct range for this image.</remarks>
            <param name="index">The index of the scanline to release.</param>
            <param name="p">A pointer to the scanline, returned by a previous call to AcquireScaline, AcquireNextScanline, or AcquirePreviousScanline.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.NotifyAccessorReleased">
            <summary>This method is called whenever an accessor has been released.</summary>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.NotifyAccessorReleasing">
            <summary>This method is called when a PixelAccessor is about to be released.</summary>
            <remarks>The default implementation does nothing.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Release">
            <summary>Releases a PixelAccessor back to the PixelMemory object that owns it.</summary>
            <remarks>Any attempt to use a PixelAccessor after it has been released should result in a throw.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.ReleaseScanline">
            <summary>Releases the last scanline acquired.</summary>
            <remarks>If no scanline was previously acquired, this will do nothing.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelAccessor.Reset">
            <summary>Resets the pixel accessor so that AcquireNextScanline will acquire the first scanline in the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Height">
            <summary>Returns the height of the image in scanlines.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Owner">
            <summary>Returns the PixelMemory object that created this PixelAccessor.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.OwnerValid">
            <summary>Indicates whether or not the PixelMemory which created this PixelAccessor is still valid.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.RowStride">
            <summary>The number of bytes contained in a scanline, rounded up to the next multiple of 4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelAccessor.Valid">
            <summary>Returns true if this PixelAccessor is still valid.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemory">
            <summary>PixelMemory is an abstract class that defines how an image's pixels are represented in memory, how they are allocated, deallocated, and accessed.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.AcquirePixelAccessor">
            <summary>Returns an object that inherits from PixelAccessor that is used to get to an image's pixel data.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Clone">
            <summary>Creates a deep copy of this image and its memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Dispose">
            <summary>Disposes this PixelMemory and all its managed and unmanaged resources.</summary>
            <remarks>When you dispose a PixelMemory objects, all of its PixelAccessor objects will become invalid.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Dispose">
            <summary>Disposes this PixelMemory and all its managed and unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Dispose(System.Boolean)">
            <summary>Disposes this PixelMemory and all its managed and unmanaged resources.</summary>
            <param name="disposing">If disposing is true, PixelMemory will dispose its managed resources and its unmanaged resources. If disposing is false, PixelMemory will dispose only its unmanaged resources.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.DisposeManagedResources">
            <summary>Disposes any unmanaged resources that implement IDisposable</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.DisposeUnmanagedResources">
            <summary>Disposes and unmanaged resources, such as memory not claimed by the garbage collector.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Finalize">
            <summary>Disposes all unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLClone">
            <summary>Subclasses of PixelMemory implement this method to create a deep copy of the object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetHeight">
            <summary>Subclasses of PixelMemory implement this method to return the height of the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetPixelAccessor">
            <summary>Subclasses of PixelMemory implement this method to return a new PixelAccessor object suitable for their particular version of PixelMemory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLGetRowStride">
            <summary>Subclasses of PixelMemory implement this method to return the number of bytes necessary for a row of pixels. This number should be rounded up to the next multiple of 4 bytes.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLLock">
            <summary>Subclasses of PixelMemory implement this method to lock the memory.</summary>
            <remarks>LLLock is called by Lock only when it is necessary to actually lock the memory. Lock manages both thread safety as well as accumulation of locks. For any number of calls to Lock without a call to Unlock, there will be precisely one call to LLLock. It is also guaranteed that LLLock can only be called by one thread at a time.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.LLUnlock">
            <summary>Subclasses of PixelMemory implement this method to unlock the memory.</summary>
            <remarks>LLUnlock is called by Unlock only when it is necessary to actually unlock the memory. Unlock manages both thread safety as well as accumulation of locks. For any number of calls to Unlock, there will be precisely one call to LLUnlock when there are no further lock requests. It is also guaranteed that LLUnlock can only be called by one thread at a time.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Lock">
            <summary>Locks the pixel memory object.</summary>
            <remarks>In a sequence of calls to Lock, the memory will only actually be locked on the first call. Every call to Lock should be balanced with a call to Unlock. When the PixelMemory is disposed, all pending locks will be released. Client code is encouraged to use the PixelMemoryLocker object to make lock management easier.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PixelDataFromPixelMemory">
            <summary>Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that operation, IntPtr.Zero is returned otherwise.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PixelDataFromPixelMemory(Atalasoft.Imaging.Memory.PixelMemory)">
            <summary>Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that operation, IntPtr.Zero is returned otherwise.</summary>
            <param name="pm">A pixel memory object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.PixelDataFromPixelMemory(Atalasoft.Imaging.AtalaImage)">
            <summary>Returns an IntPtr to the first scanline of an image if this version of PixelMemory supports that operation, IntPtr.Zero is returned otherwise.</summary>
            <param name="image">An AtalaImage object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.ThrowOnNonContiguous">
            <summary>This is a utility method to throw an exception if a PixelMemory object is not represented by a single contiguous block of memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.ThrowOnNonContiguous(Atalasoft.Imaging.Memory.PixelMemory)">
            <summary>This is a utility method to throw an exception if a PixelMemory object is not represented by a single contiguous block of memory.</summary>
            <param name="pm">A pixel memory object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.ThrowOnNonContiguous(Atalasoft.Imaging.AtalaImage)">
            <summary>This is a utility method to throw an exception if a PixelMemory object is not represented by a single contiguous block of memory.</summary>
            <param name="image">An AtalaImage object.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemory.Unlock">
            <remarks>In a sequence of calls to Unlock, the memory will only actually be unlocked when all locks have been released. Every call to Lock should be balanced with a call to Unlock. When the PixelMemory is disposed, all pending locks will be released. Client code is encouraged to use the PixelMemoryLocker object to make lock management easier.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.Disposed">
            <summary>Indicates whether or the PixelMemory has been disposed.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.Height">
            <summary>Returns the height of the image represented.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.IsLocked">
            <summary>Indicates whether or not the PixelMemory is currently locked.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemory.RowStride">
            <summary>Returns the number of bytes in a row of this image. The number is always rounded up to the next multiple of 4.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryFactory">
            <summary>PixelMemoryFactory is a singleton object that is used for allocating all image memory in dotImage. The object is accessed through the static Factory property.</summary>
            <remarks>All PixelMemory should be allocated through this object instead of constructing a concrete subclass of PixelMemory directly.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactory.Allocate(Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters)">
            <summary>Allocates a new PixelMemory object using the supplied parameters.</summary>
            <remarks>Allocate will use the Allocator property to perform the actual allocation. When the Allocator is invoked, it will be passed the AllocatorObject.</remarks>
            <param name="factoryParameters">The parameters used to control how the PixelMemory object will be allocated.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Allocator">
            <summary>Sets or gets the PixelMemoryAllocator that will be used to allocate PixelMemory.</summary>
            <remarks>It is not necessary to call the Allocator directly. Instead, use the Allocate method.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.AllocatorObject">
            <summary>Sets or gets and object passed to the Allocator delegate.</summary>
            <remarks>This is an memento object intended to be used by the Allocator to hold private data that might be needed at allocation time. Atalasoft does not currently use this object in the default allocator, although it may be used in the future. Client allocators should be prepared to handle conditions when this object might have been changed to something unexpected.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.DefaultAllocator">
            <summary>Gets the default allocator that is used by dotImage.</summary>
            <remarks>The intent of this property is to allow client code to restore the allocator to "factory settings".</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactory.Factory">
            <summary>Gets the singleton object used for memory allocation.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters">
            <summary>This class is used to control how PixelMemory is allocated by the PixelMemoryFactory</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor">
            <summary>Constructs a new PixelMemoryFactoryParameters object.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int32,System.Int32)">
            <summary>Constructs a new PixelMemoryFactoryParameters object.</summary>
            <param name="height">The height of the image in scan lines</param>
            <param name="rowStride">The length of a scan line in bytes. This should be a multiple of 4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int64,System.Int32,System.Int32)">
            <summary>Constructs a new PixelMemoryFactoryParameters object.</summary>
            <param name="numBytes">The total number of bytes needed for the memory. This should be no less than height * rowStride + offsetToFirstScanline, but it can be more.</param>
            <param name="height">The height of the image in scan lines</param>
            <param name="rowStride">The length of a scan line in bytes. This should be a multiple of 4.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.#ctor(System.Int64,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Constructs a new PixelMemoryFactoryParameters object.</summary>
            <param name="numBytes">The total number of bytes needed for the memory. This should be no less than height * rowStride + offsetToFirstScanline, but it can be more.</param>
            <param name="height">The height of the image in scan lines</param>
            <param name="rowStride">The length of a scan line in bytes. This should be a multiple of 4.</param>
            <param name="offsetToFirstScanline">The offset in bytes to the first scan line from the start of memory.</param>
            <param name="zeroMemory">Indicates whether or not memory should be set to zero.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.Height">
            <summary>    Sets or gets the requested height of the image in scan     lines</summary>
            <remarks>Height must be 1 or greater.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.NumBytes">
            <summary>Sets or gets the requested total number of bytes needed for the memory. This should be no less than height * rowStride + offsetToFirstScanline, but it can be more.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.OffsetToFirstScanline">
            <summary>Sets or gets the offset in bytes to the first scan line from the start of memory.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.RowStride">
            <summary>Sets or gets the length of a scan line in bytes. This should be a multiple of 4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryFactoryParameters.ZeroMemory">
            <summary>Sets or gets whether or not memory will be set to zero upon allocation</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryLocker">
            <summary>PixelMemoryLocker is a utility class to help manage the locking and unlocking of memory. By constructing a PixelMemoryLocker object in a using block, PixelMemory will be automatically locked on entrance and exit of the block.</summary>
            <remarks>PixelMemoryLocker should never be used outside of a using block. PixelMemoryLocker depends on Dispose being called in a predictable manner to operate correctly. Using a PixelMemoryLocker outside a using block will cause unpredictable behavior since the memory will be unlocked when the object is either disposed or garbage collected.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryLocker.#ctor">
            <summary>Constructs a new PixelMemoryLocker object.</summary>
            <remarks>Construction of the object will immediately lock the pixel memory.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryLocker.#ctor(Atalasoft.Imaging.AtalaImage)">
            <summary>Constructs an object that will automatically lock and unlock the PixelMemory for the supplied AtalaImage.</summary>
            <remarks>PixelMemoryLocker should never be used outside of a using block. PixelMemoryLocker depends on Dispose being called in a predictable manner to operate correctly. Using a PixelMemoryLocker outside a using block will cause unpredictable behavior since the memory will be unlocked when the object is either disposed or garbage collected.</remarks>
            <param name="image">An image to be locked. If image is null, PixelMemoryLocker will do nothing.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryLocker.#ctor(Atalasoft.Imaging.Memory.PixelMemory)">
            <summary>Constructs an object that will automatically lock and unlock the supplied PixelMemory.</summary>
            <remarks>PixelMemoryLocker should never be used outside of a using block. PixelMemoryLocker depends on Dispose being called in a predictable manner to operate correctly. Using a PixelMemoryLocker outside a using block will cause unpredictable behavior since the memory will be unlocked when the object is either disposed or garbage collected.</remarks>
            <param name="mem">The PixelMemory object to be locked. If mem is null, it will be ignored.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryTracker">
            <summary>This is a singleton class that is used for tracking memory used by images.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryAllocated">
            <summary>This method is used to report an allocation of image memory.</summary>
            <remarks>    MemoryAllocated will throw is the location has already     been reported as allocated or if the location is null or the     size is less than or equal to zero.     All memory reporting routines are thread-safe.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryFreed">
            <summary>Reports a block of memory as free.</summary>
            <remarks>This method is thread-safe.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryReallocated(System.IntPtr,System.IntPtr,System.Int64)">
            <summary>This method is used to report when a block of allocated image memory has been reallocated.</summary>
            <remarks>    If oldLocation has not been previously reported as     allocated via MemoryAllocated, this method will throw.     This method is equivalent to:     ReportFreed(oldLocation);     ReportAllocated(newLocation, newSize);</remarks>
            <param name="oldLocation">The previous location in memory</param>
            <param name="newLocation">The new location in memory</param>
            <param name="newSize">The size of the new block.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnDroppedBelowHighWatermark(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
            <summary>This method handles when memory usage has dropped below the high water mark.</summary>
            <param name="e">A MemoryUseEventArgs object indicating the change in memory.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnExceededHighWatermark(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
            <summary>This method handles when memory usage has exceeded the high water mark</summary>
            <param name="e">A MemoryUseEventArgs object indicating the change in memory.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.PixelMemoryTracker.OnMemoryInUseChanged(Atalasoft.Imaging.Memory.MemoryUseEventArgs)">
            <summary>This method handles when memory usage has changed in some way</summary>
            <param name="e">A MemoryUseEventArgs object indicating the change in memory.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.HighWatermark">
            <summary>Sets or gets a trigger point for memory events.</summary>
            <remarks>When total image memory in use exceeds this value, an event will be fired.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.Memory">
            <summary>Returns a singleton object used for tracking memory.</summary>
            <remarks>There is only one PixelMemoryTracker object used for tracking memory across a single .NET application. All operations on this object are thread-safe.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryInUse">
            <summary>Indicates the total amount of memory in use by AtalaImage objects.</summary>
            <remarks>Some images include memory which is not used for visual parts of the image. This memory should also be included in the total bytes.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.DroppedBelowHighWatermark">
            <summary>This event is fired is MemoryInUse drops below the HighWatermark property of PixelMemoryTracker</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.ExceededHighWatermark">
            <summary>This event is fired is MemoryInUse exceeds the HighWatermark property of PixelMemoryTracker</summary>
        </member>
        <member name="E:Atalasoft.Imaging.Memory.PixelMemoryTracker.MemoryInUseChanged">
            <summary>An event for reporting changes in the current memory use.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.ResidentPixelMemory">
            <summary>This is a class used to represent PixelMemory that is resident and for which allocation and deallocation are controlled.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.AllocateMemory(System.Int64,System.Boolean)">
            <summary>Allocates memory for this PixelMemory object and reports it for tracking.</summary>
            <remarks>Subclasses of ResidentPixelMemory do not need to be concerned with tracking memory through PixelMemoryTracker if it is allocated in a single block. AllocateMemory automatically tracks it.</remarks>
            <param name="numBytes">The nubmer of bytes to allocate.</param>
            <param name="zeroMemory">Indicates whether or not the memory should be cleared.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.DisposeManagedResources">
            <summary>Disposes any unmanaged resources.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.DisposeUnmanagedResources">
            <summary>Disposes the memory used by this object.</summary>
            <remarks>Subclasses of ResidentPixelMemory do not need to be concerned with tracking memory through PixelMemoryTracker if it is allocated in a single block. DisposeUnmanagedResources automatically tracks it.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.FreeMemory">
            <summary>Frees memory.</summary>
            <remarks>Subclasses of ResidentPixelMemory do not need to be concerned with tracking memory through PixelMemoryTracker if it is allocated in a single block.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.GetScanLinePtr(System.Int32)">
            <summary>Gets a pointer to the a given scanline.</summary>
            <remarks>Throws an ArgumentOutOfRangeException if the index is not within the image boundary.</remarks>
            <param name="index">An index to a scanline in an image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLAllocateMemory">
            <summary>Subclasses of ResidentPixelMemory implement this method to allocate memory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLFreeMemory(System.IntPtr)">
            <summary>Subclasses of ResidentPixelMemory implement this method to free memory.</summary>
            <param name="p">The pointer to free.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetHeight">
            <summary>Returns the height of the image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetPixelAccessor">
            <summary>Returns a suitable PixelAccesor object for this PixelMemory.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLGetRowStride">
            <summary>Returns the size of a scanline in bytes, rounded up to the next multiple of 4.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.IsContiguous">
            <summary>Returns true.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.LLPixelMemoryStart">
            <summary>Returns a pointer to the start of memory.</summary>
            <remarks>This pointer may not be a pointer to the first scanline.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.OffsetToFirstScanline">
            <summary>Returns an offset to the first scanline of the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.PixelData">
            <summary>Returns a pointer to the first scanline in the image.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Memory.ResidentPixelMemory.SizeInBytes">
            <summary>Returns the number of bytes used by the memory for this image.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.MemoryUseEventHandler">
            <summary>This delegate defines the type that is used for all PixelMemoryTracker events.</summary>
            <param name="sender">The object raising the event.</param>
            <param name="e">A MemoryUseEventArgs object indicating the change in memory.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Memory.PixelMemoryAllocator">
            <summary>This delegate is used to define a method to allocate pixel memory.</summary>
            <param name="factoryParameters">The parameters used to control how the PixelMemory object will be allocated.</param>
            <param name="o">A user supplied object to control memory allocation.</param>
        </member>
        <member name="N:Atalasoft.Imaging.Metadata">
            <summary>Contains classes for accessing and manipulating metadata that is stored in an image. Image metadata is any information stored in the image that isn't the pixel or palette data itself.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagID">
            <summary>Contains an enumeration of standard Exif tag ID's that are known.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTagIfd">
            <summary>Contains an enumeration of standard Exif Ifd's.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Main">
            <summary>Primary image data information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Exif">
            <summary>Exif camera information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Interoperability">
            <summary>Exif interoperabliity information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Thumbnail">
            <summary>A thumbnail stored with the image.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.Gps">
            <summary>GPS Satellite information.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteUnknown">
            <summary>Camera specific information for an unknown camera make.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteFujiFilm">
            <summary>Camera specific information for a FujiFilm camera make.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteOlympus">
            <summary>Camera specific information for an Olympus camera make.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteNikonType1">
            <summary>Camera specific information for a Nikon camera make.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteNikonType3">
            <summary>Camera specific information for a Nikon camera make.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteCasio">
            <summary>Camera specific information for a Casio camera make.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.ExifTagIfd.MakerNoteCanon">
            <summary>Camera specific information for a Canon camera make.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags">
            <summary>Flag enumeration used with CopyJpegWithNewMarkers.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyCom">
            <summary>Indicates whether the COM metadata should be copied.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyApp">
            <summary>Indicates whether the APP markers should be copied. This will not copy JPEG_APP0.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.PlaceAfterSofn">
            <summary>Indicates whether the metadata should be placed after the SOF tag.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerCopyFlags.CopyApp0">
            <summary>Indicates whether the JPEG_APP0 marker is copied. Normally this marker should not be copied since it contains image specific information, such as DPI.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerTypes">
            <summary>Defines the types of Jpeg Markers that can be saved as a data chunk inside a Jpeg image.</summary>
            <remarks>These markers contain binary information such as Exif and Iptc Data.</remarks>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp1">
            <summary>The APP1 JPEG Marker commonly associated with EXIF data</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp2">
            <summary>The APP2 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp3">
            <summary>The APP3 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp4">
            <summary>The APP4 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp5">
            <summary>The APP5 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp6">
            <summary>The APP6 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp7">
            <summary>The APP7 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp8">
            <summary>The APP8 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp9">
            <summary>The APP9 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp10">
            <summary>The APP10 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp11">
            <summary>The APP11 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp12">
            <summary>The APP12 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp13">
            <summary>The APP13 JPEG Marker commonly associated with IPTC data.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.MarkerApp14">
            <summary>The APP14 JPEG Marker.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.JpegMarkerTypes.AllMarkers">
            <summary>All markers OR'd together.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagDataType">
            <summary>Enumeration of TIFF Tag data types</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagID">
            <summary>Standard Tiff Tags that can be read from a TIFF file.</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageWidth">
            <summary>TIFFTAG_IMAGEWIDTH (256) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageLength">
            <summary>TIFFTAG_IMAGELENGTHUInt32 (257) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.BitsPerSample">
            <summary>TIFFTAG_BITSPERSAMPLE (258) UInt16</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Compression">
            <summary>    TIFFTAG_COMPRESSION (259) UInt16     1 = COMPRESSION_NONE     2 = COMPRESSION_CCITTRLE     3 = COMPRESSION_CCITTFAX3     4 = COMPRESSION_CCITTFAX4     5 = COMPRESSION_LZW     6 = COMPRESSION_OJPEG     7 = COMPRESSION_JPEG     32766 = COMPRESSION_NEXT (NeXT 2-bit RLE)     32771 = COMPRESSION_CCITTRLEW (#1 w/ word alignment)     32773 = COMPRESSION_PACKBITS (Macintosh RLE)     32809 = COMPRESSION_THUNDERSCAN (ThunderScan RLE)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PhotometricInterpretation">
            <summary>    TIFFTAG_PHOTOMETRIC (262) UInt16     0 = PHOTOMETRIC_MINISWHITE (min value is white)     1 = PHOTOMETRIC_MINISBLACK (min value is black)     2 = PHOTOMETRIC_RGB (RGB color model)     3 = PHOTOMETRIC_PALETTE (color map indexed)     4 = PHOTOMETRIC_MASK ($holdout mask)     5 = PHOTOMETRIC_SEPARATED (!color separations)     6 = PHOTOMETRIC_YCBCR (!CCIR 601)     7 = PHOTOMETRIC_CIELAB (!1976 CIE L*a*b*)     8 = PHOTOMETRIC_ICCLAB (ICC L*a*b* [Adobe TIFF Technote     4])     9 = PHOTOMETRIC_ITULAB (ITU L*a*b*)     32844 = PHOTOMETRIC_LOGL (CIE Log2(L))     32845 = PHOTOMETRIC_LOGLUV (CIE Log2(L) (u',v'))</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DocumentName">
            <summary>TIFFTAG_DOCUMENTNAME (269) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ImageDescription">
            <summary>TIFFTAG_IMAGEDESCRIPTION (270) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Make">
            <summary>TIFFTAG_MAKE (271) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Model">
            <summary>TIFFTAG_MODEL (272) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Orientation">
            <summary>    TIFFTAG_ORIENTATION (274) UInt16     1 = ORIENTATION_TOPLEFT     2 = ORIENTATION_TOPRIGHT     3 = ORIENTATION_BOTRIGHT     4 = ORIENTATION_BOTLEFT     5 = ORIENTATION_LEFTTOP     6 = ORIENTATION_RIGHTTOP     7 = ORIENTATION_RIGHTBOT     8 = ORIENTATION_LEFTBOT</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RowsPerStrip">
            <summary>TIFFTAG_ROWSPERSTRIP (The number of rows per strip in the image (not used in tiled images)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XResolution">
            <summary>TIFFTAG_XRESOLUTION (282) Int32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.YResolution">
            <summary>TIFFTAG_YRESOLUTION (283) Int32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.PageName">
            <summary>TIFFTAG_PAGENAME (285) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ResolutionUnit">
            <summary>    TIFFTAG_RESOLUTIONUNIT (296) UInt16     1 = RESUNIT_NONE     2 = RESUNIT_INCH     3 = RESUNIT_CENTIMETER</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Software">
            <summary>TIFFTAG_SOFTWARE (305) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DateTime">
            <summary>TIFFTAG_DATETIME (306) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Artist">
            <summary>TIFFTAG_ARTIST (315) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.HostComputer">
            <summary>TIFFTAG_HOSTCOMPUTER (316) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileWidth">
            <summary>TIFFTAG_TILEWIDTH (322) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TileLength">
            <summary>TIFFTAG_TILELENGTH (323) UInt32</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkSet">
            <summary>    TIFFTAG_INKSET (332) UInt32     1 = INKSET_CMYK (cyan-magenta-yellow-black color)     2 = INKSET_MULTIINK (multi-ink or hi-fi color)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.InkNames">
            <summary>TIFFTAG_INKNAMES (333) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.NumberOfInks">
            <summary>TIFFTAG_NUMBEROFINKS (334) UInt16</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.DotRange">
            <summary>TIFFTAG_DOTRANGE (335)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.TargetPrinter">
            <summary>TIFFTAG_TARGETPRINTER (337) String</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.ExtraSamples">
            <summary>    TIFFTAG_EXTRASAMPLES (338)     0 = EXTRASAMPLE_UNSPECIFIED (unspecified data)     1 = EXTRASAMPLE_ASSOCALPHA (associated alpha data)     2 = EXTRASAMPLE_UNASSALPHA (unassociated alpha data)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.XmpData">
            <summary>TIFFTAG_XMLPACKET (700)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.WangAnnotationData">
            <summary>TIFFTAG_ANNOTATIONS (32932)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.RichTiffIptc">
            <summary>TIFFTAG_RICHTIFFIPTC (33723)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.Photoshop">
            <summary>TIFFTAG_PHOTOSHOP (34377)</summary>
        </member>
        <member name="F:Atalasoft.Imaging.Metadata.TiffTagID.IccProfile">
            <summary>TIFFTAG_ICCPROFILE (34750)</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.Rational">
            <summary>A fractional value used to represent certain TIFF and EXIF tags.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.#ctor(System.Int32,System.Int32)">
            <summary>Creates a new instance of Rational.</summary>
            <param name="numerator">The fraction numerator</param>
            <param name="denominator">The fraction denominator</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.Parse(System.String)">
            <summary>Parses a string in the form of numerator/denominator to a Rational value.</summary>
            <param name="s">The string to parse</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.Rational.ToString">
            <summary>Returns a string representation of the fraction (numerator/denominator)</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.Rational.Denominator">
            <summary>Gets the denominator of the fraction</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.Rational.Empty">
            <summary>Returns an 'Empty' Rational value of 0/1.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.Rational.Numerator">
            <summary>Gets the numerator of the fraction.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextCollection">
            <summary>    Contains a collection of COM text tags and methods to     access COM Text data from an image.</summary>
            <remarks>See the  ParseFromImage method of the ComTextParser class to generate data from a JPEG or PNG image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor">
            <summary>    Initialize a new instance of this COM Text tag.     Initialize a new instance of     ComTextCollection.     Initialize a new instance of     ComTextCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor(System.IO.Stream)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.#ctor(System.String)">
            <summary>Obsolete</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Add(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>Add a new COM Text marker to this collection.</summary>
            <param name="tag">The ComTextTag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.CopyTo(Atalasoft.Imaging.Metadata.ComTextTag[],System.Int32)">
            <summary>Copies items from this collection into an array.</summary>
            <param name="comText">An array of ComTextTag objects that will hold the items.</param>
            <param name="index">An index in the array where the data will be copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextCollection.Remove(Atalasoft.Imaging.Metadata.ComTextTag)">
            <summary>Remove a specified COM Text tag from this collection.</summary>
            <param name="tag">The ComTextTag to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextCollection.Item(System.Int32)">
            <summary>Returns the ComTextTag by index in the collection and allows the COM Text tags to be enumerated.</summary>
            <param name="index">The index of the item to retrieve.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextParser">
            <summary>Parses COM Markers from a JPEG or PNG image into a collection of COM Text tags.</summary>
            <remarks>    PNG and JPEG images support a type of metadata called COM     Text. This is simple textual information that can be stored     into an image. Atalasoft dotImage supports reading and writing     this information to an image.     For more information see COM Text and     metadataoverview.html.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.#ctor">
            <summary>Initializes a new instance of ComTextParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage">
            <summary>Parses COM Text data from an image file or stream.</summary>
            <returns>Returns a ComTextCollection containing all COM Text data.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.String)">
            <summary>Parses COM Text data from an image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses COM Text data from an image file stream.</summary>
            <returns>A ComTextCollection containing all COM Text tags.</returns>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ComTextTag">
            <summary>Contains the data for a specified COM Text tag including the key and text.</summary>
            <remarks>The Key value in a COM Text tag is only valid for PNG images. Ignored in JPEG images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor">
            <summary>Initialize a new instance of this COM Text tag.Initialize a new instance of this COM Text tag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor(System.String)">
            <summary>Initialize a new instance of this COM Text tag specifying the text.</summary>
            <param name="text">The text contained in this COM Text Tag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.#ctor(System.String,System.String)">
            <summary>Initialize a new instance of this COM Text tag specifying the key and text.</summary>
            <param name="text">The text contained in this COM Text Tag.</param>
            <param name="key">A unique indentifier of the COM Tag for use in PNG images.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ComTextTag.ToString">
            <summary>Returns a text description of the tag.</summary>
            <returns>A text description of the tag.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Key">
            <summary>Gets or sets a unique indentifier of the COM Tag for use in PNG images.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ComTextTag.Text">
            <summary>Gets or sets the text contained in this COM Text Tag.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifCollection">
            <summary>Contains a collection of EXIF tags.</summary>
            <remarks>See  ParseFromImage of ExifParser to populate an ExifCollection with EXIF data from an image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.#ctor">
            <summary>Creates a new instance of the ExifCollection class.Create a new instance of  ExifCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Add(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Adds a new ExifTag to this collection.</summary>
            <param name="tag">The EXIF tag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Contains(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Returns a value indicating if a particular EXIF Tag exists in the collection.</summary>
            <param name="source">The EXIF tag to test.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.CopyTo(Atalasoft.Imaging.Metadata.ExifTag[],System.Int32)">
            <summary>Copies items from this collection into an array.</summary>
            <param name="tags">An array of ExifTags to hold the items.</param>
            <param name="index">An index in the array where the data will be copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.IndexOf(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Returns the index value of an ExifTag found in the collection.</summary>
            <returns>Returns -1 if the tag was not found.</returns>
            <param name="tag">The specific tag to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Insert an EXIF Tag into the collection at the specified index.</summary>
            <param name="index">The index to insert into.</param>
            <param name="source">The tag to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag">
            <summary>Returns an ExifTag based on a description or Exif ID and IFD.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd)">
            <summary>Returns an ExifTag based on an Exif ID and IFD.</summary>
            <param name="id">The ID of the EXIF tag to lookup.</param>
            <param name="ifd">The IFD to search through.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd)">
            <summary>Returns an ExifTag based on an Exif ID and IFD.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.LookupTag(System.String)">
            <summary>Deprecated</summary>
            <param name="description">A textual description of the ExifTag (for example, "DateTime").</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.Remove(Atalasoft.Imaging.Metadata.ExifTag)">
            <summary>Remove a specified ExifTag from the collection.</summary>
            <param name="tag">The tag to remove</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifCollection.ToByteArray">
            <summary>Creates a byte array of the EXIF data that can be inserted into an image.</summary>
            <remarks>This method is intended on being used to store EXIF in a Jpeg Image. To add or edit EXIF data in a JPEG image, create a JPEG APP1 Marker from this data. See JpegMarker for more information.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.Item(System.Int32)">
            <summary>Returns the ExifTag by index in the collection and allows the EXIF tags to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.MakernoteHeader">
            <summary>Gets or sets the makernote header.</summary>
            <remarks>This information is required to save EXIF with the original maker note data. It contains the header for vendor specific maker note tags identifying the type of makernote contained within this ExifCollection.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifCollection.ThumbnailStream">
            <summary>Gets or sets the thumbnail stream contained within this EXIF data.</summary>
            <remarks>    EXIF information often contains a small thumbnail image.     That image can be obtained from this property. The thumbnail     can also be set or changed by setting this to a new     stream.     Please note that saving a thumbnail inside a TIFF image     requires that the thumbnail is a TIFF. When copying EXIF from a     JPEG to a TIFF, ensure that the ThumbnailStream is converted     from a JPEG to a TIFF.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifParser">
            <summary>Parses EXIF data from JPEG or TIFF images into a collection of EXIF tags.</summary>
            <remarks>    EXIF (Exchangeable Image File Format) is a standard for     storing interchange information in image files, in particular     JPEG images. This metadata is commonly used in digital camera     images to store information specific to digital photography     such as shutter speed, date taken, aperture, GPS information,     and other information depending on the make of the     camera.     To modify EXIF data use the      ToJpegMarker method in the ExifCollection     to create a JpegMarker which is added to the JpegEncoder          AppMarkers property.     For a more detailed explanation of EXIF and Metadata in     general, see EXIF Metadata and Metadata.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.#ctor">
            <summary>Initializes a new instance of ExifParser.Initializes a new instance of ExifParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromByteArray(System.Byte[])">
            <summary>Parses a byte array of EXIF data.</summary>
            <returns>An  ExifCollection holding a list of all the EXIF values that were read. This list will be empty if no values were read.</returns>
            <remarks>Use this method for dealing with raw image data. For reading Exif from an image, use  ParseFromImage.</remarks>
            <param name="exifData">An array containing the entire EXIF string to parse.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage">
            <summary>Parses EXIF data from a JPEG or TIFF image file or stream.</summary>
            <returns>An ExifCollection containing all EXIF information.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String)">
            <summary>Parses EXIF data from a JPEG or TIFF image file.</summary>
            <param name="imageFile">The image filename to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.String,System.Int32)">
            <summary>Parses EXIF data from an image file, specifying the frame index of a multipage TIFF.</summary>
            <param name="imageFile">The image filename to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load EXIF data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses EXIF data from a JPEG or TIFF image file stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Parses EXIF data from an image file stream, specifying the frame index of a multipage TIFF.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load EXIF data from.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifParser.FormatTags">
            <summary>Deprecated</summary>
            <remarks>To achieve similar functionality as the pre-deprecated version, use the ToString() method in the ExifTag class. It will return 'TagName: EnglishFormattedValue'. You can parse this string to yield the same result, which is just 'EnglishFormattedValue'.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifParser.ThumbnailCallback">
            <summary>Deprecated</summary>
            <remarks>See  ThumbnailStream in  ExifCollection for the replacement.</remarks>
        </member>
        <member name="E:Atalasoft.Imaging.Metadata.ExifParser.CodecError">
            <summary>This event is used by the ExifParser object to report errors that occur when parsing an image.</summary>
            <remarks>The Atalasoft EXIF Parser is aggressive in suppressing errors encountered while parsing damaged or somewhat malformed files. Normally these errors are not reported. This event provides a mechanism for an application to record, report, or abort in the event of an error.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ExifTag">
            <summary>Contains the data of this Exif tag including ID, IFD, value, and description.</summary>
            <remarks>See the ExifParser class to retreive ExifTags from images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor">
            <summary>Creates a new instance of ExifTag specifying the id, ifd, data, and decription. Initializes a new instance of ExifTag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(Atalasoft.Imaging.Metadata.ExifTagID,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object)">
            <summary>Initializes a new instance of ExifTag.</summary>
            <param name="id">The EXIF ID.</param>
            <param name="ifd">The EXIF IFD.</param>
            <param name="data">The EXIF Data</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object)">
            <summary>Initializes a new instance of ExifTag.</summary>
            <param name="id">The ExifID</param>
            <param name="ifd">The ExifIdf</param>
            <param name="data">The object data</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.#ctor(System.Int32,Atalasoft.Imaging.Metadata.ExifTagIfd,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary>Initializes a new instance of ExifTag.</summary>
            <param name="id">The ExifID</param>
            <param name="ifd">The ExifIfd</param>
            <param name="data">The object data</param>
            <param name="type">The tag data type</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ExifTag.ToString">
            <summary>Returns a text description of the tag in the form of 'TagDescription: FormattedTagValue'</summary>
            <returns>A text description of the tag.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Data">
            <summary>Gets or sets the value of this EXIF tag.</summary>
            <remarks>    The returned value is a variant object that is stored at     its native type. Use      ToString to view the string data of this tag.     When editing or adding EXIF data, this tag must be able     to be translated to the appropriate Type as defined in the          Type property.     Array of types is also supported. To determine if a tag     is an array of values ihe invoke the GetType().IsArray() of the     Data object.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Description">
            <summary>This property is deprecated.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.ExifTag.Ifd">
            <summary>Gets the IFD of this ExifTag.</summary>
            <remarks>EXIF data can be stored in multiple IFD's.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.ImageMetadataException">
            <summary>This exception is thrown when an error with image metadata is detected</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor">
            <summary>Creates a new instance of ImageMetadataException.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.String)">
            <summary>Creates a new instance of ImageMetadataException specifying the exception message.</summary>
            <param name="message">The exception message.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.ImageMetadataException.#ctor(System.String,System.Exception)">
            <summary>Creates a new instance of ImageMetadataException specifying the exception message and inner exception.</summary>
            <param name="message">The exception message.</param>
            <param name="innerException">The inner exception for this error.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcCollection">
            <summary>Contains a collection of IPTC tags.</summary>
            <remarks>See  ParseFromImage of the IptcParser class to populate an IptcCollection with data from an image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor">
            <summary>Initializes an empty collection of IptcTags</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor">
            <summary>Initializes an empty collection of IptcTags</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.IO.Stream)">
            <summary>Creates a new instance of the IptcCollection class specifying the file stream to read the iptc metadata from.</summary>
            <param name="stream">File to retreive iptc data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.IO.Stream,System.Int32)">
            <summary>Creates a new instance of the IptcCollection class specifying the file stream and page index (in a multipage TIFF) to read the iptc metadata from.</summary>
            <param name="stream">File to retreive iptc data from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.String)">
            <summary>Creates a new instance of the IptcCollection class specifying the file to read the iptc metadata from.</summary>
            <param name="fileName">File to retreive iptc data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.#ctor(System.String,System.Int32)">
            <summary>Creates a new instance of the IptcCollection class specifying the file and page index (in a multipage TIFF) to read the iptc metadata from.</summary>
            <param name="fileName">File to retreive iptc data from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Add(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Adds a new IptcTag to the collection.</summary>
            <param name="tag">The IptcTag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CopyTo(Atalasoft.Imaging.Metadata.IptcTag[],System.Int32)">
            <summary>Copies items from the collection into an array.</summary>
            <param name="tags">An array of IptcTag object that will hold the collection items.</param>
            <param name="index">An index in the array where the data will be copied.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.CreateIptcDataBlock">
            <summary>Generate an IPTC data block.</summary>
            <returns>The data block generated by this function can be used in IS3AddJPGOutputMarker to add an IPTC data block to a JPG image.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.GetTagDescription(System.Int32)">
            <summary>Returns a textual description based on an IptcID.</summary>
            <param name="id">The ID of the tag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.IndexOf(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Returns the index value of an IptcTag.</summary>
            <returns>The index of the item or -1 if the item is not in the collection.</returns>
            <param name="tag">The IptcTag to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag">
            <summary>Returns an IptcTag based on an IPTC ID and index.</summary>
            <returns>An IptcTag containing the ID and index specified or null (Nothing in Visual Basic) if a match is not found.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32)">
            <param name="id">The ID of the tag to look up.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.LookupTag(System.Int32,System.Int32)">
            <param name="index">The index of the tag to look up.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcCollection.Remove(Atalasoft.Imaging.Metadata.IptcTag)">
            <summary>Remove a specified IptcTag from the collection.</summary>
            <param name="tag">The IptcTag to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcCollection.Item(System.Int32)">
            <summary>Returns the IptcTag by index in the collection and allows the Iptc tags to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcParser">
            <summary>Parses IPTC data from JPEG or TIFF images into a collection of IPTC tags.</summary>
            <remarks>    The Newspaper Association of America (NAA) and the     International Press Telecommunications Council (IPTC) have     worked jointly to design a model to store all sorts of data in     an image. This metadata is commonly known as IPTC. Adobe     Photoshop uses IPTC to store information in images as well as     much of the newspaper and press industry. Atalasoft dotImage     can read and write IPTC information to a JPEG image and read     IPTC information from a TIFF image.     IPTC data can be modified and saved back in a JPEG or     TIFF image.     For more information on IPTC and Metadata in general see     iptc.html and metadataoverview.html.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.#ctor">
            <summary>Initializes a new instance of IptcParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromByteArray(System.Byte[])">
            <summary>Parses IPTC data from a byte array.</summary>
            <returns>An IptcCollection containing the parsed data.</returns>
            <remarks>This is useful if the image format stores the IPTC in a different location within the file. For instance, IPTC may be stored in the TIFFTAG_RICHTIFFIPTC (ID 33723) instead of the Adobe Photoshop tag.</remarks>
            <param name="iptcData">A byte array containing the IPTC data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage">
            <summary>Parses IPTC data from a JPEG or TIFF image file or stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String,System.Int32)">
            <summary>Parses IPTC data from a specific frame in a multipage TIFF image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.String)">
            <summary>Parses IPTC data from a JPEG or TIFF image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses IPTC data from a JPEG or TIFF image file stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Parses IPTC data from a specific frame in a multipage TIFF image file stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load data from.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.IptcTag">
            <summary>Contains the data of this IPTC tag including ID, index, section, and value.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Creates a new instance of ExifTag specifying the id, section, index, and data.</summary>
            <param name="section">The section for this IPTC tag. Normally 2.</param>
            <param name="id">The ID of this IPTC tag.</param>
            <param name="index">The index of this IPTC tag.</param>
            <param name="data">The value of this IptcTag.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.IptcTag.ToString">
            <summary>Returns a text description of the IptcTag.</summary>
            <returns>A text description of the IptcTag.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Data">
            <summary>Gets or sets the value of this IptcTag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.ID">
            <summary>Gets or sets the ID of this IPTC tag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Index">
            <summary>Sets or returns the index value for this IPTC tag.</summary>
            <remarks>Each IPTC item can have multiple tags. This specifies the index for this item.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.IptcTag.Section">
            <summary>Gets or sets the section for this IPTC tag. Normally this value is 2.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarker">
            <summary>The JpegMarker is an object that stores information from JPEG images</summary>
            <remarks>A Jpeg Marker is a data block stored in Jpeg images. Also known as JPEG APPn markers. There are 14 markers that can be stored in JPEG images. See  JpegMarkerCollection for retreiving this data from existing JPEG images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.#ctor(Atalasoft.Imaging.Metadata.JpegMarkerTypes,System.Byte[])">
            <summary>Creates a new instance of JpegMarker.</summary>
            <remarks>Creates a new instance of JpegMarker.</remarks>
            <param name="type">The type of JpegMarker.</param>
            <param name="data">The data stored in this marker.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarker.Dispose">
            <summary>Call this method to free the JpegMarker data from memory without waiting for the Garbage Collector.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Data">
            <summary>Gets the binary data stored in this marker.</summary>
            <remarks>This data does not contain the first four bytes of marker information, which specifies the data length and marker type. When adding custom data, these four bytes should be removed so the Data property only contains the marker content.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Length">
            <summary>Gets or sets the length of this marker in bytes.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarker.Type">
            <summary>Gets or sets the type of JpegMarker.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.JpegMarkerCollection">
            <summary>    Contains a collection of JpegMarkers and methods to     access JpegMarker data.</summary>
            <remarks>    Metadata such as EXIF, IPTC, and COM Markers are stored     in as Jpeg Markers in JPEG files. This class allows Jpeg     markers to be accessed and resaved in a new image (both lossy     or lossless).     The marker data returned does not contain the first four     bytes of actual marker data. These four bytes contain the     length of the data and the marker type.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor">
            <summary>Creates a new instance of JpegMarkerCollection.</summary>
            <remarks>Creates a new instance of the JpegMarkerCollection class.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor">
            <summary>Creates a new instance of JpegMarkerCollection with an empty collection</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor(System.IO.Stream)">
            <summary>Creates a new instance of JpegMarkerCollection specifying a stream containing the Jpeg file.</summary>
            <remarks>Creates a new instance of the JpegMarkerCollection class specifying the file stream to read the markers from.</remarks>
            <param name="stream">File to retreive Jpeg markers from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.#ctor(System.String)">
            <summary>Creates a new instance of JpegMarkerCollection specifying the filename of the image.</summary>
            <remarks>Creates a new instance of the JpegMarkerCollection class specifying the file to read the markers from.</remarks>
            <param name="fileName">File to retreive Jpeg markers from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Add(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>Adds a new JpegMarker to the collection.</summary>
            <param name="marker">The marker to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.CopyTo(Atalasoft.Imaging.Metadata.JpegMarker[],System.Int32)">
            <summary>Copies data from the collection into an array.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.IndexOf(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>Searches for the specified Atalasoft.Imaging.Metadata.JpegMarker and returns the zero-based index of the first occurance within the collection</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>Insert a new Atalasoft.Imaging.Metadata.JpegMarker into the collection at the specified index.</summary>
            <param name="index">The index in the collection.</param>
            <param name="marker">The marker to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarker(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
            <summary>    This method is obsolete and will only return the first     marker found, please use LookupMarkers instead.     Returns a Atalasoft.Imaging.Metadata.JpegMarker in the     collection based on the marker type.</summary>
            <returns>The JpegMarker or null (Nothing in Visual Basic) if the item is not found.</returns>
            <param name="type">The type of marker to lookup.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.LookupMarkers(Atalasoft.Imaging.Metadata.JpegMarkerTypes)">
            <summary>Returns a collection of Atalasoft.Imaging.Metadata.JpegMarker in the collection based on the marker type.</summary>
            <returns>A Collection of markers filtered for the types specified.</returns>
            <param name="type">The types of markers to lookup.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Remove(Atalasoft.Imaging.Metadata.JpegMarker)">
            <summary>Removes a specified Atalasoft.Imaging.Metadata.JpegMarker from the collection.</summary>
            <param name="marker">The marker to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.Item(System.Int32)">
            <summary>Allows the JpegMarkers to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.JpegMarkerCollection.MarkersToSave">
            <summary>Obsolete</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResource">
            <summary>Contains the data of a Photoshop Resource including ID, Data, and Description.</summary>
            <remarks>The Data object always contains a byte array.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.#ctor(System.Int32,System.Object,System.String)">
            <summary>Initializes a new instance of PhotoshopResource.</summary>
            <param name="id">The resource ID.</param>
            <param name="data">The resource data (typically a string value or byte array).</param>
            <param name="description">A description of the resource (optional).</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.GetHashCode">
            <summary>Gets the hashcode for this object</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResource.ToString">
            <summary>    Returns a string of:     The data if the data is a string     OR     The description if not null     OR     The ID as string</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Data">
            <summary>Gets or sets the data of this resource.</summary>
            <remarks>The object is always a byte array.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.Description">
            <summary>Gets or sets a textual description of the resource.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResource.ID">
            <summary>Gets or sets the ID of this resource.</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection">
            <summary>Contains a collection of PhotoshopResources.</summary>
            <remarks>See  ParseFromImage of the  PhotoshopResourceParser class to populate a PhotoshopResourceCollection with data from an image.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.#ctor">
            <summary>Initializes a new instance of PhotoshopResourceCollection.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Add(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Add a new PhotoshopResource to the collection.</summary>
            <param name="resource">The PhotoshopResource to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Contains(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Determines whether the given PhotoshopResource is in the collection</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.CopyTo(Atalasoft.Imaging.Metadata.PhotoshopResource[],System.Int32)">
            <summary>Copies the collection into an Array of PhotoshopResources.</summary>
            <param name="resources">The array of resources.</param>
            <param name="index">the index of the array to start copying into.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.IndexOf(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Returns the zero based index of a specified PhotoshopResource if located in the collection.</summary>
            <returns>Returns -1 if not found, the index in the collection if found.</returns>
            <param name="resource">The PhotoshopResource to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Insert a PhotoshopResource at the given index</summary>
            <param name="index">The index at which to insert the PhotoshopResource</param>
            <param name="resource">The PhotoshopResource to add. Cannot be null.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.LookupResource(System.Int32)">
            <summary>Gets a PhotoshopResource from an ID.</summary>
            <remarks>Returns null (Nothing in VB) if a resource of the specified ID doesn't exist.</remarks>
            <returns>A PhotoshopResource that matches the specified ID.</returns>
            <param name="id">The PhotoshopResource ID to look for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Remove(Atalasoft.Imaging.Metadata.PhotoshopResource)">
            <summary>Removes a specified PhotoshopResource from the collection.</summary>
            <param name="resource">The PhotoshopResource to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.PhotoshopResourceCollection.Item(System.Int32)">
            <summary>Gets an item index of the PhotoshopResourceCollection.</summary>
            <param name="index">The zero based item index.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.PhotoshopResourceParser">
            <summary>Parses Photoshop resources from JPEG, TIFF, and PSD images into a collection of PhotoshopResources.</summary>
            <remarks>The Format Specification for Photoshop Resources is available to purchase from Adobe. This document contains information for each resource ID. The data in each  PhotoshopResource is stored as a byte array. The developer must know the format of each ID, available in the specification, to parse to the respective value (string, integer, raw bytes, etc).</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.#ctor">
            <summary>Initializes a new instance of PhotoshopResourceParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file or stream.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String,System.Int32)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file specifying the frame index.</summary>
            <param name="imageFile">The image file to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.String)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file.</summary>
            <param name="imageFile">The image file to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file stream.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.PhotoshopResourceParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Parses Photoshop Resource data from a JPEG, TIFF, or PSD image file stream specifying the frame index.</summary>
            <param name="imageStream">The image file stream to parse data from.</param>
            <param name="frameIndex">The zero based frame index of a multipage TIFF image to load data from.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTag">
            <summary>Holds the data of a single TIFF Tag.</summary>
            <remarks>    TIFF Tags are returned when obtaining tags with the          GetTIFFTag method in TiffDecoder,     and set with the      TiffTags property in the TiffEncoder.     An alternative, and more comprehensive interface for     retrieval and editing of TIFF Tags is the      TiffFile class.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor">
            <summary>Initializes a new instance of the TiffTag class.Creates an new instance of TiffTag.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(System.Int32,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary>Creates a new instance of TiffTag with the tag ID, object data, and data type.</summary>
            <param name="id">The TIFF Tag ID</param>
            <param name="data">The data of the TIFF Tag</param>
            <param name="type">The data type of the TIFF Tag</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object)">
            <summary>Creates a new instance of TiffTag with the tag ID enumeration and object data automatically determine the data type.</summary>
            <param name="id">The TIFF Tag ID</param>
            <param name="data">The data of the TIFF Tag</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.#ctor(Atalasoft.Imaging.Metadata.TiffTagID,System.Object,Atalasoft.Imaging.Metadata.TiffTagDataType)">
            <summary>Creates a new instance of TiffTag with the tag ID, object data, and data type.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTag.ToString">
            <summary>A text description of the TiffTag.</summary>
            <returns>A text description of the TiffTag object.</returns>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Data">
            <summary>Gets or sets the data of a specific TIFF tag.</summary>
            <remarks>    TIFF Tag data can is stored in the type which it was read     from a file.     The TIFF Tag Data can contain an offset value which is a     reference pointer to a location in the TIFF File with the     actual image data. In this case the      IsReference property is true and the actual data can be     obtained by invoking the      LoadReferenceTagData in the      TiffDirectory class.     The TIFF Tag Data can be an array of values of the     appropriate type. To test if the Data contains an array invoke     the GetType().IsArray() method.</remarks>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.ID">
            <summary>Gets the ID of this TIFF tag.</summary>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTag.Type">
            <summary>Gets the TIFF DataType for this TIFF Tag.</summary>
            <remarks>Each TIFF Tag has a specific data type. When the TIFF Tag is created with the TiffTagID enumeration parameter, this value is automatically determined based on the standard TIFF Tag ID.</remarks>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.TiffTagCollection">
            <summary>    Contains a collection of TIFF tags, used tor writing TIFF     Tags to an image when saving.</summary>
            <remarks>    All TIFF images contain metadata explaining the size,     colordepth, strip size, and other detailed information of the     image. A TIFF tag is identified by an ID. Atalasoft dotImage     can read this information from a TIFF file as a string.     For more information, see Tiff Tags and Metadata     Overview.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor">
            <summary>Creates a new instance of the TiffTagCollection class.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.IO.Stream)">
            <summary>Deprecated</summary>
            <param name="fileStream">File to retreive tiff tags from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.IO.Stream,System.Int32)">
            <summary>Deprecated</summary>
            <param name="fileStream">File to retreive tiff tags from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.String)">
            <summary>Deprecated</summary>
            <param name="fileName">File to retreive tiff tags from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.#ctor(System.String,System.Int32)">
            <summary>Deprecated</summary>
            <param name="fileName">File to retreive tiff tags from.</param>
            <param name="frameIndex">The zero based page in a multipage TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Add(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Adds a new TIFF Tag to the collection.</summary>
            <param name="tag">The TIFF Tag to add.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Contains(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Returns a value indicating if a particular TIFF Tag exists in the collection.</summary>
            <param name="tag">The TIFF Tag to check.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.CopyTo(Atalasoft.Imaging.Metadata.TiffTag[],System.Int32)">
            <summary>Copies items from the collection into an array.</summary>
            <param name="tags">An array of TiffTag where the data will be stored.</param>
            <param name="index">An index in the array where the data will be stored.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag">
            <summary>Returns a single TIFF Tag from a TIFF image.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The file containing the encoded TIFF image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID and file stream.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="source">The stream containing the encoded TIFF image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.String,System.Int32)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file and zero based page index.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The file containing the encoded TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.String,System.Int32)">
            <summary>Returns the TIFF tag data from a file.</summary>
            <param name="tagID">The TIFF Tag ID to retrieve.</param>
            <param name="filename">The filename of the TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(System.Int32,System.IO.Stream,System.Int32)">
            <summary>Returns a TiffTag from a TIFF image specifying the tag ID, image stream and frame index.</summary>
            <returns>A object containing the TIFF tag data.</returns>
            <param name="tagID">The TIFF tag ID to return.</param>
            <param name="source">A stream containing the image data.</param>
            <param name="frameIndex">The frame index from a multipage TIFF containing the tag data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.GetSingleTag(Atalasoft.Imaging.Metadata.TiffTagID,System.IO.Stream,System.Int32)">
            <summary>Returns a single TIFF Tag from a TIFF image specifying the TIFF Tag ID, file stream and zero based page index.</summary>
            <param name="tag">The TIFF Tag ID to retrieve.</param>
            <param name="source">The stream containing the encoded TIFF image.</param>
            <param name="frameIndex">The zero based page index of a multipaged TIFF.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.IndexOf(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Returns the index value of a TiffTag found in the collection.</summary>
            <returns>Returns -1 if the tag was not found.</returns>
            <param name="tag">The specific tag to search for.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Insert(System.Int32,Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Insert a TIFF Tag into the collection at the specified index.</summary>
            <param name="index">The index to insert into.</param>
            <param name="tag">The tag to insert.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.LookupTag">
            <summary>Returns a TiffTag based on a TiffID.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.TiffTagCollection.Remove(Atalasoft.Imaging.Metadata.TiffTag)">
            <summary>Remove a specified tag from the collection.</summary>
            <param name="tag">The TIFF Tag to remove.</param>
        </member>
        <member name="P:Atalasoft.Imaging.Metadata.TiffTagCollection.Item(System.Int32)">
            <summary>Returns the Atalasoft.Imaging.Metadata.TiffTag by index in the collection and allows the Tiff tags to be enumerated.</summary>
            <param name="index">The zero based index in the collection.</param>
        </member>
        <member name="T:Atalasoft.Imaging.Metadata.XmpParser">
            <summary>The XmpParser class can extract XMP Binary data from an image, and parse it into XML content.</summary>
            <remarks>    There are two important methods in this class.      BytesFromImage returns a byte array of the raw XMP data. It     is used in DotAnnotate, our Annotations Toolkit, to load XMP     annotations data.      ParseFromImage returns an XmlDocument that can be easily     parsed using features in the .NET XML namespace.     For more information on XMP including the specification,     visit http://www.adobe.com/products/xmp/.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.#ctor">
            <summary>Initializes a new instance of XmpParser.</summary>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage">
            <summary>Returns a byte array containing XMP data from an image file or stream.</summary>
            <remarks>Currently supports reading XMP from JPEG, TIFF, and PDF images.</remarks>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String,System.Int32)">
            <summary>Returns a byte array containing XMP data from an image file specifying the frame index.</summary>
            <param name="imageFile">The image filename to retreive data from</param>
            <param name="frameIndex">The zero based frame index of the image to retrieve data from</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.String)">
            <summary>Returns a byte array containing XMP data from an image file.</summary>
            <param name="imageFile">The image filename to retreive data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream)">
            <summary>Returns a byte array containing XMP data from an image stream.</summary>
            <param name="imageStream">The image stream to retrieve data from.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.BytesFromImage(System.IO.Stream,System.Int32)">
            <summary>Returns a byte array containing XMP data from an image stream specifying the frame index.</summary>
            <param name="imageStream">The image stream to retrieve data from.</param>
            <param name="frameIndex">The zero based frame index of the image to retrieve data from</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage">
            <summary>Returns an XmlDocument containing XMP data from an image file or stream.</summary>
            <returns>A System.Xml.XmlDocument containing XMP information.</returns>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String,System.Int32)">
            <summary>Returns an XmlDocument containing XMP data from an image file and zero based frame index.</summary>
            <param name="imageFile">The image file containing XMP data.</param>
            <param name="frameIndex">The zero based frame index of a multi-page image.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.String)">
            <summary>Returns an XmlDocument containing XMP data from an image file.</summary>
            <param name="imageFile">The image file containing XMP data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream)">
            <summary>Returns an XmlDocument containing XMP data from an image file stream.</summary>
            <param name="imageStream">The image file stream containing XMP data.</param>
        </member>
        <member name="M:Atalasoft.Imaging.Metadata.XmpParser.ParseFromImage(System.IO.Stream,System.Int32)">
            <summary>Returns an XmlDocument containing XMP data from an image file stream and zero based frame index.</summary>
            <param name="imageStream">The image file stream containing XMP data.</param>
            <param name="frameIndex">The zero based frame index of a multi-page image.</param>
        </member>
        <member name="N:Atalasoft.Imaging.Utility">
            <summary>Contains Utility Classes</summary>
        </member>
        <member name="T:Atalasoft.Imaging.Utility.PointFConverter">
            <summary>Useful for designers that display PointF obects.</summary>
        </member>
    </members>
</doc>
