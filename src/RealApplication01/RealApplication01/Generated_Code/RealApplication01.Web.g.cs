//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace RealApplication01
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    /// <summary>
    /// Context for the RIA application.
    /// </summary>
    /// <remarks>
    /// This context extends the base to make application services and types available
    /// for consumption from code and xaml.
    /// </remarks>
    public sealed partial class WebContext : WebContextBase
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the WebContext class.
        /// </summary>
        public WebContext()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the context that is registered as a lifetime object with the current application.
        /// </summary>
        /// <exception cref="InvalidOperationException"> is thrown if there is no current application,
        /// no contexts have been added, or more than one context has been added.
        /// </exception>
        /// <seealso cref="System.Windows.Application.ApplicationLifetimeObjects"/>
        public new static WebContext Current
        {
            get
            {
                return ((WebContext)(WebContextBase.Current));
            }
        }
    }
}
namespace RealApplication01.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'BlackEvent' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class BlackEvent : Entity
    {
        
        private long _blackEventID;
        
        private DateTime _date;
        
        private string _detail;
        
        private EntityRef<Outsider> _outsider;
        
        private long _outsiderID;
        
        private string _type;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnBlackEventIDChanging(long value);
        partial void OnBlackEventIDChanged();
        partial void OnDateChanging(DateTime value);
        partial void OnDateChanged();
        partial void OnDetailChanging(string value);
        partial void OnDetailChanged();
        partial void OnOutsiderIDChanging(long value);
        partial void OnOutsiderIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BlackEvent"/> class.
        /// </summary>
        public BlackEvent()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'BlackEventID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long BlackEventID
        {
            get
            {
                return this._blackEventID;
            }
            set
            {
                if ((this._blackEventID != value))
                {
                    this.OnBlackEventIDChanging(value);
                    this.ValidateProperty("BlackEventID", value);
                    this._blackEventID = value;
                    this.RaisePropertyChanged("BlackEventID");
                    this.OnBlackEventIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Date' value.
        /// </summary>
        [DataMember()]
        public DateTime Date
        {
            get
            {
                return this._date;
            }
            set
            {
                if ((this._date != value))
                {
                    this.OnDateChanging(value);
                    this.RaiseDataMemberChanging("Date");
                    this.ValidateProperty("Date", value);
                    this._date = value;
                    this.RaiseDataMemberChanged("Date");
                    this.OnDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Detail' value.
        /// </summary>
        [DataMember()]
        public string Detail
        {
            get
            {
                return this._detail;
            }
            set
            {
                if ((this._detail != value))
                {
                    this.OnDetailChanging(value);
                    this.RaiseDataMemberChanging("Detail");
                    this.ValidateProperty("Detail", value);
                    this._detail = value;
                    this.RaiseDataMemberChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Outsider"/> entity.
        /// </summary>
        [Association("Outsider_BlackEvent", "OutsiderID", "OutsiderID", IsForeignKey=true)]
        [XmlIgnore()]
        public Outsider Outsider
        {
            get
            {
                if ((this._outsider == null))
                {
                    this._outsider = new EntityRef<Outsider>(this, "Outsider", this.FilterOutsider);
                }
                return this._outsider.Entity;
            }
            set
            {
                Outsider previous = this.Outsider;
                if ((previous != value))
                {
                    this.ValidateProperty("Outsider", value);
                    if ((previous != null))
                    {
                        this._outsider.Entity = null;
                        previous.BlackEvents.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OutsiderID = value.OutsiderID;
                    }
                    else
                    {
                        this.OutsiderID = default(long);
                    }
                    this._outsider.Entity = value;
                    if ((value != null))
                    {
                        value.BlackEvents.Add(this);
                    }
                    this.RaisePropertyChanged("Outsider");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutsiderID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long OutsiderID
        {
            get
            {
                return this._outsiderID;
            }
            set
            {
                if ((this._outsiderID != value))
                {
                    this.OnOutsiderIDChanging(value);
                    this.RaiseDataMemberChanging("OutsiderID");
                    this.ValidateProperty("OutsiderID", value);
                    this._outsiderID = value;
                    this.RaiseDataMemberChanged("OutsiderID");
                    this.OnOutsiderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        private bool FilterOutsider(Outsider entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._blackEventID;
        }
    }
    
    /// <summary>
    /// The 'Coming' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class Coming : Entity
    {
        
        private long _comingID;
        
        private EntityRef<Company> _company;
        
        private Nullable<long> _companyID;
        
        private string _computerName;
        
        private string _contactElse;
        
        private string _contactEMPID;
        
        private string _contactSectionID;
        
        private string _inspector;
        
        private Nullable<bool> _isDeliver;
        
        private bool _isKickedOut;
        
        private EntityRef<Outsider> _outsider;
        
        private long _outsiderID;
        
        private string _plateNo;
        
        private Nullable<short> _temporaryCardID;
        
        private DateTime _timeIn;
        
        private Nullable<DateTime> _timeOut;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnComingIDChanging(long value);
        partial void OnComingIDChanged();
        partial void OnCompanyIDChanging(Nullable<long> value);
        partial void OnCompanyIDChanged();
        partial void OnComputerNameChanging(string value);
        partial void OnComputerNameChanged();
        partial void OnContactElseChanging(string value);
        partial void OnContactElseChanged();
        partial void OnContactEMPIDChanging(string value);
        partial void OnContactEMPIDChanged();
        partial void OnContactSectionIDChanging(string value);
        partial void OnContactSectionIDChanged();
        partial void OnInspectorChanging(string value);
        partial void OnInspectorChanged();
        partial void OnIsDeliverChanging(Nullable<bool> value);
        partial void OnIsDeliverChanged();
        partial void OnIsKickedOutChanging(bool value);
        partial void OnIsKickedOutChanged();
        partial void OnOutsiderIDChanging(long value);
        partial void OnOutsiderIDChanged();
        partial void OnPlateNoChanging(string value);
        partial void OnPlateNoChanged();
        partial void OnTemporaryCardIDChanging(Nullable<short> value);
        partial void OnTemporaryCardIDChanged();
        partial void OnTimeInChanging(DateTime value);
        partial void OnTimeInChanged();
        partial void OnTimeOutChanging(Nullable<DateTime> value);
        partial void OnTimeOutChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Coming"/> class.
        /// </summary>
        public Coming()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'ComingID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long ComingID
        {
            get
            {
                return this._comingID;
            }
            set
            {
                if ((this._comingID != value))
                {
                    this.OnComingIDChanging(value);
                    this.ValidateProperty("ComingID", value);
                    this._comingID = value;
                    this.RaisePropertyChanged("ComingID");
                    this.OnComingIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Coming", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Comings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(Nullable<long>);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Comings.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public Nullable<long> CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ComputerName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(25)]
        public string ComputerName
        {
            get
            {
                return this._computerName;
            }
            set
            {
                if ((this._computerName != value))
                {
                    this.OnComputerNameChanging(value);
                    this.RaiseDataMemberChanging("ComputerName");
                    this.ValidateProperty("ComputerName", value);
                    this._computerName = value;
                    this.RaiseDataMemberChanged("ComputerName");
                    this.OnComputerNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactElse' value.
        /// </summary>
        [DataMember()]
        public string ContactElse
        {
            get
            {
                return this._contactElse;
            }
            set
            {
                if ((this._contactElse != value))
                {
                    this.OnContactElseChanging(value);
                    this.RaiseDataMemberChanging("ContactElse");
                    this.ValidateProperty("ContactElse", value);
                    this._contactElse = value;
                    this.RaiseDataMemberChanged("ContactElse");
                    this.OnContactElseChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactEMPID' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string ContactEMPID
        {
            get
            {
                return this._contactEMPID;
            }
            set
            {
                if ((this._contactEMPID != value))
                {
                    this.OnContactEMPIDChanging(value);
                    this.RaiseDataMemberChanging("ContactEMPID");
                    this.ValidateProperty("ContactEMPID", value);
                    this._contactEMPID = value;
                    this.RaiseDataMemberChanged("ContactEMPID");
                    this.OnContactEMPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ContactSectionID' value.
        /// </summary>
        [DataMember()]
        [StringLength(4)]
        public string ContactSectionID
        {
            get
            {
                return this._contactSectionID;
            }
            set
            {
                if ((this._contactSectionID != value))
                {
                    this.OnContactSectionIDChanging(value);
                    this.RaiseDataMemberChanging("ContactSectionID");
                    this.ValidateProperty("ContactSectionID", value);
                    this._contactSectionID = value;
                    this.RaiseDataMemberChanged("ContactSectionID");
                    this.OnContactSectionIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Inspector' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(25)]
        public string Inspector
        {
            get
            {
                return this._inspector;
            }
            set
            {
                if ((this._inspector != value))
                {
                    this.OnInspectorChanging(value);
                    this.RaiseDataMemberChanging("Inspector");
                    this.ValidateProperty("Inspector", value);
                    this._inspector = value;
                    this.RaiseDataMemberChanged("Inspector");
                    this.OnInspectorChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsDeliver' value.
        /// </summary>
        [DataMember()]
        public Nullable<bool> IsDeliver
        {
            get
            {
                return this._isDeliver;
            }
            set
            {
                if ((this._isDeliver != value))
                {
                    this.OnIsDeliverChanging(value);
                    this.RaiseDataMemberChanging("IsDeliver");
                    this.ValidateProperty("IsDeliver", value);
                    this._isDeliver = value;
                    this.RaiseDataMemberChanged("IsDeliver");
                    this.OnIsDeliverChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsKickedOut' value.
        /// </summary>
        [DataMember()]
        public bool IsKickedOut
        {
            get
            {
                return this._isKickedOut;
            }
            set
            {
                if ((this._isKickedOut != value))
                {
                    this.OnIsKickedOutChanging(value);
                    this.RaiseDataMemberChanging("IsKickedOut");
                    this.ValidateProperty("IsKickedOut", value);
                    this._isKickedOut = value;
                    this.RaiseDataMemberChanged("IsKickedOut");
                    this.OnIsKickedOutChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Outsider"/> entity.
        /// </summary>
        [Association("Outsider_Coming", "OutsiderID", "OutsiderID", IsForeignKey=true)]
        [XmlIgnore()]
        public Outsider Outsider
        {
            get
            {
                if ((this._outsider == null))
                {
                    this._outsider = new EntityRef<Outsider>(this, "Outsider", this.FilterOutsider);
                }
                return this._outsider.Entity;
            }
            set
            {
                Outsider previous = this.Outsider;
                if ((previous != value))
                {
                    this.ValidateProperty("Outsider", value);
                    if ((previous != null))
                    {
                        this._outsider.Entity = null;
                        previous.Comings.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OutsiderID = value.OutsiderID;
                    }
                    else
                    {
                        this.OutsiderID = default(long);
                    }
                    this._outsider.Entity = value;
                    if ((value != null))
                    {
                        value.Comings.Add(this);
                    }
                    this.RaisePropertyChanged("Outsider");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutsiderID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long OutsiderID
        {
            get
            {
                return this._outsiderID;
            }
            set
            {
                if ((this._outsiderID != value))
                {
                    this.OnOutsiderIDChanging(value);
                    this.RaiseDataMemberChanging("OutsiderID");
                    this.ValidateProperty("OutsiderID", value);
                    this._outsiderID = value;
                    this.RaiseDataMemberChanged("OutsiderID");
                    this.OnOutsiderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PlateNo' value.
        /// </summary>
        [DataMember()]
        [StringLength(40)]
        public string PlateNo
        {
            get
            {
                return this._plateNo;
            }
            set
            {
                if ((this._plateNo != value))
                {
                    this.OnPlateNoChanging(value);
                    this.RaiseDataMemberChanging("PlateNo");
                    this.ValidateProperty("PlateNo", value);
                    this._plateNo = value;
                    this.RaiseDataMemberChanged("PlateNo");
                    this.OnPlateNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TemporaryCardID' value.
        /// </summary>
        [DataMember()]
        public Nullable<short> TemporaryCardID
        {
            get
            {
                return this._temporaryCardID;
            }
            set
            {
                if ((this._temporaryCardID != value))
                {
                    this.OnTemporaryCardIDChanging(value);
                    this.RaiseDataMemberChanging("TemporaryCardID");
                    this.ValidateProperty("TemporaryCardID", value);
                    this._temporaryCardID = value;
                    this.RaiseDataMemberChanged("TemporaryCardID");
                    this.OnTemporaryCardIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeIn' value.
        /// </summary>
        [DataMember()]
        public DateTime TimeIn
        {
            get
            {
                return this._timeIn;
            }
            set
            {
                if ((this._timeIn != value))
                {
                    this.OnTimeInChanging(value);
                    this.RaiseDataMemberChanging("TimeIn");
                    this.ValidateProperty("TimeIn", value);
                    this._timeIn = value;
                    this.RaiseDataMemberChanged("TimeIn");
                    this.OnTimeInChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeOut' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> TimeOut
        {
            get
            {
                return this._timeOut;
            }
            set
            {
                if ((this._timeOut != value))
                {
                    this.OnTimeOutChanging(value);
                    this.RaiseDataMemberChanging("TimeOut");
                    this.ValidateProperty("TimeOut", value);
                    this._timeOut = value;
                    this.RaiseDataMemberChanged("TimeOut");
                    this.OnTimeOutChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterOutsider(Outsider entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._comingID;
        }
    }
    
    /// <summary>
    /// The 'Company' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class Company : Entity
    {
        
        private string _address;
        
        private EntityCollection<Coming> _comings;
        
        private long _companyID;
        
        private EntityCollection<Group> _groups;
        
        private string _name;
        
        private string _telephoneNo;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnCompanyIDChanging(long value);
        partial void OnCompanyIDChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnTelephoneNoChanging(string value);
        partial void OnTelephoneNoChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Company"/> class.
        /// </summary>
        public Company()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Coming"/> entities.
        /// </summary>
        [Association("Company_Coming", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Coming> Comings
        {
            get
            {
                if ((this._comings == null))
                {
                    this._comings = new EntityCollection<Coming>(this, "Comings", this.FilterComings, this.AttachComings, this.DetachComings);
                }
                return this._comings;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaisePropertyChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Group"/> entities.
        /// </summary>
        [Association("Company_Group", "CompanyID", "CompanyID")]
        [XmlIgnore()]
        public EntityCollection<Group> Groups
        {
            get
            {
                if ((this._groups == null))
                {
                    this._groups = new EntityCollection<Group>(this, "Groups", this.FilterGroups, this.AttachGroups, this.DetachGroups);
                }
                return this._groups;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TelephoneNo' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string TelephoneNo
        {
            get
            {
                return this._telephoneNo;
            }
            set
            {
                if ((this._telephoneNo != value))
                {
                    this.OnTelephoneNoChanging(value);
                    this.RaiseDataMemberChanging("TelephoneNo");
                    this.ValidateProperty("TelephoneNo", value);
                    this._telephoneNo = value;
                    this.RaiseDataMemberChanged("TelephoneNo");
                    this.OnTelephoneNoChanged();
                }
            }
        }
        
        private void AttachComings(Coming entity)
        {
            entity.Company = this;
        }
        
        private void DetachComings(Coming entity)
        {
            entity.Company = null;
        }
        
        private bool FilterComings(Coming entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private void AttachGroups(Group entity)
        {
            entity.Company = this;
        }
        
        private void DetachGroups(Group entity)
        {
            entity.Company = null;
        }
        
        private bool FilterGroups(Group entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._companyID;
        }
    }
    
    /// <summary>
    /// The domain context corresponding to the 'DomainService1' domain service.
    /// </summary>
    public sealed partial class DomainService1 : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class.
        /// </summary>
        public DomainService1() : 
                this(new WebDomainClient<IDomainService1Contract>(new Uri("RealApplication01-Web-DomainService1.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The DomainService1 service URI.</param>
        public DomainService1(Uri serviceUri) : 
                this(new WebDomainClient<IDomainService1Contract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="DomainService1"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this domain context.</param>
        public DomainService1(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="BlackEvent"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<BlackEvent> BlackEvents
        {
            get
            {
                return base.EntityContainer.GetEntitySet<BlackEvent>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Coming"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Coming> Comings
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Coming>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Company"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Company> Companies
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Company>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Group"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Group> Groups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Group>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="IdentifierImage"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<IdentifierImage> IdentifierImages
        {
            get
            {
                return base.EntityContainer.GetEntitySet<IdentifierImage>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Identifier"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Identifier> Identifiers
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Identifier>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="IdentifierType"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<IdentifierType> IdentifierTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<IdentifierType>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Outsider_Group"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Outsider_Group> Outsider_Groups
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Outsider_Group>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="Outsider"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<Outsider> Outsiders
        {
            get
            {
                return base.EntityContainer.GetEntitySet<Outsider>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="v_BlackIdentifierList"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<v_BlackIdentifierList> v_BlackIdentifierLists
        {
            get
            {
                return base.EntityContainer.GetEntitySet<v_BlackIdentifierList>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="v_BlackInnerContractor"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<v_BlackInnerContractor> v_BlackInnerContractors
        {
            get
            {
                return base.EntityContainer.GetEntitySet<v_BlackInnerContractor>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="v_Employee"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<v_Employee> v_Employees
        {
            get
            {
                return base.EntityContainer.GetEntitySet<v_Employee>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="v_GroupForSelect"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<v_GroupForSelect> v_GroupForSelects
        {
            get
            {
                return base.EntityContainer.GetEntitySet<v_GroupForSelect>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="v_Section"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<v_Section> v_Sections
        {
            get
            {
                return base.EntityContainer.GetEntitySet<v_Section>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="WorkArea"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<WorkArea> WorkAreas
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WorkArea>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="WorkType"/> entities that have been loaded into this <see cref="DomainService1"/> instance.
        /// </summary>
        public EntitySet<WorkType> WorkTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<WorkType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="BlackEvent"/> entities using the 'GetBlackEvents' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="BlackEvent"/> entities.</returns>
        public EntityQuery<BlackEvent> GetBlackEventsQuery()
        {
            this.ValidateMethod("GetBlackEventsQuery", null);
            return base.CreateQuery<BlackEvent>("GetBlackEvents", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Coming"/> entities using the 'GetComings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Coming"/> entities.</returns>
        public EntityQuery<Coming> GetComingsQuery()
        {
            this.ValidateMethod("GetComingsQuery", null);
            return base.CreateQuery<Coming>("GetComings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Coming"/> entities using the 'GetComingsForCheckOutWithOutsider' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Coming"/> entities.</returns>
        public EntityQuery<Coming> GetComingsForCheckOutWithOutsiderQuery()
        {
            this.ValidateMethod("GetComingsForCheckOutWithOutsiderQuery", null);
            return base.CreateQuery<Coming>("GetComingsForCheckOutWithOutsider", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Company"/> entities using the 'GetCompanies' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Company"/> entities.</returns>
        public EntityQuery<Company> GetCompaniesQuery()
        {
            this.ValidateMethod("GetCompaniesQuery", null);
            return base.CreateQuery<Company>("GetCompanies", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Group"/> entities using the 'GetGroups' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Group"/> entities.</returns>
        public EntityQuery<Group> GetGroupsQuery()
        {
            this.ValidateMethod("GetGroupsQuery", null);
            return base.CreateQuery<Group>("GetGroups", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Group"/> entities using the 'GetGroupsWithOutsider_Groups' query.
        /// </summary>
        /// <param name="groupID">The value for the 'groupID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Group"/> entities.</returns>
        public EntityQuery<Group> GetGroupsWithOutsider_GroupsQuery(long groupID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("groupID", groupID);
            this.ValidateMethod("GetGroupsWithOutsider_GroupsQuery", parameters);
            return base.CreateQuery<Group>("GetGroupsWithOutsider_Groups", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="IdentifierImage"/> entities using the 'GetIdentifierImages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="IdentifierImage"/> entities.</returns>
        public EntityQuery<IdentifierImage> GetIdentifierImagesQuery()
        {
            this.ValidateMethod("GetIdentifierImagesQuery", null);
            return base.CreateQuery<IdentifierImage>("GetIdentifierImages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="IdentifierImage"/> entities using the 'GetIdentifierImagesFromIdentifier' query.
        /// </summary>
        /// <param name="identifierID">The value for the 'identifierID' parameter of the query.</param>
        /// <param name="identifierTypeID">The value for the 'identifierTypeID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="IdentifierImage"/> entities.</returns>
        public EntityQuery<IdentifierImage> GetIdentifierImagesFromIdentifierQuery(string identifierID, short identifierTypeID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("identifierID", identifierID);
            parameters.Add("identifierTypeID", identifierTypeID);
            this.ValidateMethod("GetIdentifierImagesFromIdentifierQuery", parameters);
            return base.CreateQuery<IdentifierImage>("GetIdentifierImagesFromIdentifier", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Identifier"/> entities using the 'GetIdentifiers' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Identifier"/> entities.</returns>
        public EntityQuery<Identifier> GetIdentifiersQuery()
        {
            this.ValidateMethod("GetIdentifiersQuery", null);
            return base.CreateQuery<Identifier>("GetIdentifiers", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Identifier"/> entities using the 'GetIdentifiersWithOutsidersAndImages' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Identifier"/> entities.</returns>
        public EntityQuery<Identifier> GetIdentifiersWithOutsidersAndImagesQuery()
        {
            this.ValidateMethod("GetIdentifiersWithOutsidersAndImagesQuery", null);
            return base.CreateQuery<Identifier>("GetIdentifiersWithOutsidersAndImages", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Identifier"/> entities using the 'GetIdentifiersWithOutsidersFromIdentifierID' query.
        /// </summary>
        /// <param name="identifierID">The value for the 'identifierID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Identifier"/> entities.</returns>
        public EntityQuery<Identifier> GetIdentifiersWithOutsidersFromIdentifierIDQuery(string identifierID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("identifierID", identifierID);
            this.ValidateMethod("GetIdentifiersWithOutsidersFromIdentifierIDQuery", parameters);
            return base.CreateQuery<Identifier>("GetIdentifiersWithOutsidersFromIdentifierID", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="IdentifierType"/> entities using the 'GetIdentifierTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="IdentifierType"/> entities.</returns>
        public EntityQuery<IdentifierType> GetIdentifierTypesQuery()
        {
            this.ValidateMethod("GetIdentifierTypesQuery", null);
            return base.CreateQuery<IdentifierType>("GetIdentifierTypes", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Outsider_Group"/> entities using the 'GetOutsider_Group' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Outsider_Group"/> entities.</returns>
        public EntityQuery<Outsider_Group> GetOutsider_GroupQuery()
        {
            this.ValidateMethod("GetOutsider_GroupQuery", null);
            return base.CreateQuery<Outsider_Group>("GetOutsider_Group", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Outsider"/> entities using the 'GetOutsiders' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Outsider"/> entities.</returns>
        public EntityQuery<Outsider> GetOutsidersQuery()
        {
            this.ValidateMethod("GetOutsidersQuery", null);
            return base.CreateQuery<Outsider>("GetOutsiders", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Outsider"/> entities using the 'GetOutsiders_BlackEvents_Identifiers_Comings' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Outsider"/> entities.</returns>
        public EntityQuery<Outsider> GetOutsiders_BlackEvents_Identifiers_ComingsQuery()
        {
            this.ValidateMethod("GetOutsiders_BlackEvents_Identifiers_ComingsQuery", null);
            return base.CreateQuery<Outsider>("GetOutsiders_BlackEvents_Identifiers_Comings", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Outsider"/> entities using the 'GetOutsiders_BlackEvents_Identifiers_Comings_Filter' query.
        /// </summary>
        /// <param name="searcher">The value for the 'searcher' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Outsider"/> entities.</returns>
        public EntityQuery<Outsider> GetOutsiders_BlackEvents_Identifiers_Comings_FilterQuery(string searcher)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searcher", searcher);
            this.ValidateMethod("GetOutsiders_BlackEvents_Identifiers_Comings_FilterQuery", parameters);
            return base.CreateQuery<Outsider>("GetOutsiders_BlackEvents_Identifiers_Comings_Filter", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="Outsider"/> entities using the 'GetOutsiders_BlackEvents_Identifiers_Comings_FullFilter' query.
        /// </summary>
        /// <param name="blackListOnly">The value for the 'blackListOnly' parameter of the query.</param>
        /// <param name="todayOnly">The value for the 'todayOnly' parameter of the query.</param>
        /// <param name="searcher">The value for the 'searcher' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="Outsider"/> entities.</returns>
        public EntityQuery<Outsider> GetOutsiders_BlackEvents_Identifiers_Comings_FullFilterQuery(bool blackListOnly, bool todayOnly, string searcher)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("blackListOnly", blackListOnly);
            parameters.Add("todayOnly", todayOnly);
            parameters.Add("searcher", searcher);
            this.ValidateMethod("GetOutsiders_BlackEvents_Identifiers_Comings_FullFilterQuery", parameters);
            return base.CreateQuery<Outsider>("GetOutsiders_BlackEvents_Identifiers_Comings_FullFilter", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="v_BlackIdentifierList"/> entities using the 'GetV_BlackIdentifierList' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="v_BlackIdentifierList"/> entities.</returns>
        public EntityQuery<v_BlackIdentifierList> GetV_BlackIdentifierListQuery()
        {
            this.ValidateMethod("GetV_BlackIdentifierListQuery", null);
            return base.CreateQuery<v_BlackIdentifierList>("GetV_BlackIdentifierList", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="v_BlackInnerContractor"/> entities using the 'GetV_BlackInnerContractor' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="v_BlackInnerContractor"/> entities.</returns>
        public EntityQuery<v_BlackInnerContractor> GetV_BlackInnerContractorQuery()
        {
            this.ValidateMethod("GetV_BlackInnerContractorQuery", null);
            return base.CreateQuery<v_BlackInnerContractor>("GetV_BlackInnerContractor", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="v_Employee"/> entities using the 'GetV_Employee' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="v_Employee"/> entities.</returns>
        public EntityQuery<v_Employee> GetV_EmployeeQuery()
        {
            this.ValidateMethod("GetV_EmployeeQuery", null);
            return base.CreateQuery<v_Employee>("GetV_Employee", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="v_GroupForSelect"/> entities using the 'GetV_GroupForSelect' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="v_GroupForSelect"/> entities.</returns>
        public EntityQuery<v_GroupForSelect> GetV_GroupForSelectQuery()
        {
            this.ValidateMethod("GetV_GroupForSelectQuery", null);
            return base.CreateQuery<v_GroupForSelect>("GetV_GroupForSelect", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="v_GroupForSelect"/> entities using the 'GetV_GroupForSelectWithFilter' query.
        /// </summary>
        /// <param name="searcher">The value for the 'searcher' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="v_GroupForSelect"/> entities.</returns>
        public EntityQuery<v_GroupForSelect> GetV_GroupForSelectWithFilterQuery(string searcher)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("searcher", searcher);
            this.ValidateMethod("GetV_GroupForSelectWithFilterQuery", parameters);
            return base.CreateQuery<v_GroupForSelect>("GetV_GroupForSelectWithFilter", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="v_Section"/> entities using the 'GetV_Section' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="v_Section"/> entities.</returns>
        public EntityQuery<v_Section> GetV_SectionQuery()
        {
            this.ValidateMethod("GetV_SectionQuery", null);
            return base.CreateQuery<v_Section>("GetV_Section", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WorkArea"/> entities using the 'GetWorkAreas' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WorkArea"/> entities.</returns>
        public EntityQuery<WorkArea> GetWorkAreasQuery()
        {
            this.ValidateMethod("GetWorkAreasQuery", null);
            return base.CreateQuery<WorkArea>("GetWorkAreas", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="WorkType"/> entities using the 'GetWorkTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="WorkType"/> entities.</returns>
        public EntityQuery<WorkType> GetWorkTypesQuery()
        {
            this.ValidateMethod("GetWorkTypesQuery", null);
            return base.CreateQuery<WorkType>("GetWorkTypes", null, false, true);
        }
        
        /// <summary>
        /// Creates a new entity container for this domain context's entity sets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new DomainService1EntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'DomainService1' domain service.
        /// </summary>
        [ServiceContract()]
        public interface IDomainService1Contract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GetBlackEvents' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetBlackEventsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetBlackEvents", ReplyAction="http://tempuri.org/DomainService1/GetBlackEventsResponse")]
            [WebGet()]
            IAsyncResult BeginGetBlackEvents(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetBlackEvents'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetBlackEvents'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetBlackEvents' operation.</returns>
            QueryResult<BlackEvent> EndGetBlackEvents(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetComings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetComingsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetComings", ReplyAction="http://tempuri.org/DomainService1/GetComingsResponse")]
            [WebGet()]
            IAsyncResult BeginGetComings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetComings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetComings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetComings' operation.</returns>
            QueryResult<Coming> EndGetComings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetComingsForCheckOutWithOutsider' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetComingsForCheckOutWithOutsiderDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetComingsForCheckOutWithOutsider", ReplyAction="http://tempuri.org/DomainService1/GetComingsForCheckOutWithOutsiderResponse")]
            [WebGet()]
            IAsyncResult BeginGetComingsForCheckOutWithOutsider(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetComingsForCheckOutWithOutsider'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetComingsForCheckOutWithOutsider'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetComingsForCheckOutWithOutsider' operation.</returns>
            QueryResult<Coming> EndGetComingsForCheckOutWithOutsider(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCompanies' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetCompaniesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetCompanies", ReplyAction="http://tempuri.org/DomainService1/GetCompaniesResponse")]
            [WebGet()]
            IAsyncResult BeginGetCompanies(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCompanies'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCompanies'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCompanies' operation.</returns>
            QueryResult<Company> EndGetCompanies(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGroups' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetGroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetGroups", ReplyAction="http://tempuri.org/DomainService1/GetGroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetGroups(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGroups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGroups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGroups' operation.</returns>
            QueryResult<Group> EndGetGroups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetGroupsWithOutsider_Groups' operation.
            /// </summary>
            /// <param name="groupID">The value for the 'groupID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetGroupsWithOutsider_GroupsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetGroupsWithOutsider_Groups", ReplyAction="http://tempuri.org/DomainService1/GetGroupsWithOutsider_GroupsResponse")]
            [WebGet()]
            IAsyncResult BeginGetGroupsWithOutsider_Groups(long groupID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetGroupsWithOutsider_Groups'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetGroupsWithOutsider_Groups'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetGroupsWithOutsider_Groups' operation.</returns>
            QueryResult<Group> EndGetGroupsWithOutsider_Groups(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIdentifierImages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetIdentifierImagesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetIdentifierImages", ReplyAction="http://tempuri.org/DomainService1/GetIdentifierImagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetIdentifierImages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIdentifierImages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIdentifierImages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIdentifierImages' operation.</returns>
            QueryResult<IdentifierImage> EndGetIdentifierImages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIdentifierImagesFromIdentifier' operation.
            /// </summary>
            /// <param name="identifierID">The value for the 'identifierID' parameter of this action.</param>
            /// <param name="identifierTypeID">The value for the 'identifierTypeID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetIdentifierImagesFromIdentifierDomainServiceF" +
                "ault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetIdentifierImagesFromIdentifier", ReplyAction="http://tempuri.org/DomainService1/GetIdentifierImagesFromIdentifierResponse")]
            [WebGet()]
            IAsyncResult BeginGetIdentifierImagesFromIdentifier(string identifierID, short identifierTypeID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIdentifierImagesFromIdentifier'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIdentifierImagesFromIdentifier'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIdentifierImagesFromIdentifier' operation.</returns>
            QueryResult<IdentifierImage> EndGetIdentifierImagesFromIdentifier(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIdentifiers' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetIdentifiersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetIdentifiers", ReplyAction="http://tempuri.org/DomainService1/GetIdentifiersResponse")]
            [WebGet()]
            IAsyncResult BeginGetIdentifiers(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIdentifiers'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIdentifiers'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIdentifiers' operation.</returns>
            QueryResult<Identifier> EndGetIdentifiers(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIdentifiersWithOutsidersAndImages' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetIdentifiersWithOutsidersAndImagesDomainServi" +
                "ceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetIdentifiersWithOutsidersAndImages", ReplyAction="http://tempuri.org/DomainService1/GetIdentifiersWithOutsidersAndImagesResponse")]
            [WebGet()]
            IAsyncResult BeginGetIdentifiersWithOutsidersAndImages(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIdentifiersWithOutsidersAndImages'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIdentifiersWithOutsidersAndImages'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIdentifiersWithOutsidersAndImages' operation.</returns>
            QueryResult<Identifier> EndGetIdentifiersWithOutsidersAndImages(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIdentifiersWithOutsidersFromIdentifierID' operation.
            /// </summary>
            /// <param name="identifierID">The value for the 'identifierID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetIdentifiersWithOutsidersFromIdentifierIDDoma" +
                "inServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetIdentifiersWithOutsidersFromIdentifierID", ReplyAction="http://tempuri.org/DomainService1/GetIdentifiersWithOutsidersFromIdentifierIDResp" +
                "onse")]
            [WebGet()]
            IAsyncResult BeginGetIdentifiersWithOutsidersFromIdentifierID(string identifierID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIdentifiersWithOutsidersFromIdentifierID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIdentifiersWithOutsidersFromIdentifierID'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIdentifiersWithOutsidersFromIdentifierID' operation.</returns>
            QueryResult<Identifier> EndGetIdentifiersWithOutsidersFromIdentifierID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetIdentifierTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetIdentifierTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetIdentifierTypes", ReplyAction="http://tempuri.org/DomainService1/GetIdentifierTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetIdentifierTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetIdentifierTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetIdentifierTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetIdentifierTypes' operation.</returns>
            QueryResult<IdentifierType> EndGetIdentifierTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOutsider_Group' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetOutsider_GroupDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetOutsider_Group", ReplyAction="http://tempuri.org/DomainService1/GetOutsider_GroupResponse")]
            [WebGet()]
            IAsyncResult BeginGetOutsider_Group(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOutsider_Group'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOutsider_Group'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOutsider_Group' operation.</returns>
            QueryResult<Outsider_Group> EndGetOutsider_Group(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOutsiders' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetOutsidersDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetOutsiders", ReplyAction="http://tempuri.org/DomainService1/GetOutsidersResponse")]
            [WebGet()]
            IAsyncResult BeginGetOutsiders(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOutsiders'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOutsiders'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOutsiders' operation.</returns>
            QueryResult<Outsider> EndGetOutsiders(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOutsiders_BlackEvents_Identifiers_Comings' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_ComingsDom" +
                "ainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_Comings", ReplyAction="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_ComingsRes" +
                "ponse")]
            [WebGet()]
            IAsyncResult BeginGetOutsiders_BlackEvents_Identifiers_Comings(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOutsiders_BlackEvents_Identifiers_Comings'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOutsiders_BlackEvents_Identifiers_Comings'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOutsiders_BlackEvents_Identifiers_Comings' operation.</returns>
            QueryResult<Outsider> EndGetOutsiders_BlackEvents_Identifiers_Comings(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOutsiders_BlackEvents_Identifiers_Comings_Filter' operation.
            /// </summary>
            /// <param name="searcher">The value for the 'searcher' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_Comings_Fi" +
                "lterDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_Comings_Fi" +
                "lter", ReplyAction="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_Comings_Fi" +
                "lterResponse")]
            [WebGet()]
            IAsyncResult BeginGetOutsiders_BlackEvents_Identifiers_Comings_Filter(string searcher, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOutsiders_BlackEvents_Identifiers_Comings_Filter'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOutsiders_BlackEvents_Identifiers_Comings_Filter'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOutsiders_BlackEvents_Identifiers_Comings_Filter' operation.</returns>
            QueryResult<Outsider> EndGetOutsiders_BlackEvents_Identifiers_Comings_Filter(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetOutsiders_BlackEvents_Identifiers_Comings_FullFilter' operation.
            /// </summary>
            /// <param name="blackListOnly">The value for the 'blackListOnly' parameter of this action.</param>
            /// <param name="todayOnly">The value for the 'todayOnly' parameter of this action.</param>
            /// <param name="searcher">The value for the 'searcher' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_Comings_Fu" +
                "llFilterDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_Comings_Fu" +
                "llFilter", ReplyAction="http://tempuri.org/DomainService1/GetOutsiders_BlackEvents_Identifiers_Comings_Fu" +
                "llFilterResponse")]
            [WebGet()]
            IAsyncResult BeginGetOutsiders_BlackEvents_Identifiers_Comings_FullFilter(bool blackListOnly, bool todayOnly, string searcher, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetOutsiders_BlackEvents_Identifiers_Comings_FullFilter'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetOutsiders_BlackEvents_Identifiers_Comings_FullFilter'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetOutsiders_BlackEvents_Identifiers_Comings_FullFilter' operation.</returns>
            QueryResult<Outsider> EndGetOutsiders_BlackEvents_Identifiers_Comings_FullFilter(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetV_BlackIdentifierList' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetV_BlackIdentifierListDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetV_BlackIdentifierList", ReplyAction="http://tempuri.org/DomainService1/GetV_BlackIdentifierListResponse")]
            [WebGet()]
            IAsyncResult BeginGetV_BlackIdentifierList(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetV_BlackIdentifierList'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetV_BlackIdentifierList'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetV_BlackIdentifierList' operation.</returns>
            QueryResult<v_BlackIdentifierList> EndGetV_BlackIdentifierList(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetV_BlackInnerContractor' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetV_BlackInnerContractorDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetV_BlackInnerContractor", ReplyAction="http://tempuri.org/DomainService1/GetV_BlackInnerContractorResponse")]
            [WebGet()]
            IAsyncResult BeginGetV_BlackInnerContractor(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetV_BlackInnerContractor'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetV_BlackInnerContractor'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetV_BlackInnerContractor' operation.</returns>
            QueryResult<v_BlackInnerContractor> EndGetV_BlackInnerContractor(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetV_Employee' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetV_EmployeeDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetV_Employee", ReplyAction="http://tempuri.org/DomainService1/GetV_EmployeeResponse")]
            [WebGet()]
            IAsyncResult BeginGetV_Employee(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetV_Employee'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetV_Employee'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetV_Employee' operation.</returns>
            QueryResult<v_Employee> EndGetV_Employee(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetV_GroupForSelect' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetV_GroupForSelectDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetV_GroupForSelect", ReplyAction="http://tempuri.org/DomainService1/GetV_GroupForSelectResponse")]
            [WebGet()]
            IAsyncResult BeginGetV_GroupForSelect(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetV_GroupForSelect'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetV_GroupForSelect'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetV_GroupForSelect' operation.</returns>
            QueryResult<v_GroupForSelect> EndGetV_GroupForSelect(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetV_GroupForSelectWithFilter' operation.
            /// </summary>
            /// <param name="searcher">The value for the 'searcher' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetV_GroupForSelectWithFilterDomainServiceFault" +
                "", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetV_GroupForSelectWithFilter", ReplyAction="http://tempuri.org/DomainService1/GetV_GroupForSelectWithFilterResponse")]
            [WebGet()]
            IAsyncResult BeginGetV_GroupForSelectWithFilter(string searcher, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetV_GroupForSelectWithFilter'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetV_GroupForSelectWithFilter'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetV_GroupForSelectWithFilter' operation.</returns>
            QueryResult<v_GroupForSelect> EndGetV_GroupForSelectWithFilter(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetV_Section' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetV_SectionDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetV_Section", ReplyAction="http://tempuri.org/DomainService1/GetV_SectionResponse")]
            [WebGet()]
            IAsyncResult BeginGetV_Section(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetV_Section'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetV_Section'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetV_Section' operation.</returns>
            QueryResult<v_Section> EndGetV_Section(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWorkAreas' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetWorkAreasDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetWorkAreas", ReplyAction="http://tempuri.org/DomainService1/GetWorkAreasResponse")]
            [WebGet()]
            IAsyncResult BeginGetWorkAreas(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWorkAreas'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWorkAreas'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWorkAreas' operation.</returns>
            QueryResult<WorkArea> EndGetWorkAreas(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetWorkTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/GetWorkTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/GetWorkTypes", ReplyAction="http://tempuri.org/DomainService1/GetWorkTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetWorkTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetWorkTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetWorkTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetWorkTypes' operation.</returns>
            QueryResult<WorkType> EndGetWorkTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/DomainService1/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/DomainService1/SubmitChanges", ReplyAction="http://tempuri.org/DomainService1/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class DomainService1EntityContainer : EntityContainer
        {
            
            public DomainService1EntityContainer()
            {
                this.CreateEntitySet<BlackEvent>(EntitySetOperations.All);
                this.CreateEntitySet<Coming>(EntitySetOperations.All);
                this.CreateEntitySet<Company>(EntitySetOperations.All);
                this.CreateEntitySet<Group>(EntitySetOperations.All);
                this.CreateEntitySet<Identifier>(EntitySetOperations.All);
                this.CreateEntitySet<IdentifierImage>(EntitySetOperations.All);
                this.CreateEntitySet<IdentifierType>(EntitySetOperations.All);
                this.CreateEntitySet<Outsider>(EntitySetOperations.All);
                this.CreateEntitySet<Outsider_Group>(EntitySetOperations.All);
                this.CreateEntitySet<v_BlackIdentifierList>(EntitySetOperations.All);
                this.CreateEntitySet<v_BlackInnerContractor>(EntitySetOperations.All);
                this.CreateEntitySet<v_Employee>(EntitySetOperations.All);
                this.CreateEntitySet<v_GroupForSelect>(EntitySetOperations.All);
                this.CreateEntitySet<v_Section>(EntitySetOperations.All);
                this.CreateEntitySet<WorkArea>(EntitySetOperations.All);
                this.CreateEntitySet<WorkType>(EntitySetOperations.All);
            }
        }
    }
    
    /// <summary>
    /// The 'Group' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class Group : Entity
    {
        
        private long _agentID;
        
        private string _agentTelephoneNo;
        
        private EntityRef<Company> _company;
        
        private long _companyID;
        
        private string _emergencyCallNo;
        
        private string _emergencyContact;
        
        private string _engineerEMPID;
        
        private long _groupID;
        
        private EntityRef<Outsider> _outsider;
        
        private EntityCollection<Outsider_Group> _outsider_Group;
        
        private DateTime _timeIn;
        
        private string _workArea;
        
        private string _workType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAgentIDChanging(long value);
        partial void OnAgentIDChanged();
        partial void OnAgentTelephoneNoChanging(string value);
        partial void OnAgentTelephoneNoChanged();
        partial void OnCompanyIDChanging(long value);
        partial void OnCompanyIDChanged();
        partial void OnEmergencyCallNoChanging(string value);
        partial void OnEmergencyCallNoChanged();
        partial void OnEmergencyContactChanging(string value);
        partial void OnEmergencyContactChanged();
        partial void OnEngineerEMPIDChanging(string value);
        partial void OnEngineerEMPIDChanged();
        partial void OnGroupIDChanging(long value);
        partial void OnGroupIDChanged();
        partial void OnTimeInChanging(DateTime value);
        partial void OnTimeInChanged();
        partial void OnWorkAreaChanging(string value);
        partial void OnWorkAreaChanged();
        partial void OnWorkTypeChanging(string value);
        partial void OnWorkTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Group"/> class.
        /// </summary>
        public Group()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AgentID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long AgentID
        {
            get
            {
                return this._agentID;
            }
            set
            {
                if ((this._agentID != value))
                {
                    this.OnAgentIDChanging(value);
                    this.RaiseDataMemberChanging("AgentID");
                    this.ValidateProperty("AgentID", value);
                    this._agentID = value;
                    this.RaiseDataMemberChanged("AgentID");
                    this.OnAgentIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgentTelephoneNo' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(20)]
        public string AgentTelephoneNo
        {
            get
            {
                return this._agentTelephoneNo;
            }
            set
            {
                if ((this._agentTelephoneNo != value))
                {
                    this.OnAgentTelephoneNoChanging(value);
                    this.RaiseDataMemberChanging("AgentTelephoneNo");
                    this.ValidateProperty("AgentTelephoneNo", value);
                    this._agentTelephoneNo = value;
                    this.RaiseDataMemberChanged("AgentTelephoneNo");
                    this.OnAgentTelephoneNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Company"/> entity.
        /// </summary>
        [Association("Company_Group", "CompanyID", "CompanyID", IsForeignKey=true)]
        [XmlIgnore()]
        public Company Company
        {
            get
            {
                if ((this._company == null))
                {
                    this._company = new EntityRef<Company>(this, "Company", this.FilterCompany);
                }
                return this._company.Entity;
            }
            set
            {
                Company previous = this.Company;
                if ((previous != value))
                {
                    this.ValidateProperty("Company", value);
                    if ((previous != null))
                    {
                        this._company.Entity = null;
                        previous.Groups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.CompanyID = value.CompanyID;
                    }
                    else
                    {
                        this.CompanyID = default(long);
                    }
                    this._company.Entity = value;
                    if ((value != null))
                    {
                        value.Groups.Add(this);
                    }
                    this.RaisePropertyChanged("Company");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long CompanyID
        {
            get
            {
                return this._companyID;
            }
            set
            {
                if ((this._companyID != value))
                {
                    this.OnCompanyIDChanging(value);
                    this.RaiseDataMemberChanging("CompanyID");
                    this.ValidateProperty("CompanyID", value);
                    this._companyID = value;
                    this.RaiseDataMemberChanged("CompanyID");
                    this.OnCompanyIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmergencyCallNo' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string EmergencyCallNo
        {
            get
            {
                return this._emergencyCallNo;
            }
            set
            {
                if ((this._emergencyCallNo != value))
                {
                    this.OnEmergencyCallNoChanging(value);
                    this.RaiseDataMemberChanging("EmergencyCallNo");
                    this.ValidateProperty("EmergencyCallNo", value);
                    this._emergencyCallNo = value;
                    this.RaiseDataMemberChanged("EmergencyCallNo");
                    this.OnEmergencyCallNoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EmergencyContact' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EmergencyContact
        {
            get
            {
                return this._emergencyContact;
            }
            set
            {
                if ((this._emergencyContact != value))
                {
                    this.OnEmergencyContactChanging(value);
                    this.RaiseDataMemberChanging("EmergencyContact");
                    this.ValidateProperty("EmergencyContact", value);
                    this._emergencyContact = value;
                    this.RaiseDataMemberChanged("EmergencyContact");
                    this.OnEmergencyContactChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EngineerEMPID' value.
        /// </summary>
        [DataMember()]
        [StringLength(15)]
        public string EngineerEMPID
        {
            get
            {
                return this._engineerEMPID;
            }
            set
            {
                if ((this._engineerEMPID != value))
                {
                    this.OnEngineerEMPIDChanging(value);
                    this.RaiseDataMemberChanging("EngineerEMPID");
                    this.ValidateProperty("EngineerEMPID", value);
                    this._engineerEMPID = value;
                    this.RaiseDataMemberChanged("EngineerEMPID");
                    this.OnEngineerEMPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long GroupID
        {
            get
            {
                return this._groupID;
            }
            set
            {
                if ((this._groupID != value))
                {
                    this.OnGroupIDChanging(value);
                    this.ValidateProperty("GroupID", value);
                    this._groupID = value;
                    this.RaisePropertyChanged("GroupID");
                    this.OnGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Outsider"/> entity.
        /// </summary>
        [Association("Outsider_Group", "AgentID", "OutsiderID", IsForeignKey=true)]
        [XmlIgnore()]
        public Outsider Outsider
        {
            get
            {
                if ((this._outsider == null))
                {
                    this._outsider = new EntityRef<Outsider>(this, "Outsider", this.FilterOutsider);
                }
                return this._outsider.Entity;
            }
            set
            {
                Outsider previous = this.Outsider;
                if ((previous != value))
                {
                    this.ValidateProperty("Outsider", value);
                    if ((previous != null))
                    {
                        this._outsider.Entity = null;
                        previous.Groups.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.AgentID = value.OutsiderID;
                    }
                    else
                    {
                        this.AgentID = default(long);
                    }
                    this._outsider.Entity = value;
                    if ((value != null))
                    {
                        value.Groups.Add(this);
                    }
                    this.RaisePropertyChanged("Outsider");
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Outsider_Group"/> entities.
        /// </summary>
        [Association("Group_Outsider_Group", "GroupID", "GroupID")]
        [XmlIgnore()]
        public EntityCollection<Outsider_Group> Outsider_Group
        {
            get
            {
                if ((this._outsider_Group == null))
                {
                    this._outsider_Group = new EntityCollection<Outsider_Group>(this, "Outsider_Group", this.FilterOutsider_Group, this.AttachOutsider_Group, this.DetachOutsider_Group);
                }
                return this._outsider_Group;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeIn' value.
        /// </summary>
        [DataMember()]
        public DateTime TimeIn
        {
            get
            {
                return this._timeIn;
            }
            set
            {
                if ((this._timeIn != value))
                {
                    this.OnTimeInChanging(value);
                    this.RaiseDataMemberChanging("TimeIn");
                    this.ValidateProperty("TimeIn", value);
                    this._timeIn = value;
                    this.RaiseDataMemberChanged("TimeIn");
                    this.OnTimeInChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkArea' value.
        /// </summary>
        [DataMember()]
        public string WorkArea
        {
            get
            {
                return this._workArea;
            }
            set
            {
                if ((this._workArea != value))
                {
                    this.OnWorkAreaChanging(value);
                    this.RaiseDataMemberChanging("WorkArea");
                    this.ValidateProperty("WorkArea", value);
                    this._workArea = value;
                    this.RaiseDataMemberChanged("WorkArea");
                    this.OnWorkAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkType' value.
        /// </summary>
        [DataMember()]
        public string WorkType
        {
            get
            {
                return this._workType;
            }
            set
            {
                if ((this._workType != value))
                {
                    this.OnWorkTypeChanging(value);
                    this.RaiseDataMemberChanging("WorkType");
                    this.ValidateProperty("WorkType", value);
                    this._workType = value;
                    this.RaiseDataMemberChanged("WorkType");
                    this.OnWorkTypeChanged();
                }
            }
        }
        
        private bool FilterCompany(Company entity)
        {
            return (entity.CompanyID == this.CompanyID);
        }
        
        private bool FilterOutsider(Outsider entity)
        {
            return (entity.OutsiderID == this.AgentID);
        }
        
        private void AttachOutsider_Group(Outsider_Group entity)
        {
            entity.Group = this;
        }
        
        private void DetachOutsider_Group(Outsider_Group entity)
        {
            entity.Group = null;
        }
        
        private bool FilterOutsider_Group(Outsider_Group entity)
        {
            return (entity.GroupID == this.GroupID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._groupID;
        }
    }
    
    /// <summary>
    /// The 'Identifier' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class Identifier : Entity
    {
        
        private string _detail;
        
        private bool _haveCopy;
        
        private string _identifierID;
        
        private EntityCollection<IdentifierImage> _identifierImages;
        
        private EntityRef<IdentifierType> _identifierType;
        
        private short _identifierTypeID;
        
        private EntityRef<Outsider> _outsider;
        
        private long _outsiderID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDetailChanging(string value);
        partial void OnDetailChanged();
        partial void OnHaveCopyChanging(bool value);
        partial void OnHaveCopyChanged();
        partial void OnIdentifierIDChanging(string value);
        partial void OnIdentifierIDChanged();
        partial void OnIdentifierTypeIDChanging(short value);
        partial void OnIdentifierTypeIDChanged();
        partial void OnOutsiderIDChanging(long value);
        partial void OnOutsiderIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Identifier"/> class.
        /// </summary>
        public Identifier()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Detail' value.
        /// </summary>
        [DataMember()]
        public string Detail
        {
            get
            {
                return this._detail;
            }
            set
            {
                if ((this._detail != value))
                {
                    this.OnDetailChanging(value);
                    this.RaiseDataMemberChanging("Detail");
                    this.ValidateProperty("Detail", value);
                    this._detail = value;
                    this.RaiseDataMemberChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'HaveCopy' value.
        /// </summary>
        [DataMember()]
        public bool HaveCopy
        {
            get
            {
                return this._haveCopy;
            }
            set
            {
                if ((this._haveCopy != value))
                {
                    this.OnHaveCopyChanging(value);
                    this.RaiseDataMemberChanging("HaveCopy");
                    this.ValidateProperty("HaveCopy", value);
                    this._haveCopy = value;
                    this.RaiseDataMemberChanged("HaveCopy");
                    this.OnHaveCopyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdentifierID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string IdentifierID
        {
            get
            {
                return this._identifierID;
            }
            set
            {
                if ((this._identifierID != value))
                {
                    this.OnIdentifierIDChanging(value);
                    this.RaiseDataMemberChanging("IdentifierID");
                    this.ValidateProperty("IdentifierID", value);
                    this._identifierID = value;
                    this.RaiseDataMemberChanged("IdentifierID");
                    this.OnIdentifierIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="IdentifierImage"/> entities.
        /// </summary>
        [Association("Identifier_IdentifierImage", "IdentifierID,IdentifierTypeID", "IdentifierID,IdentifierTypeID")]
        [XmlIgnore()]
        public EntityCollection<IdentifierImage> IdentifierImages
        {
            get
            {
                if ((this._identifierImages == null))
                {
                    this._identifierImages = new EntityCollection<IdentifierImage>(this, "IdentifierImages", this.FilterIdentifierImages, this.AttachIdentifierImages, this.DetachIdentifierImages);
                }
                return this._identifierImages;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="IdentifierType"/> entity.
        /// </summary>
        [Association("IdentifierType_Identifier", "IdentifierTypeID", "IdentifierTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public IdentifierType IdentifierType
        {
            get
            {
                if ((this._identifierType == null))
                {
                    this._identifierType = new EntityRef<IdentifierType>(this, "IdentifierType", this.FilterIdentifierType);
                }
                return this._identifierType.Entity;
            }
            set
            {
                IdentifierType previous = this.IdentifierType;
                if ((previous != value))
                {
                    this.ValidateProperty("IdentifierType", value);
                    if ((previous != null))
                    {
                        this._identifierType.Entity = null;
                        previous.Identifiers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdentifierTypeID = value.IdentifierTypeID;
                    }
                    else
                    {
                        this.IdentifierTypeID = default(short);
                    }
                    this._identifierType.Entity = value;
                    if ((value != null))
                    {
                        value.Identifiers.Add(this);
                    }
                    this.RaisePropertyChanged("IdentifierType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdentifierTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public short IdentifierTypeID
        {
            get
            {
                return this._identifierTypeID;
            }
            set
            {
                if ((this._identifierTypeID != value))
                {
                    this.OnIdentifierTypeIDChanging(value);
                    this.RaiseDataMemberChanging("IdentifierTypeID");
                    this.ValidateProperty("IdentifierTypeID", value);
                    this._identifierTypeID = value;
                    this.RaiseDataMemberChanged("IdentifierTypeID");
                    this.OnIdentifierTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Outsider"/> entity.
        /// </summary>
        [Association("Outsider_Identifier", "OutsiderID", "OutsiderID", IsForeignKey=true)]
        [XmlIgnore()]
        public Outsider Outsider
        {
            get
            {
                if ((this._outsider == null))
                {
                    this._outsider = new EntityRef<Outsider>(this, "Outsider", this.FilterOutsider);
                }
                return this._outsider.Entity;
            }
            set
            {
                Outsider previous = this.Outsider;
                if ((previous != value))
                {
                    this.ValidateProperty("Outsider", value);
                    if ((previous != null))
                    {
                        this._outsider.Entity = null;
                        previous.Identifiers.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OutsiderID = value.OutsiderID;
                    }
                    else
                    {
                        this.OutsiderID = default(long);
                    }
                    this._outsider.Entity = value;
                    if ((value != null))
                    {
                        value.Identifiers.Add(this);
                    }
                    this.RaisePropertyChanged("Outsider");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutsiderID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public long OutsiderID
        {
            get
            {
                return this._outsiderID;
            }
            set
            {
                if ((this._outsiderID != value))
                {
                    this.OnOutsiderIDChanging(value);
                    this.RaiseDataMemberChanging("OutsiderID");
                    this.ValidateProperty("OutsiderID", value);
                    this._outsiderID = value;
                    this.RaiseDataMemberChanged("OutsiderID");
                    this.OnOutsiderIDChanged();
                }
            }
        }
        
        private void AttachIdentifierImages(IdentifierImage entity)
        {
            entity.Identifier = this;
        }
        
        private void DetachIdentifierImages(IdentifierImage entity)
        {
            entity.Identifier = null;
        }
        
        private bool FilterIdentifierImages(IdentifierImage entity)
        {
            return ((entity.IdentifierID == this.IdentifierID) 
                        && (entity.IdentifierTypeID == this.IdentifierTypeID));
        }
        
        private bool FilterIdentifierType(IdentifierType entity)
        {
            return (entity.IdentifierTypeID == this.IdentifierTypeID);
        }
        
        private bool FilterOutsider(Outsider entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._identifierID, this._identifierTypeID);
        }
    }
    
    /// <summary>
    /// The 'IdentifierImage' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class IdentifierImage : Entity
    {
        
        private string _fileName;
        
        private EntityRef<Identifier> _identifier;
        
        private string _identifierID;
        
        private short _identifierTypeID;
        
        private bool _isCropped;
        
        private DateTime _snapDateTime;
        
        private string _specificType;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnIdentifierIDChanging(string value);
        partial void OnIdentifierIDChanged();
        partial void OnIdentifierTypeIDChanging(short value);
        partial void OnIdentifierTypeIDChanged();
        partial void OnIsCroppedChanging(bool value);
        partial void OnIsCroppedChanged();
        partial void OnSnapDateTimeChanging(DateTime value);
        partial void OnSnapDateTimeChanged();
        partial void OnSpecificTypeChanging(string value);
        partial void OnSpecificTypeChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierImage"/> class.
        /// </summary>
        public IdentifierImage()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FileName' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.RaiseDataMemberChanging("FileName");
                    this.ValidateProperty("FileName", value);
                    this._fileName = value;
                    this.RaiseDataMemberChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Identifier"/> entity.
        /// </summary>
        [Association("Identifier_IdentifierImage", "IdentifierID,IdentifierTypeID", "IdentifierID,IdentifierTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public Identifier Identifier
        {
            get
            {
                if ((this._identifier == null))
                {
                    this._identifier = new EntityRef<Identifier>(this, "Identifier", this.FilterIdentifier);
                }
                return this._identifier.Entity;
            }
            set
            {
                Identifier previous = this.Identifier;
                if ((previous != value))
                {
                    this.ValidateProperty("Identifier", value);
                    if ((previous != null))
                    {
                        this._identifier.Entity = null;
                        previous.IdentifierImages.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.IdentifierID = value.IdentifierID;
                        this.IdentifierTypeID = value.IdentifierTypeID;
                    }
                    else
                    {
                        this.IdentifierID = default(string);
                        this.IdentifierTypeID = default(short);
                    }
                    this._identifier.Entity = value;
                    if ((value != null))
                    {
                        value.IdentifierImages.Add(this);
                    }
                    this.RaisePropertyChanged("Identifier");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdentifierID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string IdentifierID
        {
            get
            {
                return this._identifierID;
            }
            set
            {
                if ((this._identifierID != value))
                {
                    this.OnIdentifierIDChanging(value);
                    this.RaiseDataMemberChanging("IdentifierID");
                    this.ValidateProperty("IdentifierID", value);
                    this._identifierID = value;
                    this.RaiseDataMemberChanged("IdentifierID");
                    this.OnIdentifierIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdentifierTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public short IdentifierTypeID
        {
            get
            {
                return this._identifierTypeID;
            }
            set
            {
                if ((this._identifierTypeID != value))
                {
                    this.OnIdentifierTypeIDChanging(value);
                    this.RaiseDataMemberChanging("IdentifierTypeID");
                    this.ValidateProperty("IdentifierTypeID", value);
                    this._identifierTypeID = value;
                    this.RaiseDataMemberChanged("IdentifierTypeID");
                    this.OnIdentifierTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IsCropped' value.
        /// </summary>
        [DataMember()]
        public bool IsCropped
        {
            get
            {
                return this._isCropped;
            }
            set
            {
                if ((this._isCropped != value))
                {
                    this.OnIsCroppedChanging(value);
                    this.RaiseDataMemberChanging("IsCropped");
                    this.ValidateProperty("IsCropped", value);
                    this._isCropped = value;
                    this.RaiseDataMemberChanged("IsCropped");
                    this.OnIsCroppedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SnapDateTime' value.
        /// </summary>
        [DataMember()]
        public DateTime SnapDateTime
        {
            get
            {
                return this._snapDateTime;
            }
            set
            {
                if ((this._snapDateTime != value))
                {
                    this.OnSnapDateTimeChanging(value);
                    this.RaiseDataMemberChanging("SnapDateTime");
                    this.ValidateProperty("SnapDateTime", value);
                    this._snapDateTime = value;
                    this.RaiseDataMemberChanged("SnapDateTime");
                    this.OnSnapDateTimeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SpecificType' value.
        /// </summary>
        [DataMember()]
        public string SpecificType
        {
            get
            {
                return this._specificType;
            }
            set
            {
                if ((this._specificType != value))
                {
                    this.OnSpecificTypeChanging(value);
                    this.RaiseDataMemberChanging("SpecificType");
                    this.ValidateProperty("SpecificType", value);
                    this._specificType = value;
                    this.RaiseDataMemberChanged("SpecificType");
                    this.OnSpecificTypeChanged();
                }
            }
        }
        
        private bool FilterIdentifier(Identifier entity)
        {
            return ((entity.IdentifierID == this.IdentifierID) 
                        && (entity.IdentifierTypeID == this.IdentifierTypeID));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if (((this._fileName == null) 
                        || (this._identifierID == null)))
            {
                return null;
            }
            return EntityKey.Create(this._fileName, this._identifierID, this._identifierTypeID);
        }
    }
    
    /// <summary>
    /// The 'IdentifierType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class IdentifierType : Entity
    {
        
        private string _detail;
        
        private EntityCollection<Identifier> _identifiers;
        
        private short _identifierTypeID;
        
        private short _idLength;
        
        private bool _isFixedLength;
        
        private string _name;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDetailChanging(string value);
        partial void OnDetailChanged();
        partial void OnIdentifierTypeIDChanging(short value);
        partial void OnIdentifierTypeIDChanged();
        partial void OnIDLengthChanging(short value);
        partial void OnIDLengthChanged();
        partial void OnisFixedLengthChanging(bool value);
        partial void OnisFixedLengthChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifierType"/> class.
        /// </summary>
        public IdentifierType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Detail' value.
        /// </summary>
        [DataMember()]
        public string Detail
        {
            get
            {
                return this._detail;
            }
            set
            {
                if ((this._detail != value))
                {
                    this.OnDetailChanging(value);
                    this.RaiseDataMemberChanging("Detail");
                    this.ValidateProperty("Detail", value);
                    this._detail = value;
                    this.RaiseDataMemberChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Identifier"/> entities.
        /// </summary>
        [Association("IdentifierType_Identifier", "IdentifierTypeID", "IdentifierTypeID")]
        [XmlIgnore()]
        public EntityCollection<Identifier> Identifiers
        {
            get
            {
                if ((this._identifiers == null))
                {
                    this._identifiers = new EntityCollection<Identifier>(this, "Identifiers", this.FilterIdentifiers, this.AttachIdentifiers, this.DetachIdentifiers);
                }
                return this._identifiers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdentifierTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public short IdentifierTypeID
        {
            get
            {
                return this._identifierTypeID;
            }
            set
            {
                if ((this._identifierTypeID != value))
                {
                    this.OnIdentifierTypeIDChanging(value);
                    this.ValidateProperty("IdentifierTypeID", value);
                    this._identifierTypeID = value;
                    this.RaisePropertyChanged("IdentifierTypeID");
                    this.OnIdentifierTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IDLength' value.
        /// </summary>
        [DataMember()]
        public short IDLength
        {
            get
            {
                return this._idLength;
            }
            set
            {
                if ((this._idLength != value))
                {
                    this.OnIDLengthChanging(value);
                    this.RaiseDataMemberChanging("IDLength");
                    this.ValidateProperty("IDLength", value);
                    this._idLength = value;
                    this.RaiseDataMemberChanged("IDLength");
                    this.OnIDLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isFixedLength' value.
        /// </summary>
        [DataMember()]
        public bool isFixedLength
        {
            get
            {
                return this._isFixedLength;
            }
            set
            {
                if ((this._isFixedLength != value))
                {
                    this.OnisFixedLengthChanging(value);
                    this.RaiseDataMemberChanging("isFixedLength");
                    this.ValidateProperty("isFixedLength", value);
                    this._isFixedLength = value;
                    this.RaiseDataMemberChanged("isFixedLength");
                    this.OnisFixedLengthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        private void AttachIdentifiers(Identifier entity)
        {
            entity.IdentifierType = this;
        }
        
        private void DetachIdentifiers(Identifier entity)
        {
            entity.IdentifierType = null;
        }
        
        private bool FilterIdentifiers(Identifier entity)
        {
            return (entity.IdentifierTypeID == this.IdentifierTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._identifierTypeID;
        }
    }
    
    /// <summary>
    /// The 'Outsider' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class Outsider : Entity
    {
        
        private EntityCollection<BlackEvent> _blackEvents;
        
        private EntityCollection<Coming> _comings;
        
        private EntityCollection<Group> _groups;
        
        private EntityCollection<Identifier> _identifiers;
        
        private string _name;
        
        private EntityCollection<Outsider_Group> _outsider_Group;
        
        private long _outsiderID;
        
        private string _sName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnOutsiderIDChanging(long value);
        partial void OnOutsiderIDChanged();
        partial void OnSNameChanging(string value);
        partial void OnSNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Outsider"/> class.
        /// </summary>
        public Outsider()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="BlackEvent"/> entities.
        /// </summary>
        [Association("Outsider_BlackEvent", "OutsiderID", "OutsiderID")]
        [XmlIgnore()]
        public EntityCollection<BlackEvent> BlackEvents
        {
            get
            {
                if ((this._blackEvents == null))
                {
                    this._blackEvents = new EntityCollection<BlackEvent>(this, "BlackEvents", this.FilterBlackEvents, this.AttachBlackEvents, this.DetachBlackEvents);
                }
                return this._blackEvents;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Coming"/> entities.
        /// </summary>
        [Association("Outsider_Coming", "OutsiderID", "OutsiderID")]
        [XmlIgnore()]
        public EntityCollection<Coming> Comings
        {
            get
            {
                if ((this._comings == null))
                {
                    this._comings = new EntityCollection<Coming>(this, "Comings", this.FilterComings, this.AttachComings, this.DetachComings);
                }
                return this._comings;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Group"/> entities.
        /// </summary>
        [Association("Outsider_Group", "OutsiderID", "AgentID")]
        [XmlIgnore()]
        public EntityCollection<Group> Groups
        {
            get
            {
                if ((this._groups == null))
                {
                    this._groups = new EntityCollection<Group>(this, "Groups", this.FilterGroups, this.AttachGroups, this.DetachGroups);
                }
                return this._groups;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Identifier"/> entities.
        /// </summary>
        [Association("Outsider_Identifier", "OutsiderID", "OutsiderID")]
        [XmlIgnore()]
        public EntityCollection<Identifier> Identifiers
        {
            get
            {
                if ((this._identifiers == null))
                {
                    this._identifiers = new EntityCollection<Identifier>(this, "Identifiers", this.FilterIdentifiers, this.AttachIdentifiers, this.DetachIdentifiers);
                }
                return this._identifiers;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="Outsider_Group"/> entities.
        /// </summary>
        [Association("Outsider_Outsider_Group", "OutsiderID", "OutsiderID")]
        [XmlIgnore()]
        public EntityCollection<Outsider_Group> Outsider_Group
        {
            get
            {
                if ((this._outsider_Group == null))
                {
                    this._outsider_Group = new EntityCollection<Outsider_Group>(this, "Outsider_Group", this.FilterOutsider_Group, this.AttachOutsider_Group, this.DetachOutsider_Group);
                }
                return this._outsider_Group;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutsiderID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long OutsiderID
        {
            get
            {
                return this._outsiderID;
            }
            set
            {
                if ((this._outsiderID != value))
                {
                    this.OnOutsiderIDChanging(value);
                    this.ValidateProperty("OutsiderID", value);
                    this._outsiderID = value;
                    this.RaisePropertyChanged("OutsiderID");
                    this.OnOutsiderIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string SName
        {
            get
            {
                return this._sName;
            }
            set
            {
                if ((this._sName != value))
                {
                    this.OnSNameChanging(value);
                    this.RaiseDataMemberChanging("SName");
                    this.ValidateProperty("SName", value);
                    this._sName = value;
                    this.RaiseDataMemberChanged("SName");
                    this.OnSNameChanged();
                }
            }
        }
        
        private void AttachBlackEvents(BlackEvent entity)
        {
            entity.Outsider = this;
        }
        
        private void DetachBlackEvents(BlackEvent entity)
        {
            entity.Outsider = null;
        }
        
        private bool FilterBlackEvents(BlackEvent entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        private void AttachComings(Coming entity)
        {
            entity.Outsider = this;
        }
        
        private void DetachComings(Coming entity)
        {
            entity.Outsider = null;
        }
        
        private bool FilterComings(Coming entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        private void AttachGroups(Group entity)
        {
            entity.Outsider = this;
        }
        
        private void DetachGroups(Group entity)
        {
            entity.Outsider = null;
        }
        
        private bool FilterGroups(Group entity)
        {
            return (entity.AgentID == this.OutsiderID);
        }
        
        private void AttachIdentifiers(Identifier entity)
        {
            entity.Outsider = this;
        }
        
        private void DetachIdentifiers(Identifier entity)
        {
            entity.Outsider = null;
        }
        
        private bool FilterIdentifiers(Identifier entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        private void AttachOutsider_Group(Outsider_Group entity)
        {
            entity.Outsider = this;
        }
        
        private void DetachOutsider_Group(Outsider_Group entity)
        {
            entity.Outsider = null;
        }
        
        private bool FilterOutsider_Group(Outsider_Group entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._outsiderID;
        }
    }
    
    /// <summary>
    /// The 'Outsider_Group' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class Outsider_Group : Entity
    {
        
        private EntityRef<Group> _group;
        
        private long _groupID;
        
        private bool _havePhoto;
        
        private bool _isPassed;
        
        private EntityRef<Outsider> _outsider;
        
        private long _outsiderID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnGroupIDChanging(long value);
        partial void OnGroupIDChanged();
        partial void OnhavePhotoChanging(bool value);
        partial void OnhavePhotoChanged();
        partial void OnisPassedChanging(bool value);
        partial void OnisPassedChanged();
        partial void OnOutsiderIDChanging(long value);
        partial void OnOutsiderIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="Outsider_Group"/> class.
        /// </summary>
        public Outsider_Group()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Group"/> entity.
        /// </summary>
        [Association("Group_Outsider_Group", "GroupID", "GroupID", IsForeignKey=true)]
        [XmlIgnore()]
        public Group Group
        {
            get
            {
                if ((this._group == null))
                {
                    this._group = new EntityRef<Group>(this, "Group", this.FilterGroup);
                }
                return this._group.Entity;
            }
            set
            {
                Group previous = this.Group;
                if ((previous != value))
                {
                    this.ValidateProperty("Group", value);
                    if ((previous != null))
                    {
                        this._group.Entity = null;
                        previous.Outsider_Group.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.GroupID = value.GroupID;
                    }
                    else
                    {
                        this.GroupID = default(long);
                    }
                    this._group.Entity = value;
                    if ((value != null))
                    {
                        value.Outsider_Group.Add(this);
                    }
                    this.RaisePropertyChanged("Group");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long GroupID
        {
            get
            {
                return this._groupID;
            }
            set
            {
                if ((this._groupID != value))
                {
                    this.OnGroupIDChanging(value);
                    this.RaiseDataMemberChanging("GroupID");
                    this.ValidateProperty("GroupID", value);
                    this._groupID = value;
                    this.RaiseDataMemberChanged("GroupID");
                    this.OnGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'havePhoto' value.
        /// </summary>
        [DataMember()]
        public bool havePhoto
        {
            get
            {
                return this._havePhoto;
            }
            set
            {
                if ((this._havePhoto != value))
                {
                    this.OnhavePhotoChanging(value);
                    this.RaiseDataMemberChanging("havePhoto");
                    this.ValidateProperty("havePhoto", value);
                    this._havePhoto = value;
                    this.RaiseDataMemberChanged("havePhoto");
                    this.OnhavePhotoChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'isPassed' value.
        /// </summary>
        [DataMember()]
        public bool isPassed
        {
            get
            {
                return this._isPassed;
            }
            set
            {
                if ((this._isPassed != value))
                {
                    this.OnisPassedChanging(value);
                    this.RaiseDataMemberChanging("isPassed");
                    this.ValidateProperty("isPassed", value);
                    this._isPassed = value;
                    this.RaiseDataMemberChanged("isPassed");
                    this.OnisPassedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="Outsider"/> entity.
        /// </summary>
        [Association("Outsider_Outsider_Group", "OutsiderID", "OutsiderID", IsForeignKey=true)]
        [XmlIgnore()]
        public Outsider Outsider
        {
            get
            {
                if ((this._outsider == null))
                {
                    this._outsider = new EntityRef<Outsider>(this, "Outsider", this.FilterOutsider);
                }
                return this._outsider.Entity;
            }
            set
            {
                Outsider previous = this.Outsider;
                if ((previous != value))
                {
                    this.ValidateProperty("Outsider", value);
                    if ((previous != null))
                    {
                        this._outsider.Entity = null;
                        previous.Outsider_Group.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.OutsiderID = value.OutsiderID;
                    }
                    else
                    {
                        this.OutsiderID = default(long);
                    }
                    this._outsider.Entity = value;
                    if ((value != null))
                    {
                        value.Outsider_Group.Add(this);
                    }
                    this.RaisePropertyChanged("Outsider");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'OutsiderID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public long OutsiderID
        {
            get
            {
                return this._outsiderID;
            }
            set
            {
                if ((this._outsiderID != value))
                {
                    this.OnOutsiderIDChanging(value);
                    this.RaiseDataMemberChanging("OutsiderID");
                    this.ValidateProperty("OutsiderID", value);
                    this._outsiderID = value;
                    this.RaiseDataMemberChanged("OutsiderID");
                    this.OnOutsiderIDChanged();
                }
            }
        }
        
        private bool FilterGroup(Group entity)
        {
            return (entity.GroupID == this.GroupID);
        }
        
        private bool FilterOutsider(Outsider entity)
        {
            return (entity.OutsiderID == this.OutsiderID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._groupID, this._outsiderID);
        }
    }
    
    /// <summary>
    /// The 'v_BlackIdentifierList' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class v_BlackIdentifierList : Entity
    {
        
        private string _identifierID;
        
        private int _identifierTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnIdentifierIDChanging(string value);
        partial void OnIdentifierIDChanged();
        partial void OnIdentifierTypeIDChanging(int value);
        partial void OnIdentifierTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="v_BlackIdentifierList"/> class.
        /// </summary>
        public v_BlackIdentifierList()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'IdentifierID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string IdentifierID
        {
            get
            {
                return this._identifierID;
            }
            set
            {
                if ((this._identifierID != value))
                {
                    this.OnIdentifierIDChanging(value);
                    this.ValidateProperty("IdentifierID", value);
                    this._identifierID = value;
                    this.RaisePropertyChanged("IdentifierID");
                    this.OnIdentifierIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'IdentifierTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int IdentifierTypeID
        {
            get
            {
                return this._identifierTypeID;
            }
            set
            {
                if ((this._identifierTypeID != value))
                {
                    this.OnIdentifierTypeIDChanging(value);
                    this.ValidateProperty("IdentifierTypeID", value);
                    this._identifierTypeID = value;
                    this.RaisePropertyChanged("IdentifierTypeID");
                    this.OnIdentifierTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._identifierID, this._identifierTypeID);
        }
    }
    
    /// <summary>
    /// The 'v_BlackInnerContractor' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class v_BlackInnerContractor : Entity
    {
        
        private string _citAdd;
        
        private string _citID;
        
        private Nullable<int> _company;
        
        private Nullable<DateTime> _dateofBirth;
        
        private string _empName;
        
        private string _empNameTh;
        
        private string _empsName;
        
        private string _empsNameTh;
        
        private string _firstSup;
        
        private string _gender;
        
        private int _newID;
        
        private string _telephone;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCitAddChanging(string value);
        partial void OnCitAddChanged();
        partial void OnCitIDChanging(string value);
        partial void OnCitIDChanged();
        partial void OnCompanyChanging(Nullable<int> value);
        partial void OnCompanyChanged();
        partial void OnDateofBirthChanging(Nullable<DateTime> value);
        partial void OnDateofBirthChanged();
        partial void OnEMPNameChanging(string value);
        partial void OnEMPNameChanged();
        partial void OnEMPNameThChanging(string value);
        partial void OnEMPNameThChanged();
        partial void OnEMPSNameChanging(string value);
        partial void OnEMPSNameChanged();
        partial void OnEMPSNameThChanging(string value);
        partial void OnEMPSNameThChanged();
        partial void OnFirstSupChanging(string value);
        partial void OnFirstSupChanged();
        partial void OnGenderChanging(string value);
        partial void OnGenderChanged();
        partial void OnNewIDChanging(int value);
        partial void OnNewIDChanged();
        partial void OnTelephoneChanging(string value);
        partial void OnTelephoneChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="v_BlackInnerContractor"/> class.
        /// </summary>
        public v_BlackInnerContractor()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CitAdd' value.
        /// </summary>
        [DataMember()]
        [StringLength(1000)]
        public string CitAdd
        {
            get
            {
                return this._citAdd;
            }
            set
            {
                if ((this._citAdd != value))
                {
                    this.OnCitAddChanging(value);
                    this.RaiseDataMemberChanging("CitAdd");
                    this.ValidateProperty("CitAdd", value);
                    this._citAdd = value;
                    this.RaiseDataMemberChanged("CitAdd");
                    this.OnCitAddChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CitID' value.
        /// </summary>
        [DataMember()]
        [StringLength(13)]
        public string CitID
        {
            get
            {
                return this._citID;
            }
            set
            {
                if ((this._citID != value))
                {
                    this.OnCitIDChanging(value);
                    this.RaiseDataMemberChanging("CitID");
                    this.ValidateProperty("CitID", value);
                    this._citID = value;
                    this.RaiseDataMemberChanged("CitID");
                    this.OnCitIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Company' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Company
        {
            get
            {
                return this._company;
            }
            set
            {
                if ((this._company != value))
                {
                    this.OnCompanyChanging(value);
                    this.RaiseDataMemberChanging("Company");
                    this.ValidateProperty("Company", value);
                    this._company = value;
                    this.RaiseDataMemberChanged("Company");
                    this.OnCompanyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DateofBirth' value.
        /// </summary>
        [DataMember()]
        public Nullable<DateTime> DateofBirth
        {
            get
            {
                return this._dateofBirth;
            }
            set
            {
                if ((this._dateofBirth != value))
                {
                    this.OnDateofBirthChanging(value);
                    this.RaiseDataMemberChanging("DateofBirth");
                    this.ValidateProperty("DateofBirth", value);
                    this._dateofBirth = value;
                    this.RaiseDataMemberChanged("DateofBirth");
                    this.OnDateofBirthChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EMPName' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string EMPName
        {
            get
            {
                return this._empName;
            }
            set
            {
                if ((this._empName != value))
                {
                    this.OnEMPNameChanging(value);
                    this.RaiseDataMemberChanging("EMPName");
                    this.ValidateProperty("EMPName", value);
                    this._empName = value;
                    this.RaiseDataMemberChanged("EMPName");
                    this.OnEMPNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EMPNameTh' value.
        /// </summary>
        [DataMember()]
        [StringLength(30)]
        public string EMPNameTh
        {
            get
            {
                return this._empNameTh;
            }
            set
            {
                if ((this._empNameTh != value))
                {
                    this.OnEMPNameThChanging(value);
                    this.RaiseDataMemberChanging("EMPNameTh");
                    this.ValidateProperty("EMPNameTh", value);
                    this._empNameTh = value;
                    this.RaiseDataMemberChanged("EMPNameTh");
                    this.OnEMPNameThChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EMPSName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EMPSName
        {
            get
            {
                return this._empsName;
            }
            set
            {
                if ((this._empsName != value))
                {
                    this.OnEMPSNameChanging(value);
                    this.RaiseDataMemberChanging("EMPSName");
                    this.ValidateProperty("EMPSName", value);
                    this._empsName = value;
                    this.RaiseDataMemberChanged("EMPSName");
                    this.OnEMPSNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EMPSNameTh' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EMPSNameTh
        {
            get
            {
                return this._empsNameTh;
            }
            set
            {
                if ((this._empsNameTh != value))
                {
                    this.OnEMPSNameThChanging(value);
                    this.RaiseDataMemberChanging("EMPSNameTh");
                    this.ValidateProperty("EMPSNameTh", value);
                    this._empsNameTh = value;
                    this.RaiseDataMemberChanged("EMPSNameTh");
                    this.OnEMPSNameThChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FirstSup' value.
        /// </summary>
        [DataMember()]
        [StringLength(5)]
        public string FirstSup
        {
            get
            {
                return this._firstSup;
            }
            set
            {
                if ((this._firstSup != value))
                {
                    this.OnFirstSupChanging(value);
                    this.RaiseDataMemberChanging("FirstSup");
                    this.ValidateProperty("FirstSup", value);
                    this._firstSup = value;
                    this.RaiseDataMemberChanged("FirstSup");
                    this.OnFirstSupChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Gender' value.
        /// </summary>
        [DataMember()]
        [StringLength(1)]
        public string Gender
        {
            get
            {
                return this._gender;
            }
            set
            {
                if ((this._gender != value))
                {
                    this.OnGenderChanging(value);
                    this.RaiseDataMemberChanging("Gender");
                    this.ValidateProperty("Gender", value);
                    this._gender = value;
                    this.RaiseDataMemberChanged("Gender");
                    this.OnGenderChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NewID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int NewID
        {
            get
            {
                return this._newID;
            }
            set
            {
                if ((this._newID != value))
                {
                    this.OnNewIDChanging(value);
                    this.ValidateProperty("NewID", value);
                    this._newID = value;
                    this.RaisePropertyChanged("NewID");
                    this.OnNewIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Telephone' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string Telephone
        {
            get
            {
                return this._telephone;
            }
            set
            {
                if ((this._telephone != value))
                {
                    this.OnTelephoneChanging(value);
                    this.RaiseDataMemberChanging("Telephone");
                    this.ValidateProperty("Telephone", value);
                    this._telephone = value;
                    this.RaiseDataMemberChanged("Telephone");
                    this.OnTelephoneChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._newID;
        }
    }
    
    /// <summary>
    /// The 'v_Employee' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class v_Employee : Entity
    {
        
        private string _empid;
        
        private string _empName;
        
        private string _empsName;
        
        private string _funcAbbrev;
        
        private string _funcID;
        
        private string _funcName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnEMPIDChanging(string value);
        partial void OnEMPIDChanged();
        partial void OnEMPNameChanging(string value);
        partial void OnEMPNameChanged();
        partial void OnEMPSNameChanging(string value);
        partial void OnEMPSNameChanged();
        partial void OnFuncAbbrevChanging(string value);
        partial void OnFuncAbbrevChanged();
        partial void OnFuncIDChanging(string value);
        partial void OnFuncIDChanged();
        partial void OnFuncNameChanging(string value);
        partial void OnFuncNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="v_Employee"/> class.
        /// </summary>
        public v_Employee()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'EMPID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(15)]
        public string EMPID
        {
            get
            {
                return this._empid;
            }
            set
            {
                if ((this._empid != value))
                {
                    this.OnEMPIDChanging(value);
                    this.ValidateProperty("EMPID", value);
                    this._empid = value;
                    this.RaisePropertyChanged("EMPID");
                    this.OnEMPIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EMPName' value.
        /// </summary>
        [DataMember()]
        [StringLength(20)]
        public string EMPName
        {
            get
            {
                return this._empName;
            }
            set
            {
                if ((this._empName != value))
                {
                    this.OnEMPNameChanging(value);
                    this.RaiseDataMemberChanging("EMPName");
                    this.ValidateProperty("EMPName", value);
                    this._empName = value;
                    this.RaiseDataMemberChanged("EMPName");
                    this.OnEMPNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'EMPSName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string EMPSName
        {
            get
            {
                return this._empsName;
            }
            set
            {
                if ((this._empsName != value))
                {
                    this.OnEMPSNameChanging(value);
                    this.RaiseDataMemberChanging("EMPSName");
                    this.ValidateProperty("EMPSName", value);
                    this._empsName = value;
                    this.RaiseDataMemberChanged("EMPSName");
                    this.OnEMPSNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuncAbbrev' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string FuncAbbrev
        {
            get
            {
                return this._funcAbbrev;
            }
            set
            {
                if ((this._funcAbbrev != value))
                {
                    this.OnFuncAbbrevChanging(value);
                    this.RaiseDataMemberChanging("FuncAbbrev");
                    this.ValidateProperty("FuncAbbrev", value);
                    this._funcAbbrev = value;
                    this.RaiseDataMemberChanged("FuncAbbrev");
                    this.OnFuncAbbrevChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuncID' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(4)]
        public string FuncID
        {
            get
            {
                return this._funcID;
            }
            set
            {
                if ((this._funcID != value))
                {
                    this.OnFuncIDChanging(value);
                    this.RaiseDataMemberChanging("FuncID");
                    this.ValidateProperty("FuncID", value);
                    this._funcID = value;
                    this.RaiseDataMemberChanged("FuncID");
                    this.OnFuncIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuncName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string FuncName
        {
            get
            {
                return this._funcName;
            }
            set
            {
                if ((this._funcName != value))
                {
                    this.OnFuncNameChanging(value);
                    this.RaiseDataMemberChanging("FuncName");
                    this.ValidateProperty("FuncName", value);
                    this._funcName = value;
                    this.RaiseDataMemberChanged("FuncName");
                    this.OnFuncNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._empid;
        }
    }
    
    /// <summary>
    /// The 'v_GroupForSelect' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class v_GroupForSelect : Entity
    {
        
        private string _agentName;
        
        private string _agentSName;
        
        private string _companyName;
        
        private long _groupID;
        
        private Nullable<int> _notPassCount;
        
        private Nullable<int> _passCount;
        
        private DateTime _timeIn;
        
        private Nullable<int> _total;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAgentNameChanging(string value);
        partial void OnAgentNameChanged();
        partial void OnAgentSNameChanging(string value);
        partial void OnAgentSNameChanged();
        partial void OnCompanyNameChanging(string value);
        partial void OnCompanyNameChanged();
        partial void OnGroupIDChanging(long value);
        partial void OnGroupIDChanged();
        partial void OnNotPassCountChanging(Nullable<int> value);
        partial void OnNotPassCountChanged();
        partial void OnPassCountChanging(Nullable<int> value);
        partial void OnPassCountChanged();
        partial void OnTimeInChanging(DateTime value);
        partial void OnTimeInChanged();
        partial void OnTotalChanging(Nullable<int> value);
        partial void OnTotalChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="v_GroupForSelect"/> class.
        /// </summary>
        public v_GroupForSelect()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'AgentName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string AgentName
        {
            get
            {
                return this._agentName;
            }
            set
            {
                if ((this._agentName != value))
                {
                    this.OnAgentNameChanging(value);
                    this.RaiseDataMemberChanging("AgentName");
                    this.ValidateProperty("AgentName", value);
                    this._agentName = value;
                    this.RaiseDataMemberChanged("AgentName");
                    this.OnAgentNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AgentSName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string AgentSName
        {
            get
            {
                return this._agentSName;
            }
            set
            {
                if ((this._agentSName != value))
                {
                    this.OnAgentSNameChanging(value);
                    this.RaiseDataMemberChanging("AgentSName");
                    this.ValidateProperty("AgentSName", value);
                    this._agentSName = value;
                    this.RaiseDataMemberChanged("AgentSName");
                    this.OnAgentSNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CompanyName' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string CompanyName
        {
            get
            {
                return this._companyName;
            }
            set
            {
                if ((this._companyName != value))
                {
                    this.OnCompanyNameChanging(value);
                    this.ValidateProperty("CompanyName", value);
                    this._companyName = value;
                    this.RaisePropertyChanged("CompanyName");
                    this.OnCompanyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'GroupID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long GroupID
        {
            get
            {
                return this._groupID;
            }
            set
            {
                if ((this._groupID != value))
                {
                    this.OnGroupIDChanging(value);
                    this.ValidateProperty("GroupID", value);
                    this._groupID = value;
                    this.RaisePropertyChanged("GroupID");
                    this.OnGroupIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'NotPassCount' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> NotPassCount
        {
            get
            {
                return this._notPassCount;
            }
            set
            {
                if ((this._notPassCount != value))
                {
                    this.OnNotPassCountChanging(value);
                    this.RaiseDataMemberChanging("NotPassCount");
                    this.ValidateProperty("NotPassCount", value);
                    this._notPassCount = value;
                    this.RaiseDataMemberChanged("NotPassCount");
                    this.OnNotPassCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PassCount' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> PassCount
        {
            get
            {
                return this._passCount;
            }
            set
            {
                if ((this._passCount != value))
                {
                    this.OnPassCountChanging(value);
                    this.RaiseDataMemberChanging("PassCount");
                    this.ValidateProperty("PassCount", value);
                    this._passCount = value;
                    this.RaiseDataMemberChanged("PassCount");
                    this.OnPassCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TimeIn' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public DateTime TimeIn
        {
            get
            {
                return this._timeIn;
            }
            set
            {
                if ((this._timeIn != value))
                {
                    this.OnTimeInChanging(value);
                    this.ValidateProperty("TimeIn", value);
                    this._timeIn = value;
                    this.RaisePropertyChanged("TimeIn");
                    this.OnTimeInChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Total' value.
        /// </summary>
        [DataMember()]
        public Nullable<int> Total
        {
            get
            {
                return this._total;
            }
            set
            {
                if ((this._total != value))
                {
                    this.OnTotalChanging(value);
                    this.RaiseDataMemberChanging("Total");
                    this.ValidateProperty("Total", value);
                    this._total = value;
                    this.RaiseDataMemberChanged("Total");
                    this.OnTotalChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return EntityKey.Create(this._companyName, this._groupID, this._timeIn);
        }
    }
    
    /// <summary>
    /// The 'v_Section' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class v_Section : Entity
    {
        
        private string _funcAbbrev;
        
        private string _funcID;
        
        private string _funcName;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnFuncAbbrevChanging(string value);
        partial void OnFuncAbbrevChanged();
        partial void OnFuncIDChanging(string value);
        partial void OnFuncIDChanged();
        partial void OnFuncNameChanging(string value);
        partial void OnFuncNameChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="v_Section"/> class.
        /// </summary>
        public v_Section()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'FuncAbbrev' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string FuncAbbrev
        {
            get
            {
                return this._funcAbbrev;
            }
            set
            {
                if ((this._funcAbbrev != value))
                {
                    this.OnFuncAbbrevChanging(value);
                    this.RaiseDataMemberChanging("FuncAbbrev");
                    this.ValidateProperty("FuncAbbrev", value);
                    this._funcAbbrev = value;
                    this.RaiseDataMemberChanged("FuncAbbrev");
                    this.OnFuncAbbrevChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuncID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(4)]
        public string FuncID
        {
            get
            {
                return this._funcID;
            }
            set
            {
                if ((this._funcID != value))
                {
                    this.OnFuncIDChanging(value);
                    this.ValidateProperty("FuncID", value);
                    this._funcID = value;
                    this.RaisePropertyChanged("FuncID");
                    this.OnFuncIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FuncName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string FuncName
        {
            get
            {
                return this._funcName;
            }
            set
            {
                if ((this._funcName != value))
                {
                    this.OnFuncNameChanging(value);
                    this.RaiseDataMemberChanging("FuncName");
                    this.ValidateProperty("FuncName", value);
                    this._funcName = value;
                    this.RaiseDataMemberChanged("FuncName");
                    this.OnFuncNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._funcID;
        }
    }
    
    /// <summary>
    /// The 'WorkArea' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class WorkArea : Entity
    {
        
        private string _detail;
        
        private string _name;
        
        private long _workAreaID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDetailChanging(string value);
        partial void OnDetailChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnWorkAreaIDChanging(long value);
        partial void OnWorkAreaIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkArea"/> class.
        /// </summary>
        public WorkArea()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Detail' value.
        /// </summary>
        [DataMember()]
        public string Detail
        {
            get
            {
                return this._detail;
            }
            set
            {
                if ((this._detail != value))
                {
                    this.OnDetailChanging(value);
                    this.RaiseDataMemberChanging("Detail");
                    this.ValidateProperty("Detail", value);
                    this._detail = value;
                    this.RaiseDataMemberChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkAreaID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long WorkAreaID
        {
            get
            {
                return this._workAreaID;
            }
            set
            {
                if ((this._workAreaID != value))
                {
                    this.OnWorkAreaIDChanging(value);
                    this.ValidateProperty("WorkAreaID", value);
                    this._workAreaID = value;
                    this.RaisePropertyChanged("WorkAreaID");
                    this.OnWorkAreaIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._workAreaID;
        }
    }
    
    /// <summary>
    /// The 'WorkType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/RealApplication01.Web")]
    public sealed partial class WorkType : Entity
    {
        
        private string _detail;
        
        private string _name;
        
        private long _workTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDetailChanging(string value);
        partial void OnDetailChanged();
        partial void OnNameChanging(string value);
        partial void OnNameChanged();
        partial void OnWorkTypeIDChanging(long value);
        partial void OnWorkTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="WorkType"/> class.
        /// </summary>
        public WorkType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Detail' value.
        /// </summary>
        [DataMember()]
        public string Detail
        {
            get
            {
                return this._detail;
            }
            set
            {
                if ((this._detail != value))
                {
                    this.OnDetailChanging(value);
                    this.RaiseDataMemberChanging("Detail");
                    this.ValidateProperty("Detail", value);
                    this._detail = value;
                    this.RaiseDataMemberChanged("Detail");
                    this.OnDetailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Name' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    this.OnNameChanging(value);
                    this.RaiseDataMemberChanging("Name");
                    this.ValidateProperty("Name", value);
                    this._name = value;
                    this.RaiseDataMemberChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'WorkTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public long WorkTypeID
        {
            get
            {
                return this._workTypeID;
            }
            set
            {
                if ((this._workTypeID != value))
                {
                    this.OnWorkTypeIDChanging(value);
                    this.ValidateProperty("WorkTypeID", value);
                    this._workTypeID = value;
                    this.RaisePropertyChanged("WorkTypeID");
                    this.OnWorkTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._workTypeID;
        }
    }
}
